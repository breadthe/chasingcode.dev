<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Chasing Code</title>
    <link href="https://chasingcode.dev" />
    <link type="application/atom+xml" rel="self" href="https://chasingcode.dev/blog/feed.atom" />
    <updated>2024-07-11T04:22:02+00:00</updated>
    <id>https://chasingcode.dev/blog/feed.atom</id>
    <author>
        <name>Constantin</name>
    </author>
                <entry>
    <id>https://chasingcode.dev/blog/how-i-work-in-an-async-team</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/how-i-work-in-an-async-team" />
    <title>How I work in an async team</title>
    <published>2024-07-10T00:00:00+00:00</published>
    <updated>2024-07-10T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I am currently working in a remote asynchronous small SaaS company, but I have been a remote worker for many years. This requires a lot of self-management, and what works best for me is to document everything and keep extensive notes.

I have refined my......</summary>
    <content type="html"><![CDATA[
        <p>I am currently working in a remote asynchronous small SaaS company, but I have been a remote worker for many years. This requires a lot of self-management, and what works best for me is to document everything and keep extensive notes.</p>

<p>I have refined my work routine over the years, with adjustments pertaining to the company and the team, and I wanted to outline the current iteration for myself and others who might find it useful.</p>

<h2>Daily routine</h2>

<p>These are the actions that I perform every day when I log into my workstation, roughly in this order of priorities.</p>

<ul>
<li>check Slack

<ul>
<li>address direct messages</li>
<li>skim production errors channel (or take further action if I'm on tech support duty that week)</li>
<li>read new messages &amp; respond if appropriate (sometimes people have questions that I can answer)</li>
</ul></li>
<li>check the calendar for meetings (only a couple per week, but sometimes there are more)</li>
<li>check email

<ul>
<li>delete most new emails (routine notifications &amp; marketing stuff from vendors)</li>
<li>address anything that I need to take action on (almost never happens)</li>
</ul></li>
<li>check GitHub notifications

<ul>
<li>skim completed tickets (merges, closed issues) and dismiss them</li>
<li>read assigned issues (usually these are near-future todos)</li>
<li>reduce everything down to PRs (pull requests)</li>
</ul></li>
<li>create a new Obsidian document for today from a template (see below)

<ul>
<li>mark down today's tasks, including any meetings</li>
<li>sometimes I jot down notes that don't need to be remembered beyond today</li>
</ul></li>
<li>go through each PR request and review it (this can take a while)</li>
</ul>

<p>Sometimes the above tasks might take half a day depending on how much administrative/clerical work there is.</p>

<p>Next...</p>

<ul>
<li>once PRs are handled, I'll start actual work</li>
<li>the first work item is to address any feedback or requested changes on my own PRs</li>
<li>once that's taken care of I can move to actual work on my own issues (coding mostly)</li>
<li>open a PR once the work is completed

<ul>
<li>describe the changes</li>
<li>outline the testing methodology</li>
<li>tag reviewers</li>
</ul></li>
<li>move on to the next task</li>
</ul>

<p>If I'm on tech support duty that week, I have additional tasks:</p>

<ul>
<li>inspect each production error carefully</li>
<li>triage and (if necessary) capture each new error in a new issue with as much detail as possible</li>
<li>if it's a serious issue start working on a (hot)fix immediately</li>
<li>merge approved PRs</li>
<li>once all the merged PRs have been merged into the Staging I'll do a Production deployment</li>
<li>announce the deployment in a couple of specific Slack channels</li>
<li>keep an eye on errors that might stem from the recent deployment (rare, but it sometimes it happens)</li>
</ul>

<h2>Meetings</h2>

<p>Thankfully there aren't many meetings at the current company - typically two per week. I do take notes during these meetings in the daily journal (see below).</p>

<h2>Document everything</h2>

<p>I'm not one of those people who have a photographic memory and can remember what they had for breakfast 11 years ago on a Tuesday. So I find it very important to document everything at work: processes, how tos, daily tasks, meetings, etc.</p>

<p>The tool that I've been using for a few years now is <a href="https://obsidian.md/">Obsidian</a>. Like the <a href="https://en.wikipedia.org/wiki/One_Ring">One Ring</a>, I think this is - by far - the best note-taking tool ever. This is not an Obsidian review, but some of the things I love about it include: the simple UI, (deep) document linking, tagging, folders, global search, graph view, plugins.</p>

<p>I (ab)use it heavily to take hundreds (if not thousands by now) of notes. My vaults live in iCloud, so they are backed up and synchronized across my Apple devices.</p>

<h2>The Obsidian templates</h2>

<p>I use Obsidian to track work by creating</p>

<ul>
<li>a new document for each work day</li>
<li>a new document for every ticket I work on</li>
</ul>

<h3>Daily template</h3>

<p>I organize work days into weekly folders labeled from 001 to... infinity, as in <code>week 001</code> ... <code>week 999</code> (hopefully I'll retire long before week 999). I then archive each weekly folder into a yearly folder labeled <code>2024</code>, etc, once there are no incomplete tasks remaining in that week.</p>

<p>Document title: <code>Day 123 - Mon Jan 01</code></p>

<p>Template:</p>

<pre><code class="language-markdown"># Standup
*Today* (Mon Jan 01)
-
*Tomorrow*
-
*Need*
-

# Todo
- [ ] task 1
- [ ] task 2

# Meeting 1
- [ ] discuss thing 1
- [ ] discuss thing 2

# Meeting 2
-
</code></pre>

<p>The <strong>Standup</strong> section is useful to quickly copypasta into our daily status Slack channel. Markdown ensures it gets formatted nicely by Slack.</p>

<p>The <strong>Todo</strong> section is for ad-hoc tasks that I want to do that day, which don't require a separate document. Usually this is stuff I can finish that day. If not, it'll get punted to the next day.</p>

<p>The <strong>Meeting</strong> section is for taking notes when there's a meeting that day. I also have a checklist of things that I want to bring up with the team, questions or otherwise. I keep adding items to this list as I remember them.</p>

<p>Each day I make a duplicate of the previous day and change the title. So <code>Day 123 - Mon Jan 01</code> becomes <code>Day 124 - Tue Jan 02</code>. This has the added benefit of carrying over incomplete tasks. I can quickly delete the previous day's completed tasks and add new ones for today.</p>

<h3>Ticket template</h3>

<p>In the same weekly folder <code>week 001</code> as described above, I will create a new document for each ticket I'm working on. The template below is its own document named <code>üèÅ99999-issue-branch-template</code> that I duplicate into a new document, and then rename the slug appropriately.</p>

<p>For tickets taking more than a week to complete, or that I haven't started yet in the current week, I'll move them to the next week. This way the current week always has unfinished tickets, and I can easily archive previous weeks.</p>

<p>Document title/slug: <code>üèÅ99999-issue-branch-template</code></p>

<p>Template:</p>

<pre><code class="language-markdown">Issue:
https://github.com/organization/repo/issues/99999

Branch:
99999-branch

üèÅ Not started
üöß In progress
üëÄ In review
‚ôªÔ∏è Changes requested
‚úÖ Merged
üö´ Not doing / deferred

PR:
https://github.com/organization/repo/pull/

# Notes


# Testing

</code></pre>

<p>The document slug is generated from the GitHub issue title. So for an issue titled <code>Page request copy is truncated #12345</code> my document slug would be <code>12345-page-request-copy-is-truncated</code>.</p>

<p>I use ChatGPT to quickly convert this to kebab case for me. The prompt is:</p>

<pre><code>for all the subsequent conversations in this chat i want you to convert github issue titles that look like this "Page request copy is truncated #12345" into slugs that look like this "12345-page-request-copy-is-truncated" for the purpose of using it as git branches
</code></pre>

<p>I prefix the document slug with emoji icons to quickly distinguish ticket state while I'm working on it. This has the added benefit of automatically sorting issues by completion state in my weekly folder.</p>

<h2>Takeaway</h2>

<p>If you work long enough in an environment where you have to self-manage, you'll find that certain patterns begin to emerge. While acknowledging that every company, team, or project is different, it's useful to form a "big picture" daily routine that you can apply to the majority of situations with minimum tweaks. The end goal is to make your work day more efficient and less stressful by implementing a blueprint that you can follow reliably every day of the week.</p>

<p>Obsessive note-taking may not work for everyone, but I wish I had discovered this a lot earlier in my career. If you feel like you're struggling or having trouble managing work (especially in a remote setting), I recommend finding an organizing framework and note-taking system that works for you. In the meantime, take a look at mine in case it's something you can use.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/this-app-could-have-been-a-spreadsheet</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/this-app-could-have-been-a-spreadsheet" />
    <title>This app could have been a spreadsheet</title>
    <published>2024-07-05T00:00:00+00:00</published>
    <updated>2024-07-05T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">We all know the &quot;this meeting could have been an email&quot; meme. I had a thought along the same lines, except for side projects.

You aren&#039;t a &quot;real&quot; developer until you&#039;ve re-invented the wheel a few times by overengineering functionality that could have......</summary>
    <content type="html"><![CDATA[
        <p>We all know the "this meeting could have been an email" meme. I had a thought along the same lines, except for side projects.</p>

<p>You aren't a "real" developer until you've re-invented the wheel a few times by overengineering functionality that could have been easily handled by a spreadsheet. I am so (so) guilty of that myself. I know it - yet I still fall into the same trap.</p>

<p>Here are some of my own examples of apps that I am itching to build, despite successfully using spreadsheets of the same since forever.</p>

<ul>
<li>a stuff tracker (things I've bought / retired over the years) - I actually built a prototype of this one</li>
<li>a movie tracker - I built a couple of versions that I subsequently abandoned</li>
<li>a book tracker</li>
<li>a subscription tracker (gym, Netflix, yada yada)</li>
<li>a trip packing list manager - I think this might be actually useful since I find it very handy in planning what to pack on recurring trips</li>
<li>a friends tracker (reminders to get in touch with friends I haven't contacted in a while)</li>
<li>batteries manager (electronics use tons of different alkaline battery types, this would track which is which)</li>
<li>calorie/activity/injury/illness tracker (basically an "everything diary") - this would be a cool project, but ultimately too complex for what I have in mind</li>
</ul>

<p>So you see, all of these can easily live in a spreadsheet that can be thrown together in a few minutes, and evolved over time. Building an app - while a good exercise in itself - can be way too much work for ultimately the same result.</p>

<p>Now don't let me dissuade you from the learning process if that is the main goal, but next time you are tempted to build an app, ask yourself "can this app be a spreadsheet?"</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/be-a-content-consumer-for-once</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/be-a-content-consumer-for-once" />
    <title>Be a content consumer for once</title>
    <published>2024-06-20T00:00:00+00:00</published>
    <updated>2024-06-20T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I&#039;ve been burning out for a long time. Programming has been a significant part of my hobbies outside of my day job (which is also programming, duh) but the mental-ness of it all has been gradually wearing me down to the point where I had to step away and......</summary>
    <content type="html"><![CDATA[
        <p>I've been burning out for a long time. Programming has been a significant part of my hobbies outside of my day job (which is also programming, duh) but the mental-ness of it all has been gradually wearing me down to the point where I had to step away and embrace the hedonism of consumerism for a change.</p>

<p>Even this article is hard to write since it implies a minimum of brain power and creativity. But I finally dragged my ass out of the virtual couch to put down a few words on the topic, partially for accountability towards future me, but also as a "hey I'm floundering over here and it's ok" gesture to the couple of y'all who are still (for some reason) reading this blog.</p>

<p>So here we are. I'm not the first software professional who's had enough hustling and decided to put their head down, focus on the day job that allows them to put food on the table, and do something completely unrelated outside of that.</p>

<p>Speaking of hustling, oh boy don't get me started. Like many, I bought into the software hustle culture, spurred by Twitter and loads of success stories by indie hackers who seem to be able to fart money before I've even had my first coffee. Good for them I say!</p>

<p>Why can't I do the same though? After all, I'm a pretty good developer, I love my craft, I really enjoy coding, and it brings me joy to create software. You see, the obvious thing I'm lacking is the ability to market and sell the things I make. And that's way more important than the ability to code and come up with new ideas, <em>if</em> you want to make money with your software.</p>

<p>I don't know if I'll ever develop that ability to <em>sell</em> stuff. I have a bad habit of being almost ashamed to ask for money. What really kills it for me, though, is the point where the hacking stops and the marketing starts. It feels so distasteful that I usually prefer to release it for free and move on.</p>

<p>I guess I'm going to be a wage slave for the rest of my career. And maybe that's ok - we can't all be entrepreneurs. Let's be real though - there's not much room for "woe is me" here. We in the software industry are truly privileged, whether working for ourselves or someone else. Self-pity not required.</p>

<p>Now, the day job is the day job. It has its ups and downs, its satisfactions and frustrations. It's not perfect, but it pays the bills (less every year with inflation, natch!) and it helps support my lifestyle (sadly I can't afford to race cars like DHH, nor a Lambo like Taylor).</p>

<p>I thought that if I worked on side projects outside of the 9-5 (after all, I have a ton of cool ideas), maybe I can break out on my own and become an entrepreneur. There's been one snag though. For more than a decade I have made fitness my main priority outside of work. So I am a bit of an (amateur) athlete - not only very fit for my age, but compelled to exercise daily. Which means that other activities (like hacking on side-projects) take a back-burner. Yet, I'm unwilling to trade fitness for more mental stress and potentially more money. I look around me at people who work way too much and exercise way too little and I don't like what I see. What good is all that money if your health and quality of life decline a lot faster than they should?</p>

<p>At the same time, like a lot of people who suffer from a cocktail of OCD, anxiety, impostor syndrome, a hunger for creativity, and a dash of <a href="https://en.wikipedia.org/wiki/Fear_of_missing_out">FOMO</a>, I feel compelled to "produce" something as opposed to consuming. Compounded with memories of a "wasted" youth in the form of playing too many video games, my older (and methinks wiser) brain is trying to compensate by over-assimilating and overproducing.</p>

<p>Unfortunately, with age comes a diminished capacity for mental stress. For a while now I've reached a point of saturation where I'm bouncing between hobbies, but mostly <em>away</em> from side-projects-as-a-hobby.</p>

<p>All this to say that my mental capacity is just about filled up at the end of the workday, and all I have left in me is an acute need to squeeze the brain-strain out through intense physical exercise. At the end of it I'm drained both ways and the only thing I can still handle is a mindless - and purely hedonistic - activity such as playing a game, watching a movie or a show, or reading a book or comic.</p>

<p>This is probably a phase. I go through them periodically. There are game phases when I'm glued to the gaming PC for a couple of months until I become bored. As I write this, I think I'm over that - I'm just about played out. Now I'm going through a binge-watching phase and I'm enjoying the ride. Once I'm tired of that there's a chance I'll swing back to side-projects. Or not. Time will tell.</p>

<p>I think I'm done with forcing myself to spend my free time in a rigid manner. My mental health has benefited from letting myself go with the flow.</p>

<p>If you feel stuck in a similar grind, I recommend it. Give it a try. You might enjoy being a consumer for once.</p>

<h2>Things I've consumed recently</h2>

<p>Because people have asked, here are some shows and (PC) games I've enjoyed during this burnout spell.</p>

<p><strong>Shows</strong></p>

<ul>
<li>Captain Fall  - Season 1 (2024)</li>
<li>True Detective - Season   4 (2024)</li>
<li>Fallout - Season 1 (2024)</li>
<li>The 3 Body Problem - Season 1 (2024)</li>
<li>Scavengers Reign - Season 1 (2023)</li>
<li>Beef - Season 1 (2023)</li>
<li>Tour de France Unchained - Season 1, 2 (2024)</li>
<li>Delicious in Dungeon - Season 1 (2024)</li>
</ul>

<p><strong>Games</strong></p>

<ul>
<li>Witchfire</li>
<li>Last Epoch (replay on V1)</li>
<li>Ostranauts</li>
<li>Valheim (yeah, I'm replaying this)</li>
</ul>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/i-hate-side-quests</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/i-hate-side-quests" />
    <title>I hate side quests</title>
    <published>2024-04-05T00:00:00+00:00</published>
    <updated>2024-04-05T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Picture this: it&#039;s late in the evening and you have a couple of hours to work on a side project.

You sit down eagerly, wake up the computer, open the IDE, and... things start going wrong.

First, the IDE&#039;s license has run out. Waste 15 minutes sorting......</summary>
    <content type="html"><![CDATA[
        <p>Picture this: it's late in the evening and you have a couple of hours to work on a side project.</p>

<p>You sit down eagerly, wake up the computer, open the IDE, and... things start going wrong.</p>

<p>First, the IDE's license has run out. Waste 15 minutes sorting that out. Then, all your tools decide they want to update (after all, you haven't touched your laptop in a while). But wait, your password manager is locked (waste a few more seconds), and it too wants to update and restart. Perhaps some of the tooling needs to be reset or restarted (there go another 10 minutes). Your browser pulls a fast one and also wants an update and a restart (bye 15 more seconds).</p>

<p>Finally, you decide to write a quick blog post to bitch about it.</p>

<p>By the time everything decides to cooperate you've only got 30 minutes left until you're completely shot and ready for bed. Might as well leave that project for another night.</p>

<p>The next evening you think your plate is empty, only to find a weird charge on your credit card (Mailgun wtf? You were using Mailgun on an old side project, but were you paying for it all this time?) so you investigate, only to discover that the old project had been purring along nicely until recently when it was suddenly discovered by spammers who abused the email feature. You decide to put that feature behind a paid plan but paid plans aren't actually implemented in your project (maybe you should turn on Stripe production), and the project itself has outdated dependencies and it's hard to do anything with it.</p>

<p>So now you have two side projects that need attention.</p>

<p>I fucking hate side-quests.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/ultimate-php-rss-feed-parser-library</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/ultimate-php-rss-feed-parser-library" />
    <title>The ultimate PHP RSS feed parser library</title>
    <published>2024-03-23T00:00:00+00:00</published>
    <updated>2024-03-23T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">The quest is over - I have found the perfect PHP library for parsing RSS and Atom feeds. I present you SimplePie.

My 2024 side project is a browser-based RSS reader/aggregator. This post isn&#039;t about why I&#039;m building something that already exists in......</summary>
    <content type="html"><![CDATA[
        <p>The quest is over - I have found the perfect PHP library for parsing RSS and Atom feeds. I present you <a href="http://simplepie.org/">SimplePie</a>.</p>

<p>My 2024 side project is a browser-based RSS reader/aggregator. This post isn't about why I'm building something that already exists in countless forms. Suffice to say that, with the ongoing <a href="https://en.wikipedia.org/wiki/Enshittification">enshittification</a> of the web, I strongly believe we should take back control of our data.</p>

<p>The core of an RSS reader is a reliable parser. Unfortunately, parsing XML is hard. RSS/Atom feeds aren't much easier to parse either, mostly because there are many different versions and standards for each but worst of all, the web is rife with feeds that don't conform to any standard or are broken.</p>

<p>I am not interested in building a feed parser. My goal is to build the experience - the functionality, the aggregation logic, the UX. My app is Laravel (PHP), so one of the first steps was to search for a pre-built open-source feed parsing library. Tough quest.</p>

<p>After going on the wrong track with a different library (that shall not be named because it's somewhat decent and a lot of work went into it), I came across <a href="http://simplepie.org/">SimplePie</a>.</p>

<p>At first glance, it's easy to discount SimplePie. After all, the website looks like it's frozen in the early 00s and the docs mention <em>downloading</em> the library. I mean, ugh, right? I don't mean to sound elitist because I hold a lot of nostalgia for that era, but we've long since moved on from that age with modern <a href="https://getcomposer.org/">composer</a>.</p>

<p>SimplePie does have its own website, so I took the time to read about its features and dig through the docs. The <a href="https://github.com/simplepie/simplepie">public repo is on GitHub</a>.</p>

<h2>Interesting facts</h2>

<p>I found out that:</p>

<ul>
<li>it has been around for 20 years!</li>
<li>it has been using composer for <a href="https://github.com/simplepie/simplepie/commit/6bd35fa3b4a08a2421e99aea4f1c18c9329b1a0c">12 years</a>!</li>
<li>it handles all kinds of feeds (even somewhat-broken ones) like a champ.</li>
<li>the docs on the website stop at v1.3, yet the latest version on GitHub is v1.8.</li>
<li>the latest version has lax requirements (PHP >= 7.2).</li>
<li>it is still actively maintained (the latest commits are from a few months ago).</li>
<li>it's got way more features than I currently need.</li>
<li>the license is very permissive (<a href="https://opensource.org/license/BSD-3-Clause">BSD-3</a>).</li>
</ul>

<h2>Quirks and gotchas</h2>

<ul>
<li>the website isn't very well maintained. Hell, it doesn't even run on HTTPS. I'm not holding this against the authors because I know how thankless open-source development is. Kudos to them for having a website in the first place and maintaining this project for so many years ‚ù§Ô∏è</li>
<li>the <a href="http://simplepie.org/api/class-SimplePie.html">docs</a> are very disorganized and old-school-like, yet thorough, and the API is documented in great detail.</li>
<li>there are multiple 1000+ line classes, with the <a href="https://github.com/teamzac/larapie/blob/master/src/Feed.php">main class</a> at 3000+ lines. I love it though, bring back the old web ü§ò</li>
<li>it's not immediately obvious how to use it; nothing that some <a href="https://github.com/simplepie/simplepie/blob/master/tests/SubscribeUrlTest.php">source-diving</a> and careful parsing of the docs can't fix.</li>
</ul>

<h2>Usage example</h2>

<p>Here's a simple method that I added to a <code>Feed</code> model to get the data I need from an RSS/Atom feed url: basic feed metadata + feed items which I then dump into my database.</p>

<pre><code class="language-php">public function fetch(): void
{
    $pie = new SimplePie;

    // I may decide to enable this later, for now it's fine the way it is
    $pie-&gt;enable_cache(false);

    // the original feed URL that I want to retrieve
    $pie-&gt;set_feed_url($this-&gt;link);

    if ($pie-&gt;init()) {
        $this-&gt;title = $pie-&gt;get_title();
        $this-&gt;description = $pie-&gt;get_description();
        $this-&gt;last_fetched_at = now();
        $this-&gt;link = $pie-&gt;subscribe_url(); // can be different than the original feed URL
        $this-&gt;site_link = $pie-&gt;get_base();

        $feed_items = [];

        foreach ($pie-&gt;get_items() as $item) {
            $feed_items[] = [
                'title' =&gt; $item-&gt;get_title(),
                'link' =&gt; $item-&gt;get_permalink(),
                'description' =&gt; $item-&gt;get_description(),
                'author' =&gt; $item-&gt;get_author()-&gt;name,
                'guid' =&gt; $item-&gt;get_id(),
                'published_date' =&gt; $item-&gt;get_date(),
                'updated_date' =&gt; $item-&gt;get_updated_date(),
            ];
        }
        $this-&gt;feed_items = $feed_items;

        $this-&gt;save();
    }
}
</code></pre>

<h2>Bonus - Quick peek</h2>

<p>Here's a bonus preview of a very early prototype for the RSS reader I'm working on. Made with Laravel + Livewire, and of course SimplePie.</p>

<p><img src="/assets/img/2024-03-23-rss-reader-early-prototype.gif" alt="RSS reader early prototype" /></p>

<h2>In closing</h2>

<p>All things considered, <em>SimplePie kicks some serious ass</em>! It does exactly what I need it to, and the old-school vibe is actually attractive to this older developer who started his career in that era.</p>

<p>This is a serious and hardcore PHP codebase that puts newer libraries and frameworks to shame. While the <a href="https://github.blog/2023-06-08-developer-experience-what-is-it-and-why-should-you-care/">DX</a> for the API isn't quite up to our modern sensibilities, I like the old-school vibes and honesty of it. Very importantly though, it is thoroughly <a href="https://docs.phpdoc.org/guide/guides/docblocks.html">docblock</a>ed, giving the IDE good intelligence about the internals.</p>

<p>I'll end this love letter by urging any PHP developer interested in RSS to give SimplePie some affection and <a href="https://github.com/simplepie/simplepie">star it on GitHub</a> because 1.5k stars for this jewel is low, man!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/upgrade-ubuntu-from-20-to-22</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/upgrade-ubuntu-from-20-to-22" />
    <title>How to upgrade a Ubuntu server from 20.04 to 22.04</title>
    <published>2024-03-19T00:00:00+00:00</published>
    <updated>2024-03-19T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I operate a $5 Linode VPS and I just upgraded Ubuntu from 20.04 to 22.04.

I thought I would copy the young&#039;uns and ask ChatGPT how do to it. Here&#039;s what it told me. Surprisingly it worked.



But before you do this, you might need to get the official......</summary>
    <content type="html"><![CDATA[
        <p>I operate a $5 Linode VPS and I just upgraded Ubuntu from 20.04 to 22.04.</p>

<p>I thought I would copy the young'uns and ask ChatGPT how do to it. Here's what it told me. Surprisingly it worked.</p>

<pre><code class="language-bash">sudo apt-get update
sudo apt-get upgrade
sudo apt-get dist-upgrade
sudo apt-get autoremove
sudo reboot
</code></pre>

<p>But before you do this, you might need to get the <a href="https://wiki.ubuntuusers.de/sources.list/#Ubuntu-20-04">official sources for Ubuntu 22.04</a>. That's because you might get a <code>Invalid package information</code> error.</p>

<pre><code>deb http://de.archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
deb http://de.archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
deb http://de.archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
deb http://de.archive.ubuntu.com/ubuntu jammy-backports main restricted universe multiverse
</code></pre>

<p>Copy these and paste them at the end of this file:</p>

<pre><code class="language-bash">sudo vi /etc/apt/sources.list
</code></pre>

<p>Then proceed with the commands at the top. Occasionally you'll be asked whether to keep certain config files or replace them with fresh configs. I chose to keep my old ones.</p>

<pre><code>Configuration file '/etc/crontab'
 ==&gt; Modified (by you or by a script) since installation.
 ==&gt; Package distributor has shipped an updated version.
   What would you like to do about it ?  Your options are:
    Y or I  : install the package maintainer's version
    N or O  : keep your currently-installed version
      D     : show the differences between the versions
      Z     : start a shell to examine the situation
 The default action is to keep your current version.
*** crontab (Y/I/N/O/D/Z) [default=N] ?
</code></pre>

<p>And that's it.</p>

<pre><code class="language-bash">cat /etc/issue
Ubuntu 22.04.4 LTS
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/games-of-the-year-2023</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/games-of-the-year-2023" />
    <title>Top games of 2023</title>
    <published>2024-03-17T00:00:00+00:00</published>
    <updated>2024-03-17T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I don&#039;t, as a rule, pay full price for any game (with some exceptions). Like many people spoiled by Steam sales and a huge Steam library, I am patient enough to wait until a game goes on sale before pulling the trigger. I&#039;ve got plenty to play until......</summary>
    <content type="html"><![CDATA[
        <p>I don't, as a rule, pay full price for any game (with some exceptions). Like many people spoiled by Steam sales and a huge Steam library, I am patient enough to wait until a game goes on sale before pulling the trigger. I've got plenty to play until then.</p>

<p>This is a chronicle of the games I liked the most in 2023. Some of them were released previously to 2023, I just bought and played them this year.</p>

<p>I've only finished two of these games.</p>

<p>Here they are, in no particular order. Note that the <strong>platform</strong> is whatever I own it on. Some of these games run on other platforms as well. Some I've bought on multiple platforms (desktop + Switch).</p>

<p>A word on <strong>Switch vs PC</strong>. These are the two gaming platforms I currently own. Before I buy a game I ask myself, where would I play it the most? The choice comes down to: is the game better suited for a small screen (visually and in terms of hardware), and does it work really well with a controller? If the answer is yes, then I'll most likely buy it on the Switch (also if the price is discounted). If the answer is no, then it's probably PC. I also play certain games on the <strong>Mac</strong> but only when I'm traveling for work and I don't already have it on the Switch.</p>

<h2>Satisfactory</h2>

<p><strong>Genre</strong> 1st/3rd person open world exploration, factory building and automation
<strong>Platform</strong> Steam/PC</p>

<p>Take <a href="https://www.factorio.com/">Factorio</a>, add 3D and some unique mechanics, subtract a bunch of anxiety, and you get Satisfactory. The overarching story is also similar: you're stranded on an alien planet and need to survive and evolve the technology to the point where you can leave. I like it because I have a soft spot for sandbox games, especially ones that let you alter the environment permanently.</p>

<p>There's a lot to like here. There are multiple technology tiers (up to 9 at last count), each progressively harder to reach due to requiring increasingly complex materials and factories to produce said materials. There's a lot of open world exploration, first on foot, later with vehicles.</p>

<p>Exploration will take a lot of your time (something I enjoy), because you will be searching for various resources you'll need to progress. Along the way you'll discover crashed ships with scattered materials that you can pilfer and new technology that you can assimilate, but also alien denizens that'll get rather annoyed to have you around, not to mention toxic or radioactive areas that are off-limits until you can research appropriate PPE.</p>

<p>Then there are the factories, that start small much like Factorio only to escalate in complexity, until you end up with a veritable spaghetti of stacked assemblers, horizontal and vertical conveyor belts, gantries, and every industrial fixture you can imagine.</p>

<p>Automation is key here, and there'll be lots of it if you want to keep your sanity or evolve beyond the basics. There are also blueprints, which every respectable factory game has, allowing you to pre-define entire manufacturing flows and place them to be constructed in one click.</p>

<p>Vehicles are very important, but thankfully don't need a lot of investment to get started with. Eventually you'll have access to vacuum tubes (for quick travel), automated drones, trucks, trains, and more that I haven't yet unlocked.</p>

<p>I moved on to other games long before reaching the apex of the technology tree, but Satisfactory was... um... very satisfactory for the dozens of hours I played it. I'll very likely go back to it at some point. If you can catch a sale (or even without), it's a no-brainer. As I type this, it's $16.49 (45% off).</p>

<p><strong>The good</strong> - Easier than Factorio, yet the 3D world makes it feel vast. The world is static (as in not procedurally generated) but huge, so there's a lot to explore before you get bored. Unlike Factorio, you can build vertically, meaning that you can stack related manufacturing facilities more efficiently. A lot of things to build. Combat is not generally dangerous if you keep up with the tech tree. Much fun at all levels.
<strong>The bad</strong> - It can get rather grindy at later stages. Just like Factorio, if you don't plan correctly you'll end up with factory spaghetti. Might require searching online for advanced tips &amp; tricks.
<strong>The ugly</strong> - It's still in early access (but new content has been constantly released).</p>

<h2>Last Epoch</h2>

<p><strong>Genre</strong> Action RPG
<strong>Platform</strong> Steam/PC</p>

<p>Simply put, Last Epoch is a spiritual successor to both Diablo 2 (the best Diablo ever) and Path of Exile. As a big fan of both these games, this was a no-brainer.</p>

<p>LE is a fast-paced RPG that puts you in the middle of the action from the get-go. There are 5 classes with 3 specializations each, for a total of 15 combinations that all play uniquely. But more importantly, each skill in the game has its own tree, which means you can make the same skill act radically different from the base skill, without factoring in synergies with other skills and the equally expansive class skill tree.</p>

<p>You'll progress quickly through a story-packed campaign to reach the real meat-and-potatoes which is the endgame. Here, you'll have the option of 3 or 4 different mechanics in the form of zones (called monoliths) and dungeons with progressive difficulty and random stats (in a similar fashion to PoE), and some endless mode thrown in.</p>

<p>Itemization is pretty good, certainly better than Diablo 4 and perhaps on par with Diablo 2, with some original twists thrown in there. I'm not an expert, but all I can say is that it felt good to me, compared to Diablo 4's items which seemed boring af.</p>

<p>Bottom line - if you're thinking about buying Diablo 4, save $35 and buy Last Epoch instead. There's a lot more bang for your buck here.</p>

<p><strong>The good</strong> - A great spiritual successor to both Diablo 2 and Path of Exile. A lot of fun leveling up, and the end game is pretty damn good too. Good itemization with some original ideas. Powerful-feeling classes and specializations, each with distinct gameplay. Deeply customizable skills. Affordable and painless respecs.
<strong>The bad</strong> - For min-maxing and a chance to push higher difficulty monoliths at the endgame you'll end up researching builds online.
<strong>The ugly</strong> - The endgame grind. Missing specializations when I played it - now they're all in the game with v1 released.</p>

<h2>Halls of Torment</h2>

<p><strong>Genre</strong> Survivors-like retro roguelike autobattler
<strong>Platform</strong> Steam/PC</p>

<p>Remember Vampire Survivors? It's the autobattler roguelike with pixelated graphics that spawned a bazillion similar copycats. Halls of Torment is one of those clones, but stands out above most.</p>

<p>HoT brings a few unique ideas to the table. Chiefly among them are the items. You'll acquire items during runs, usually after defeating (mini)bosses and completing events. You'll then carry those items to a well that transports the item to the surface. Back at your camp, you'll be able to buy the item from a vendor. Once you've bought it, you can equip it on any of your characters.</p>

<p>If the previous paragraph didn't make much sense that's because item retrieval isn't very well explained and you'll have to figure it out for yourself. If you ask me, it's not the smartest way to extract an item from a dungeon, but at least it's a unique take.</p>

<p>Going back to the items themselves, each character has several slots (ya know, the usual head, chest, etc). Items confer mostly unique, class-specific, or skill-altering abilities rather than flat stat boosts, while others are agnostic and can benefit any class or skill. So that's good. Oh, once you've purchased an extracted item from the vendor, you can equip the same item on multiple classes.</p>

<p>You unlock different classes and skills as you progress. There are the classic melee, ranged, magic, summoner, beastmaster, etc types. Like any good Survivors clone, you are presented with 3 skill choices whenever you level up during a run.</p>

<p>But Halls of Torment brings a certain Diablo 1-like vibe to it that is hard to resist. The gritty but detailed pixelated graphics, combined with the scaled-up characters and monsters (again, compared to Survivors) and the itemization, make it feel like a veritable child of Diablo 1 and Vampire Survivors.</p>

<p>The fact that it I can play it on PC with an Xbox wireless controller is an added bonus.</p>

<p>If you like Vampire Survivors, get Halls of Torment.</p>

<p><strong>The good</strong> - Unique take on the survivors genre. Very good art reminiscent of 90s RPGs. Solid and satisfying gameplay. Unbeatable price - only $5, often on sale for $4.
<strong>The bad</strong> - You will die. Many times. Item retrieval is weird. Itemization is not really my cup of tea, though interesting nonetheless.
<strong>The ugly</strong> - It's still in early access (but this only means a lot of content is yet to come).</p>

<h2>Death Must Die</h2>

<p><strong>Genre</strong> Survivors-like retro roguelike autobattler
<strong>Platform</strong> Steam/PC</p>

<p>Take what I said about Halls of Torment above and apply it to Death Must Die, but throw in some Hades vibes in there as well.</p>

<p>You see, much like Hades, in Death Must Die your ultimate goal is another head honcho - Death itself. Along the way, every time you level up a random god will give you a choice between 3 abilities based on their own alignment (the God of Fire will give you fire abilities, while the God of Thunder... well, you get it). There are synergies between the various elements and alignments, of course, and this makes for some powerful combos if you get lucky.</p>

<p>Once again, there are various classes that you unlock as you progress through the (somewhat) sparse storyline.</p>

<p>There's also itemization, but a lot closer to a standard RPG this time. Each character has a paperdoll with equipment slots, as well as an inventory where they store excess items. There's also a shared stash back at the base. The items themselves are a lot more stat-based than Halls of Torment, but they are also color-coded white-blue-purple-etc. Some of the more special ones have skill-altering stats.</p>

<p>Thankfully you can equip items as soon as you find them, but certain items are class-specific.</p>

<p>This one's also playable with a wireless Xbox controller on a PC.</p>

<p>All in all, Death Must Die is a great addition to your Survivors portfolio.</p>

<p><strong>The good</strong> - It takes the good parts from several games and combines them into an engaging survivors-like experience. Very satisfying combat with a variety of distinct builds, not just from the different classes, but also from the random gods you'll encounter. Pretty good itemization.
<strong>The bad</strong> - Items can feel generic after a while. Difficulty ramps up quickly.
<strong>The ugly</strong> - It's still in early access.</p>

<h2>ŒîV: Rings of Saturn</h2>

<p><strong>Genre</strong> Physics-based space mining/exploration sim
<strong>Platform</strong> Steam/PC</p>

<p>I'm a sucker for space mining games. I haven't played a lot because I'm still searching for the perfect one. Rings of Saturn comes close. Umm, ignore the Œî (pronounced "Delta") because it's a weird character that has no place in the English language outside of a lab or a physics lesson.</p>

<p>But there's the rub - the <em>physics</em> aspect. Rings of Saturn is heavily physics based. There's mass, momentum, inertia, acceleration, and a lot more of that sciency mumbo-jumbo. Fret not - it's presented in an easily digestible manner. Oh and this is a 2D game, which makes it all the more interesting to me. Screw that 3rd dimension, it's only there to cause trouble.</p>

<p>There's a short but concise tutorial when you get thrown into a new game, and it serves well to explain how to control your ship. Thankfully the starter ship is very maneuverable, though small, but this is exactly what you want initially. Eventually you'll get comfortable enough with the controls that you'll want to spring for bigger, but more sluggish ships.</p>

<p>The point of the game is to mine rare minerals in the rings of Saturn (ya know, that cool planet in our Solar system). You accomplish this in various ways, but the starting ship has only a mass driver (fancy term for a railgun) and an excavator-like scoop. You fly around and maneuver using your thrusters until you find a promising rock (read "big enough"), then you aim and blast it with your mass driver. After one or more shots the rock will shatter and sometimes reveal a mineral nugget. Because a mass driver fires a projectile, there's recoil, and the mineral kernel might also spin away from you at increasing velocity. Hence the delta-V (the difference in velocity between bodies - I hope I'm not butchering the concept).</p>

<p>So now you're faced with a hard decision: should you power up your engines to full burn and chase after the nugget, risking smashing into other rocks, or just let it go and find one that sticks around after being cracked open? Choices, choices. Oh, btw, smashing into hard objects in this game can quickly evolve from bad to fatal. Ships have many modules that will get damaged by impacts, so you want to be extra careful when navigating. A common disaster scenario as a noob (or even later with bad luck) is losing maneuvering and braking thrusters and spinning out of control. Of course, the deeper you go into Saturn's rings (you start at the outer edges) the denser the floaty rocks, so you want to get those controls down to a science before you blunder your way in deeper.</p>

<p>Don't worry though. Once your cargo hold is full you can head back to the station for a repair and a refuel, and to sell your load. Early on, it only takes a couple of trips before you can start upgrading equipment. Eventually you'll have access to mining lasers, microwaves, mechanical arms, automatic collectors, sophisticated radar, powerful engines, and of course big ships. There are even floating refineries that are sluggish as hell but can carry and refine huge loads.</p>

<p>One piece of essential equipment that you'll want as soon as you can afford it is the scanner, combined with a geologist crew member. This will identify each mineral chunk as it's ejected from its rocky cocoon, showing a readout of the chemical symbol and the value. The chief benefit is that it will allow you to focus on the most valuable nuggets, while ignoring cheap ones.</p>

<p>You can (and should) hire crew for your ship. Crew members must be paid a regular salary, and skilled ones don't come cheap, but they'll make a huge difference in how a ship operates, and ultimately will greatly improve your mining yield. As I mentioned above, a geologist will earn their salary on the first trip.</p>

<p>There's more to the game than just mining. I haven't got very far, but there are various stations that you'll discover, pirates and odd characters you'll run into, and space races you can participate in if you feel inclined (just don't bring your refinery ship to the race).</p>

<p>If I'm not mistaken, this is one of those indie games that was made by a single person, or at least a tiny team. Some of that is reflected in the grittiness, but it's also why this game is so amazing and special.</p>

<p>If you like space (mining) sims, this game is a must, especially for the measly $10 it costs. Oh and it also runs on a Mac, so there.</p>

<p><strong>The good</strong> - Very unique take on the space mining genre. Solid physics engine that will literally throw you for a loop. Wide variety of ships and mining gear. Different ways to enjoy it (miner, pirate, racer, etc). Vast (though repetitive, but it's space duh) area to explore.
<strong>The bad</strong> - A lot of things aren't explained very well beyond the initial brief tutorial, leaving the player to figure it out (though some people like this).
<strong>The ugly</strong> - Time consuming if you want to discover all it has to offer.</p>

<h2>Slay the Spire</h2>

<p><strong>Genre</strong> Deck-builder roguelike
<strong>Platform</strong> Nintendo/Switch</p>

<p>You must have been living under a rock if you haven't heard of Slay the Spire. It's been quite a sensation over the last couple of years. I'll admit that I'm not big into deck-builder games, and this is actually my first one.</p>

<p>I spent quite a significant time playing it on the Switch, and I still haven't managed to get very far. This is a game of skill and strategy, that will take hundreds or thousands of attempts to master.</p>

<p>The controls work great on the Switch and the graphics are perfect for it, so it's a great little complex and portable game. You can easily kill a 10 hour flight engrossed in it.</p>

<p>Anyway, I won't go into much detail describing Slay the Spire because a lot of ink has already been spilled over it. Suffice to say that if you're into deck-builders, this one's a must.</p>

<p><strong>The good</strong> - Seriously fun and engaging gameplay. Cute art. Solid controls.
<strong>The bad</strong> - 2 of the 4 character classes are not that appealing to me (but that's because I suck).
<strong>The ugly</strong> - I'm not that good at it and have barely made it halfway through the campaign.</p>

<h2>Loop Hero</h2>

<p><strong>Genre</strong> Retro-inspired retro strategy roguelike autobattler
<strong>Platform</strong> Steam/Mac &amp; Nintendo/Switch</p>

<p>This game is honestly hard to put in any box, as I've never quite played anything like it. Hence the weird genre amalgamation I made up. It has a little bit from each, with a sliver of idle clicker thrown in.</p>

<p>You start with a hero of a particular class (more classes unlocked as you progress) who moves around a randomly generated circular track. Monsters spawn periodically; every time your hero encounters them there's quick auto-combat. If you die, it's game over. But that happens later. In the early stages your hero won't have much trouble quickly vanquishing any foe they encounter, especially since monsters drop loot that you can equip to enhance your fighting and survival abilities.</p>

<p>Every time you complete a loop, monster levels go up but so does the loot. So next time around you'll get a chance to upgrade your gear when something better drops. There's a day cycle as well, causing monsters to respawn.</p>

<p>Monsters also drop two other kinds of resources. There are materials that you use for meta progression in between runs (after you ded) to expand your base, hence giving you various bonuses. Then there's the meat-and-potatoes of this game: building and terrain cards that go into a deck and can be placed on the map strategically. Beware though: older cards that overflow the deck will be automatically discarded, so you should use the best ones soon.</p>

<p>The terrain cards fall in several categories.</p>

<p>For starters, there are map tiles that will give you resources when you place them on your map. When similar tiles are adjacent, they reinforce each other, giving you survivability bonuses (like more HP, or regen after each loop). At the same time, if a "mini-biome" becomes too large it will spawn additional enemy types. For example the mountain biome will spawn harpies when it reaches a certain size.</p>

<p>Then there are enemy structures that you can place either on the path itself, or next to it. They will spawn new enemies roughly every day cycle. Juggling how many buildings you add before you are overwhelmed with spawns is a key part of the strategy.</p>

<p>Finally there are buff tiles that can be placed near the loop path. You'll get specific buffs while traveling in their radius. So you might want to use these buffs strategically around bigger pockets of enemies or enemy structures.</p>

<p>There are several hero classes themed around the standard melee, rogue, magic, etc. One of my favorite is the necromancer who auto-summons skeletons to fight for them. With this class your equipment is focused around skeleton survivability and damage. With other classes you can play defensive, offensive, vampiric, or evasion builds. Evasion is particularly satisfying, as you will take very few hits when you have a ton of evasion, with the downside that your defense will suffer hence making even small hits feel painful.</p>

<p>The end goal is to survive enough loops in order to trigger an arch-boss. There's probably more to it, but that's all I can say as I haven't got to that part yet.</p>

<p><strong>The good</strong> - Unique gameplay. Can be left to run in the background and do its thing, with sporadic interaction to place tiles or equip better gear. This reviewer finds the retro art very pleasing.
<strong>The bad</strong> - Long grind to beat it.
<strong>The ugly</strong> - There doesn't seem to be an actual endgame, just attempting increasingly harder loops.</p>

<h2>Dave the Diver</h2>

<p><strong>Genre</strong> Story-driven adventure/fishing/shop management sim
<strong>Platform</strong> Steam/Mac</p>

<p>Dave the Diver was one of the most highly regarded games of 2023, and for good reason. Starting with the pixelated but cute and intricate graphics, following up with the likable characters, and rounding off with a simple but solid game loop, Dave can easily swallow hours of your time. It has strong East Asian vibes (I believe it's made by a Korean team), but the NPCs are multinational, each with its own quirky lovable personality.</p>

<p>I played my copy on a Mac with a wireless gamepad, but it runs just as well on the Switch.</p>

<p>You play the role of Dave, a meek fellow who finds himself in an exotic lagoon with a deep trench and a sushi restaurant nearby. Right off the bat, Dave is sucked into helping the local community.</p>

<p>There are two main game modes. During the day, Dave will dive in the trench (or hole as it's called in the game) and catch fish using various harpoons and other tools. At night, Dave helps to run the sushi restaurant by serving the customers with dishes cooked from the fish he caught previously.</p>

<p>I'm not much into shop management sims, but Dave's restaurant mode captured me right away. The gamepad controls are very intuitive and I get a kick from doing my best to serve customers efficiently. At the end of the shift there's a satisfying tally screen that shows what profits you've made.</p>

<p>The earnings are used for a variety of upgrades, including fishing weapons and gear, improvements to the restaurant (furniture and decorations that will bring in more customers), and hiring helpers (thus serving more customers per shift).</p>

<p>Fish are used for various dishes that initially sell for a couple of bucks. You can use excess fish to upgrade a dish, but you'll also discover more expensive dishes as you progress. Ingredient requirements will also increase. Eventually, elaborate dishes will be selling for hundreds of dollars.</p>

<p>The fishing game is equally satisfying. You are limited by your equipment (chiefly the air supply) in how far down you can swim. Depth also affects how quickly your air depletes. However this can be increased by upgrading your equipment. Most fish are passive (but they'll run away if you don't one-shot them), but there are plenty of aggressive ones too. Sharks anyone? There are several types of shark btw. You catch fish by aiming your speargun and pulling the trigger. If you hook the fish you can reel it in. It takes some practice but the learning curve is shallow. Later you'll evolve to sniper rifles and grenade launchers among other things.</p>

<p>In the water you'll find various powerups, materials, and ingredients in chests and on the ocean floor.</p>

<p>I would probably be happy enough with the two modes, but there's much more. For one thing, there's the over-arching narrative. It's a pretty compelling story, that involves some mystery which you'll work towards uncovering. You will, of course, go much deeper. There are boss sea monsters that you'll fight. There are at least 4-5 minigames that you can play if you get bored. There are 3 types of farms that you can manage later on. And Dave gets a smartphone with a lot of apps used to buy and upgrade equipment, manage various systems remotely, play some of the minigames, communicate with the NPCs, and so on. There's even an encyclopedia of all the discovered fish.</p>

<p>Dave the Diver is a lot of fun. I moved on to other things before finishing it. Without spoilers, I wasn't exactly fond of the later story, and the boss battles were getting more and more stressful, requiring careful timing and multiple deaths before succeeding.</p>

<p><strong>The good</strong> - Very enjoyable, good vibes, A+ art and graphics. The main fishing + restaurant management gameplay loop is very solid and satisfying.
<strong>The bad</strong> - There's a bunch of stuff (like most of the minigames) that could have been left out. I don't think they contribute much to the game, and they're mostly just fluff.
<strong>The ugly</strong> - Boss battles got too hard for the amount of effort I was willing to put in. I empathized a lot more with the initial set of characters, and the second part of the story left me disconnected.</p>

<h2>Hardspace Shipbreaker</h2>

<p><strong>Genre</strong> Physics-based 3rd person 3D space salvage
<strong>Platform</strong> Steam/PC</p>

<p>People like breaking things. That's why there's a plethora of disassembly-themed games. After all, it's a lot easier to take something apart than it is to put it together. This is what Hardspace Shipbreaker is - a scratch-your-itch game for the disassembly crowd, in space.</p>

<p>You are a shipbreaker, a space dock worker tasked with breaking old ships apart for recycling. When the story begins you are in crippling debt to the corporation for which you're slaving.</p>

<p>The first 3rd or so of the game is a massive tutorial that doesn't feel tedious like most game tutorials. It does a great job to gradually introduce you to movement and controls, the various tools, and the increasingly complex ship systems and hazards that you have to contend with.</p>

<p>Each ship floats in space in proximity to 3 recycling areas: a systems barge, a furnace, and a materials recycler. You must put each of the 3 types of parts in the corresponding area to get proper credit. If you put a part in the wrong place you'll be penalized instead. You do that with a grappler tool that uses a sort of traction beam to grab hold of a part, then you drag it to where you want it to go while imparting momentum, and release. The physics (zero gravity and atmosphere) will take care of the rest. It's a very satisfying process and it works with heavy items as well, but beware: the heavier the item the more momentum it has, so you need to account for that.</p>

<p>While the grappler can also be used to get around by grappling onto a distant surface and reeling it in, there are other tools in your arsenal. Chiefly among them is the laser cutter. This tool has several modes. It can heat a spot, or can switch to a horizontal or vertical slicer. Use your judgement to determine which. Cutting near hazardous areas such as cryo or fuel tanks can be fatal if you're not careful.</p>

<p>The tether tool deserves special mention. This is a consumable "energy thread" that you attach one end of to a salvage item, and the other end to a recycling area intake. The tether will then pull the item in that direction, freeing you to do other things. The cool thing is that you can attach multiple tethers for extra pulling force, or you can chain multiple items together, or you can tie items to each other, or you can tie items to buttresses in the dock to peel off large sections of a ship while preventing it from drifting in the wrong direction. Tethers are paid consumables, and the max you can carry is low at the beginning, but you can upgrade the capacity later. It's an incredibly versatile tool that can be used strategically in many scenarios.</p>

<p>Your EVA suit has a jetpack (using fuel) and an air supply. If you run out of either you'll get stranded, or die. You can replenish both (as well as other consumables) at a vending booth outside the main station airlock. Due to the nature of the credit/debit system, and perhaps because you start in massive debt, it doesn't really matter how much the consumables cost. It doesn't really matter if you die either. A clone is ready to replace you, at a cost. It only plunges you farther into debt, but that won't matter at later stages of the game.</p>

<p>Just about the only downside of dying is that your shift is cut short and you wake up back in your cabin. Btw, you work in 15-minute shifts, so the idea is to recycle enough materials before the shift ends to turn a profit. Again, the game is laid back enough that this isn't an issue. Between shifts you'll spend some time in your cabin. It's a cozy little space that you can customize to a small extent with posters that you find on ships. It's also where you can buy upgrades (not with money but with XP that you gain by hitting salvage milestones), and where some of the narrative unfolds.</p>

<p>Speaking of narrative, a compelling story is weaved into the game loop. There's a series of NPCs that you will interact with, namely your coworkers, superiors, and corporation executives. Without spoiling anything, it involves drama, some tense moments, sabotage, union action, but ultimately a happy ending. The characters are relatable and likable. They chime in as you progress, as portraits that you can't interact with. The voice acting is top-notch and chisels the personality of every NPC to perfection. It made me actively root for the downtrodden and hate the bastards.</p>

<p>This is one of just two games I finished in 2023, partly because I played it obsessively for a couple of weeks, partly because the progression is brisk, and partly because there's not a ton of content. I played about 43 hours, but I'm sure a second playthrough would be quicker since I'm so familiar with it.</p>

<p><strong>The good</strong> - Performant 3D engine, slick UI. Satisfying mechanics aided by solid-feeling tools. Controls are easy to master. Tangible rewards and visible progress. The tether system is brilliant; I want that in real life. Great voice acting, engaging story, and relatable characters.
<strong>The bad</strong> - It will become obvious that ships are put together in predictable ways, even if increasingly complex, removing some of the joy of discovery. Death is not a huge deal, making you careless and sloppy after a while.
<strong>The ugly</strong> - There's no endgame, per se. Sure, you can continue disassembling ships, but at this point you've already gone through the highest level ones, so it's just more of the same.</p>

<h2>Dredge</h2>

<p><strong>Genre</strong> Eldritch adventure, sea exploration, and fishing sim
<strong>Platform</strong> Steam/PC</p>

<p>I've had this game on my radar for a while, and bought it during a Steam sale. It works well with keyboard and mouse, but it's also available on the Switch. The controls are simple enough, though.</p>

<p>Dredge is a narrative-driven fishing and exploration game with a side of occult and eldritch terrors thrown in. I love the sleepy but terror-under-the-surface atmosphere that starts wearing on your psyche during the first few day-night cycles.</p>

<p>You play as a little boat (captain) who finds themselves in a chain of tiny islands in a vast sea. Some of these islands have tiny hamlets populated with the NPCs who drive the story. The hamlets usually have additional facilities like vendors and a shipyard. You'll also encounter solitary NPCs tucked away on various islands.</p>

<p>The main game loop involves fishing. Putt-putt your little boat until you find a fishing spot (indicated by a bubbly pool) and cast your rod. There's a minigame to reel the fish in, combined with some inventory Tetris. Your boat has limited inventory in the form of an irregular-shaped grid. Ideally you'll want to fill in the hold entirely before returning back to town. Fish and other items can be rotated for optimum use of available space. The bigger the fish, the more space it'll take. Fish are also irregularly-shaped, so this is an additional challenge. Boat equipment such as reels, engines, nets, etc also take up available space. Later you'll upgrade the space but it won't ever feel enough.</p>

<p>Once you have enough fish, return to town. Typically this will coincide with nightfall, when you definitely don't want to be caught out at sea. This is when the night terrors emerge. I won't spoil much, but it involves hallucinations and half-materialized apparitions and can be mildly unsettling. Unlike real life, nightmares can kill you in this game. So do your best to be back in town before darkness falls, or be prepared to dodge phantoms and run for your life.</p>

<p>As you talk to the townspeople the narrative unfolds. You can follow the main story but there are various side quests that are lucrative, as they'll provide you with useful items, equipment, and extra materials.</p>

<p>You'll use money and materials to upgrade your ship as you go along. This is a very important progression mechanism, as it allows you to fish in more advanced spots (for example there are oceanic, shallow, swamp, volcanic, etc spots that each require the appropriate type of rod), move faster, and adds the ability to <em>dredge</em>, among other things. Dredging (apropos the game title) is done in a special bubbly spot that you'll encounter as randomly as a fishing spot, and it involves yet another type of reeling minigame. Instead of fish you'll pull out materials (used for upgrades) and items (either for quests or that you can sell).</p>

<p>I enjoyed the fish-explore-upgrade-venture loop quite a bit. I wish the developers leaned even more into it, but ultimately this is a grand adventure wrapped around a satisfying resource gathering experience.</p>

<p>The game imparts a sense of ominous <em>quiet</em>. Peaceful at the surface, there's an impending hint of something lurking underneath, or at the very edges of your perception. The uneasiness grows as you untangle more of the story. At the same time, the nighttime feeling of helplessness diminishes somewhat as you upgrade your ship and your character, as this confers various pieces of equipment and skills that reduce the eldritch encounter risk.</p>

<p>The quests involve finding various items (through fishing or exploring), discovering new areas and NPCs, and solving various puzzles. The puzzles aren't especially tricky. While some are clever, making me feel like a real Sherlock when I figured them out, others are less obvious causing me to search for a solution online. Granted, I was also pressed for time as I needed to travel soon and I wanted to get through as much of the game as possible.</p>

<p>And that I did. To my surprise, I finished it in just over 16h. It ended quite abruptly after an incongruous dialogue with the main questgiver. A message warned there was no going back after that point, but I assumed it might be some sort of final boss battle. Instead, it played a cutscene and then cue the credits. It kinda felt like all my efforts thus far had been in vain.</p>

<p>Dredge was fun, though I strongly feel they should have allowed free play after the ending. I don't regret the purchase, but I would think twice before paying full price. Thankfully it goes on sale quite often on Steam and Switch.</p>

<p><strong>The good</strong> - Tense, suspenseful atmosphere. Gripping story (minus the ending). Cute cartoony 3D art. Pretty good fishing &amp; exploration experience.
<strong>The bad</strong> - Some of the puzzles weren't forthcoming, making me search online for solutions (I'm not a fan of puzzles and brain teasers in games).
<strong>The ugly</strong> - Too short. Very abrupt and unsatisfying ending. It should give you an option to continue playing.</p>

<h2>Honorable mentions</h2>

<p><strong>Roboquest</strong> (Steam/PC) - a fast 3D FPS roguelike shooter. You're fighting hordes of robots across a series of biomes divided into smaller areas. Each biome culminates in a big bad boss that you have to defeat in order to progress. The main highlight is the random wacky guns that drop from events. You can carry only 3 at a time so you need to discard one when you find something better. You also get powerups that give permanent boosts to stats and abilities for the current run. Dying respawns you back at your camp where you can take advantage of the meta progression to improve skills permanently. There are several player classes as well, though none of them feel particularly appealing or special. While the game has very cute cel-shaded graphics (that I dig a lot), runs very smoothly, and has very satisfying combat, ultimately I gave up on it because I felt the combat difficulty ramped up too quickly. After endless attempts I was barely able to beat the first boss twice, only to get clobbered hard in the next biome.</p>

<p><strong>Stacklands</strong> (Steam/PC/Mac) - roguelike deck builder strategy with a twist. This is another game that is hard to pin to a specific genre. The overall goal is to build a settlement with cards, but also expand it, and survive enemy attacks. You start with a random starter card pack containing an assortment of types. You then stack cards on top of each others to perform an action. For example you would stack a villager card on top of a berry bush card and the villager will start collecting berries (for food). Every day you need to feed your villagers. There are money cards that drop, but you can also sell a lot of the items you collect. Use the money to buy more packs. Get more villagers (I forget how). Stacklands has very original gameplay, but I stopped early because I am too dumb to make any sort of meaningful progress. For that reason I can't give any more details.</p>

<p><strong>Strange Horticulture</strong> (Steam/PC) - dark mystery story-driven adventure shop management. I'll admit that I was deceived by the premise of this game. I thought there would be heavy shop management involved, but instead I discovered that it's mostly a linear story wrapped around inheriting a herbalist store where the main tasks revolve around identifying new plants and providing them to a rotating cast of NPC visitors, each with their own problems and dark secrets. There are various puzzles to solve which weren't very demanding. Ultimately I abandoned it because I get bored with story-heavy games, and the plant identifying aspect got tedious after a while. Good art though, and soothing music. Overall not a bad game to chill to.</p>

<p><strong>Chillquarium</strong> (Steam/PC/Mac) - idle clicker aquarium management. A game with very cartoony pixelated art, you start with a basic aquarium and a handful of boring juvenile fish. You feed them by clicking in their vicinity, which drops fish pebbles (food). After a while they become adult, revealing their "true colors". You can sell these fish to buy fish card packs that can contain higher qualities (blue, yellow, purple, orange), kinda like items in an RPG game. The higher the fish tier, the longer it takes to evolve. Rarity is also determined by the color of the fish itself (gold being the highest). Raise them to adulthood, sell the ones you don't want to keep, rinse and repeat. The ultimate goal can be whatever you want, but in general it's collecting the rarest fish. There's a fish ledger that is fun to fill up as you collect 'em all. It's a pretty chill game for a pretty low price. It doesn't have a lot of replayability but it can be helpful for relaxing, if that's your thing.</p>

<h2>GOTY 2023</h2>

<p>My Game of the Year for 2023 is undoubtedly <strong>Last Epoch</strong>. I'm a sucker for ARPGs, and I played LE the most in 2023 (and rather obsessively). After Diablo 3 and 4 I became quite jaded about ARPGs, but Last Epoch revived that passion. It helped scratch that itch, and I would absolutely play it again.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/apple-migration-assistant-mac-2024</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/apple-migration-assistant-mac-2024" />
    <title>Apple Migration Assistant on the Mac in 2024</title>
    <published>2024-03-16T00:00:00+00:00</published>
    <updated>2024-03-16T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I bought a new Mac: a 2024 M3 MacBook Air that was just released a couple of weeks ago. This replaces a 2019 Intel i9 MacBook Pro. That machine was heavy and cumbersome, and slow as molasses despite the theoretical firepower.

I thought I would use the......</summary>
    <content type="html"><![CDATA[
        <p>I bought a new Mac: a 2024 M3 MacBook Air that was just released a couple of weeks ago. This replaces a 2019 Intel i9 MacBook Pro. That machine was heavy and cumbersome, and slow as molasses despite the theoretical firepower.</p>

<p>I thought I would use the Migration Assistant to move all my stuff over. I was quite surprised by how well it worked. Here are some thoughts and insights.</p>

<p>The Migration Assistant can be used during the onboarding process as soon you power up the new machine. The "donor" needs to be powered on and on the same network. I selected everything to be moved over.</p>

<p>I was a little uneasy when it gave me a 13 hour estimate. In the end it took 1 hour. Keep in mind that the old machine had 1 TB while the new one has only 512 GB. The total data moved was somewhere north of 200 GB and I was left with 118 GB free. If you think that's low, it's because I have a lot of duplicate stuff that will be cleaned up soon.</p>

<p>I've setup a fair share of Macs over the years, but I don't recall using the Migration Assistant before. Surprisingly, it did an amazing job.</p>

<h2>What worked out of the box</h2>

<p>It literally moved over <strong>all</strong> of my stuff.</p>

<p>Not only did my browsers still have the same <strong>tabs open</strong>, but I was <strong>logged</strong> into all the websites from the old machine.</p>

<p>My <strong>documents</strong> were all there, including the ones not in iCloud.</p>

<p><strong>Apps</strong>, likewise, were all there and worked without a hitch. Some exceptions apply, read below.</p>

<p>The craziest thing is that the movie I had started watching in VLC on the old machine resumed in the same spot on the new Mac.</p>

<p>Best of all, the <strong>coding tools</strong> were in place (again, with some exceptions): Laravel Herd, DBngin, TablePlus being the most important.</p>

<p>My <strong>ssh keys</strong> were in place, and I was able to ssh to my remote server without a hitch. I also connected to the <strong>remote database</strong> (with the same ssh key) without issues.</p>

<p><strong>PHP</strong> worked just fine at the command line, and my <strong>side projects</strong> ran in the browser the same way I left them. <strong>composer</strong> was fine.</p>

<p><strong>git</strong> worked as before.</p>

<h2>What needed some tweaking</h2>

<p>Some of the apps were made for <strong>x86</strong> and required <strong>Rosetta</strong> on the M3. I opted to uninstall them, and then downloaded the <strong>ARM</strong> version. Unfortunately certain apps are still missing an Apple Silicon build, thus requiring Rosetta (looking at you Garmin Express and Steam).</p>

<p>A few more that I had to replace with Apple Silicon versions are: 1Password, and JetBrains Toolbox.</p>

<p>At the <strong>command line</strong> (I use Warp for my terminal) I had a couple of issues. Bear in mind that all of these are related to migrating from an Intel machine to an Apple Silicon machine, and not really caused by the Assistant.</p>

<p>My <strong>Node</strong> version wasn't compatible with the new machine. It gave a <code>zsh: bad CPU type in executable: node</code> error. This was fixed quickly by installing the latest version with Herd.</p>

<p><strong>Homebrew</strong> gave a <code>Bad CPU type in executable</code> error when I ran it. I uninstalled it, then reinstalled it. In my <code>.zprofile</code> I replaced <code>eval $(/usr/local/bin/brew shellenv)</code> with <code>eval "$(/opt/homebrew/bin/brew shellenv)"</code>.</p>

<p><strong>bat</strong> (replacement for cat) gave a <code>zsh: bad CPU type in executable: bat</code> error. Fixed by running <code>brew install bat</code>.</p>

<p><strong>ncdu</strong> (replacement for du) gave a <code>zsh: bad CPU type in executable: ncdu</code> error. Fixed by running <code>brew reinstall ncdu</code>.</p>

<p><strong>rustup</strong> gave a <code>zsh: bad CPU type in executable: rustup</code> error. I fixed Rust by running the official install script <code>curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh</code>.</p>

<p><strong>cargo</strong> and <strong>rustc</strong> continued to give this error even after updating Rust <code>error: command failed: 'cargo/rustc': Bad CPU type in executable (os error 86)</code>. I should have done a fresh Rust install. So I uninstalled everything with <code>rustup self uninstall</code>, then ran the installation command again, and all 3 were working.</p>

<p>I ran into some problems with <code>npm run &lt;any-script&gt;</code> in a project.</p>

<pre><code class="language-bash">npm run dev
[webpack-cli] Error: spawn Unknown system error -86
</code></pre>

<p>This was fixed by installing Rosetta. I had to do that in any case since a few programs refused to run without it, but I wanted to leave it last.</p>

<pre><code class="language-bash">softwareupdate --install-rosetta
</code></pre>

<h2>Conclusion</h2>

<p>Apple's Migration Assistant has done a bang-up job in my opinion. Not everybody likes to copy over old settings and apps, but I'm lazy and I don't have any pleasure in setting up a machine from scratch. Besides, the old machine had been setup fresh only a year ago, so it's unlikely that a lot of bitrot had set in.</p>

<p>The only issues that gave me some headache were entirely related to changing architectures from x86 to ARM.</p>

<p>If you're in a similar situation (or just lazy like me), I highly recommend it.</p>

<p>I'll keep an eye out for issues over the next period and update this post accordingly.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/site-refresh-2024</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/site-refresh-2024" />
    <title>2024 site refresh</title>
    <published>2024-02-02T00:00:00+00:00</published>
    <updated>2024-02-02T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Freshly motivated at the turn of 2024, I started working slowly but steadily on refreshing the ChasingCode site and blog. It took a month of daily tinkering before releasing v2 on February 1st.

Here are some of the design decisions and highlights.



I......</summary>
    <content type="html"><![CDATA[
        <p>Freshly motivated at the turn of 2024, I started working slowly but steadily on refreshing the ChasingCode site and blog. It took a month of daily tinkering before releasing v2 on February 1st.</p>

<p>Here are some of the design decisions and highlights.</p>

<h2>I almost called it quits</h2>

<p>I came close to <a href="/blog/delete-or-refresh-blog/">deleting the site</a> at the end of 2023. Looking back, I'm glad I didn't. The refresh has given me a new desire to blog (at least for the time being).</p>

<h2>The two main themes of the refresh</h2>

<p>I went into this with two overarching themes in mind.</p>

<p>First, I wanted v2 to be more <strong>content-focused</strong> starting with the landing page. Previously, the site index had a lot of yada-yada about me. I moved all of that to separate sections under <a href="/about">about</a>. It includes work experience, hobbies, and side projects.</p>

<p>While initially I saw it as a personal/portfolio site with a blog attached, over time I realized that the landing page had remained frozen in time. Truth be told, I don't think anyone benefited from reading a long list of my personal stuff whenever they loaded the site, especially since that content was mostly static.</p>

<p>Now, the landing page is "alive" with <em>featured</em>, <em>recent</em>, and <em>recently updated</em> posts. There's also a <em>tag cloud</em> because I like tag clouds and it reminds me a little of the old web.</p>

<p>Second, I wanted to simplify the design and give it a slight <strong>utilitarian/brutalist vibe</strong>. I was also toying with the idea of going the opposite way by making it very colorful, but in the end I settled on what you see currently. For a first pass I think it looks great, though it's only 2/10 brutal if you ask me.</p>

<h2>Blog engine update</h2>

<p>I touched on this <a href="/blog/delete-or-refresh-blog/">here</a>, so I won't rehash it. Basically I upgraded <a href="https://jigsaw.tighten.com/">Jigsaw</a> to the ~~highest version possible, though not the latest because I'm constrained by Netlify's outdated infrastructure~~ latest version (1.7.1).</p>

<h2>Typography</h2>

<p>I came across <a href="https://modernfontstacks.com/">Modern Font Stacks</a> and immediately embraced the concept. Using native fonts is a great way to improve site performance. I gave up on the initial idea of using fancy fonts and self-hosting them.</p>

<p>Here's how I changed my fonts. I think they look a lot better and load instantly on any platform, without jank.</p>

<ul>
<li><strong>Body font</strong>: <code>Lato</code> -> System UI stack <code>font-family: system-ui, sans-serif;</code></li>
<li><strong>Heading font</strong>: <code>Bitter</code> -> Transitional stack <code>font-family: Charter, 'Bitstream Charter', 'Sitka Text', Cambria, serif;</code></li>
<li><strong>Monospace font</strong>: <code>Consolas</code> -> Monospace stack (very similar) <code>font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;</code></li>
</ul>

<p>I also changed the blogpost font size from <strong>20px to 16px</strong>. I've become partial to small text lately.</p>

<h2>Article column width</h2>

<p>I narrowed the main content column from <strong>~110 characters to ~80 characters</strong>. This makes it easier to scan a line of text and is just over the <a href="https://baymard.com/blog/line-length-readability">recommended 75 max line length</a>.</p>

<h2>Bundle size</h2>

<p>My <strong>JS</strong> bundle stayed the same. At 231 KB I think it is too high, but this is coming mainly from Jigsaw and a couple of Vue components. I should really refactor these to Alpine or similar but I don't have the willpower right now.</p>

<p>The <strong>CSS</strong> bundle dropped slightly from 34.7 KB to 31.3 KB. Not a lot, but better than nothing. I can do more optimizations here for sure. For one thing, I think I have one too many breakpoints (both <code>sm:</code> and <code>md:</code>). For another, I would like to do a color pass at some point and restrict the color palette (currently teal) to 2-3 theme shades instead of 3-4.</p>

<h2>Lighthouse</h2>

<p>Lighthouse scores are 100 for performance and almost 100 for the other categories. There are certainly a few improvements I could make here as well.</p>

<h2>Categories are now tags</h2>

<p>To me, putting an item in a <em>category</em> has always felt the equivalent of putting it in a folder, in other words it can't be in more than one category at the same time. In a default Jigsaw installation, categories act like tags.</p>

<p>I like tags because an item can have more than one <em>tag</em>, so it made sense to rename categories to tags.</p>

<p>I also changed tag names from camel case to lowercase or kebab case for multi-word tags. Examples:</p>

<ul>
<li><code>/blog/categories/Laravel</code> -> <code>/blog/tags/laravel</code></li>
<li><code>/blog/categories/MySQL</code> -> <code>/blog/tags/mysql</code></li>
<li><code>/blog/categories/DevTools</code> -> <code>/blog/tags/dev-tools</code></li>
</ul>

<p>I think I might also rename the <code>general</code> tag to <code>random</code>.</p>

<h2>Layout tweaks</h2>

<p>There are, of course, many layout improvements on every page, particularly on the landing page, the <a href="/blog">blog index</a>, blog post, <a href="/archive">post archive</a> and <a href="/about">about section</a>.</p>

<h2>Color palette</h2>

<p>One of my redesign goals was to change the color palette from the standard Tailwind <code>teal</code> to something else. This kept me going back and forth for days, without a clear result. Teal is rather cold and sterile, and I wanted something more vibrant - a red, purple, or yellow/orange. Because this was holding me back, I decided to leave it as is for now, and continue exploring options after I launch v2.</p>

<h2>Takeaways and the future</h2>

<p>I am very happy with how the refresh turned out. It only took one month of late-night work sessions, and I launched it unceremoniously on February 1st. Truthfully, I wasn't expecting to complete it so soon.</p>

<p>The main benefit is that a clean, fresh look motivates me to post more frequently. It remains to be seen how long this newfound enthusiasm will hold, but I've already collected a bunch of ideas on various developer-adjacent topics that I would like to post.</p>

<p>There are many things that I'd like to add and improve, however.</p>

<p>Apart from posting, I'd like to add a <strong>blogroll</strong> section for some of my favorite tech blogs. Then I think it would be cool to have <strong>games</strong> and <strong>books</strong> sections where I briefly mention my favorite games and books from each year. These last two are shaping out to be a lot of work, so I can't promise they will happen.</p>

<p>Finally, I would like to implement a GitHub-based <strong>commenting system</strong> with <a href="https://github.com/utterance/utterances">utterances</a>. Why GitHub? Three reasons: 1) it works well with static websites (and is free to boot), 2) the comments remain under the blog owner's control (unlike 3rd party systems like Disqus), 3) I want to limit commenting to developers (GitHub integration also takes care of authentication).</p>

<p>To conclude, I had fun redesigning the site, and I deem the refresh a big success. Let me know how you feel in the socials and I'll catch you in the next blogpost.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/the-year-of-sqlite</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/the-year-of-sqlite" />
    <title>The year of SQLite</title>
    <published>2024-01-23T00:00:00+00:00</published>
    <updated>2024-01-23T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I&#039;m calling it early - this is the year of SQLite (for me at least). If 2024 were to have a specific theme, SQLite is as good as any. This has been building up for a while, and now it&#039;s time to fully embrace it as an indie hacker.

You might consider......</summary>
    <content type="html"><![CDATA[
        <p>I'm calling it early - this is the year of SQLite (for me at least). If 2024 were to have a specific theme, SQLite is as good as any. This has been building up for a while, and now it's time to fully embrace it as an indie hacker.</p>

<p>You might consider using SQLite in your next project. My reasons for using it have multiplied over time. Here are some of them.</p>

<p>A database contained in a flat file is <strong>lightweight</strong> and <strong>easy to manage</strong>.</p>

<p><strong>Portable</strong> and <strong>easy to backup</strong>. It's a flat file, just copy-paste it.</p>

<p><strong>Performance</strong> is on par with "traditional" databases like MySQL. It can also <strong>handle millions</strong> (billions?) of <strong>records</strong> easily. <em>I picked these up from various articles, but I don't have any concrete citations</em>.</p>

<p>Over the past 1-2 years there's been a lot of chatter on the interwebs about various companies building <strong>successful products</strong> on SQLite. I'm seeing more of this as time goes by and people realize that it's a serious contender.</p>

<p>Easy to <strong>embed in a desktop app</strong> made with <a href="/categories/Tauri">Tauri</a> or <a href="/categories/Electron">Electron</a>.</p>

<p><strong>Taylor Otwell</strong> has been talking about making SQLite the <strong>default connection in Laravel 11</strong>. This is yet to be confirmed, and it might not even happen, but just the fact that it's being considered is a strong indicator that the community is leaning into it.</p>

<p><a href="https://aaronfrancis.com/">Aaron Francis</a> has talked on a few podcasts about <a href="https://overengineered.fm/episodes/static-site-generators-personal-websites-w-aaron-francis">building a static site generator with Laravel and SQLite</a>. The details intrigue me a lot and I'm very excited to see what he'll build. It sounds a lot like my use-case.</p>

<p>Here's a great article that explains the strengths (and some weaknesses) of <a href="https://onfold.sh/blog/is-it-time-to-ditch-mysql-and-postgresql-for-sqlite">SQLite compared to "traditional" databases like MySQL and PostgreSQL</a>.</p>

<p>I've already built a small/experimental/throwaway(?) project on SQLite in 2023 and I really like it. In 2024 I would like to start working on a new idea, and it will absolutely be on SQLite.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/negativity</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/negativity" />
    <title>Negativity</title>
    <published>2024-01-19T00:00:00+00:00</published>
    <updated>2024-01-19T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Have you ever started typing a reply to someone&#039;s post on social media just to stop and delete it because you realized it sounds negative?

I&#039;ve been struggling with this concept for a long time. I try to be positive online, whether I post my own......</summary>
    <content type="html"><![CDATA[
        <p>Have you ever started typing a reply to someone's post on social media just to stop and delete it because you realized it sounds negative?</p>

<p>I've been struggling with this concept for a long time. I try to be positive online, whether I post my own thoughts, or reply to someone else. However, occasionally criticism might be warranted, yet I hesitate to reply in any way that might be construed as negative. Am I wrong here?</p>

<p>Three recent scenarios come to mind.</p>

<p><strong>Popular framework</strong> about to receive a major version advertises a new feature that I personally think might be a regression in relation to onboarding new users, and even for seasoned users. I've been tempted to say something about why I think the headliner feature isn't that great but I realize I would be buried by the supporters of said framework (of which I am one!). To be clear, I am supremely grateful that this framework exists, yet even the best things can (and should) be criticized occasionally.</p>

<p><strong>Another popular framework</strong> also about to receive a major version introduces a new API that doesn't seem that great to me, although it is lauded by the expert users of the framework. Once again, I hesitate to express my concerns. But perhaps I am wise to keep my mouth shut - for one thing, I'm not an expert at it (just a very happy user); for another, I might find the final incarnation very pleasant to work with (in which case any misgivings would have been unfounded). I swallow my criticism.</p>

<p><strong>A popular developer</strong> who maintains a very popular framework changed their avatar and asked what people thought. Everyone complimented them. To me, the new avatar makes them completely invisible among a myriad others, chiefly because there's very little contrast between the person's face and the background. At a casual glance, the person blends into the background. The old one had a contrasting background which made it instantly recognizable, at least to my eyes. I started to reply that I'm not digging it, but I felt like a minnow swimming against a roaring flood, so I deleted my post. Don't get me wrong - the photo of the developer is great in both versions, it's just that the new avatar looks very anonymous.</p>

<p>There you go. Sometimes you have thoughts and criticism that go contrary to popular opinion. Should you voice those concerns in a public forum or keep them to yourself? I guess I chose the third option: write about them in an obfuscated way on my own blog.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/delete-or-refresh-blog</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/delete-or-refresh-blog" />
    <title>Delete the blog or refresh it?</title>
    <published>2024-01-12T00:00:00+00:00</published>
    <updated>2024-01-12T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">At the end of 2023 I found myself burnt out on side projects and coding as a hobby. One particularly bad day I decided that I would delete this blog and website in 2024. I was tired of the endless blogging procrastination, and that the underlying engine......</summary>
    <content type="html"><![CDATA[
        <p>At the end of 2023 I found myself burnt out on side projects and coding as a hobby. One particularly bad day I decided that I would <strong>delete this blog</strong> and website in 2024. I was tired of the endless blogging procrastination, and that the underlying engine had been falling behind on maintenance for a long time.</p>

<p>I've been operating this blog since 2019 but I wish I had started one much sooner in my career. Nevertheless, it's 4+ years old now and I've managed to post several times a year on various developer-adjacent topics, though infrequently.</p>

<p>2023 has been the worst year for growing my audience, for several reasons ‚Äì</p>

<p><strong>Twitter's death</strong> brought a lack of desire and motivation to post anything constructive. It meant no more tweeting carefully-crafted tips or high-quality engagements. As a side-effect, there's less incentive to write blog posts as a way to grow an audience (though I still write when I feel like it). Why would Twitter be the catalyst for my blogging? Simply because it used to be an amazing conduit to audience-building before the unfortunate change of ownership.</p>

<p><strong>Moving to Mastodon</strong> was cool - I think everyone should embrace it at this point - but it came with its own downsides. First, the community is a lot smaller and less focused on dev topics. I use social media strictly for the developer community (with a focus on Laravel, PHP, Svelte, JS-adjacent). Second, I barely receive any reactions to my posts (and yes, I still cross-post on Xitter sometimes). Third, I follow a lot of devs but people on Mastodon seem to be less filtered so they post a variety of things that have nothing to do with software development. This creates a lot of noise that is hard to filter out. End result is that I don't have much desire to post or interact there either.</p>

<p><strong>Joining BlueSky</strong> took a while but that place feels like an empty tomb. I can almost hear the wind blowing through the empty hallways when I open the app. At least the devs I follow are pretty focused.</p>

<p>I felt <strong>burnt-out on side projects</strong>. Having a whole bunch of WIP projects can get to you. At least I managed to <a href="/blog/seismic-desktop-taskbar-app-usgs-earthquake-tracking/">fully release a 1.0 product</a> in 2023, but for the most part I'm continuously iterating on multiple projects with no end in sight.</p>

<p><strong>Writing blog articles can be a full-time job</strong>. I get article ideas quite frequently, but there's a long way from idea to a finished blog post. Depending on complexity (are there code snippets? - make sure the code is formatted properly and it works! pictures? - process, crop, resize, add annotations, make thumbnails, etc!) it can take many hours to publish a complete piece. Hours that I would rather use on a side project.</p>

<p><strong>Losing analytics</strong>. In 2023 Google Analytics switched to a new version, which made my existing setup redundant. Good riddance. On the other hand I don't have any intelligence on whether people visit this blog or what articles are popular. It makes me feel like I am talking to the void. In 2024 I hope to add a more basic form of analytics with better privacy.</p>

<p><strong>No comments</strong>. One of the best ways to track engagement and feel motivated is to have a commenting system. This blog hasn't had one, with the exception of Mastodon webmentions which apparently have privacy issues in the form of a lack of consent (if someone replies to your Mastodon thread, the reply appears automatically on your blog without their consent). In 2024 I hope to finally implement GitHub comments with <a href="https://github.com/utterance/utterances">utterances</a> but I've been saying that for a long time so who knows if I'll ever get to it.</p>

<p><strong>Blog engine became outdated</strong>. This blog is built on <a href="https://jigsaw.tighten.com/">Jigsaw</a>, a static site generator based on Laravel. I neglected to update it for a very long time and it became increasingly harder to implement new features or even deploy it properly due to failing builds and what-not.</p>

<h2>Blog refresh it is</h2>

<p>I remembered the <strong>original mission</strong> of this blog - to keep track of interesting dev topics, to keep a record of various techniques, and to share solutions to vexing problems I solved.</p>

<p>After the new year I got over some of the angst and started looking at this problem with new eyes. I decided that, instead of purging all the work that went into it, I could turn it into a fun side project by upgrading the blog engine and refreshing the design.</p>

<p>As you're reading this, I've already accomplished the first part. The blog is now running on <strong>Jigsaw 1.3.45</strong>. Yet this is not the latest version of Jigsaw (1.7.1). Why? Because it's deployed on Netlify which supports a maximum build version of Ubuntu 20.04, which in turn is limited to PHP 8.1. Jigsaw 1.3.45 is the highest version that runs on PHP 8.1, with higher versions requiring 8.2 (but those don't run on Ubuntu 20.04).</p>

<p><strong>At this point a retraction is in order</strong>. 3 months later I realized that I could upgrade to Jigsaw 1.7.1 and PHP 8.2 after all. It wasn't Netlify's fault at all, but my own for completely missing out that the <code>PHP_VERSION</code> can be set in <code>netlify.toml</code>. Simply changing it from 8.1 to 8.2 allowed the latest Jigsaw to build and deploy successfully. A doh moment if there ever was one ü§¶‚Äç‚ôÇÔ∏è.</p>

<p>The latest Jigsaw version is a lot better than what I was running before, chiefly for three reasons ‚Äì</p>

<p>First, it uses Tailwind 3.x. This will make styling more flexible and convenient. Second, the front-end build process is streamlined and easier to use. Third, it uses <a href="https://commonmark.thephpleague.com/">league/commonmark</a> for markdown parsing, which is a lot more powerful than the Jigsaw parser.</p>

<p>Nothing has changed at this point in the site design except for the fact that the updated Tailwind colors are now either more saturated, or slightly darker than before. I'm fine with this. The other thing is that the <a href="https://www.fusejs.io/">library</a> behind the search is updated and it feels to me that it returns more relevant results.</p>

<h2>Planning a fresh coat of paint</h2>

<ul>
<li><strong>typography</strong> - I'm tired of the current font (Lato), as well as the 20px pixel size. I want a different font that is easier to read, as well as 16px for the main body. I have a few font candidates in mind.</li>
<li><strong>headings</strong> - I want to continue using a different font for headings, but I'm still searching for a suitable one. I also want to make headings smaller and perhaps a different color.</li>
<li><strong>color theme</strong> - currently I'm using Tailwind's teal palette for the main theme. It's been great, but it's starting to feel a bit sterile. I'd like something more cheerful.</li>
<li><strong>anchors</strong> - different styling which might include color, font weight, background, underline, etc.</li>
<li><strong>inline code snippets</strong> - another bit of styling that I'm tired of. I don't have any ideas yet but will try different things.</li>
<li><strong>tags</strong> - similar to anchors, I want something new.</li>
<li><strong>tighter main article column</strong> - in the desktop view I feel like the main column is too wide. With smaller text it will be necessary to make it narrower.</li>
<li><strong>landing page</strong> - this currently acts as a pseudo-portfolio but I would like to make it an entry-point to the blog itself. The portfolio and resume stuff can move to its own section.</li>
<li><strong>better code highlighting</strong> - I would very much like to use <a href="https://torchlight.dev/">Torchlight</a> for code highlighting but Jigsaw uses highlight.js and I'm not sure how difficult it would be to convert. One downside of Torchlight is that it's a service, which means there's no guarantee it will be around forever.</li>
</ul>

<p>I will make no secret of the fact that I am getting inspiration from a lot of different developer blogs. I've been bookmarking awesome blog designs for years and now's a good time to borrow some of those great ideas.</p>

<p>There's a lot more that I would like to achieve, but I'll take it a step at a time. Since I don't have a clear vision for the end-result, I'll go by feel and experiment until I land on something that I like.</p>

<p>Stay tuned!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/reflecting-on-2023</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/reflecting-on-2023" />
    <title>Reflecting on 2023</title>
    <published>2023-12-31T00:00:00+00:00</published>
    <updated>2023-12-31T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">In 2019, I started the &quot;tradition&quot; of reflecting on the past year, mainly from a developer &amp;amp; geek point of view. I think it&#039;s a useful tool for summarizing how I&#039;ve grown as a developer, and what cool new things I&#039;ve done and accomplished.

I......</summary>
    <content type="html"><![CDATA[
        <p>In 2019, I started the "tradition" of <a href="/blog/reflecting-on-2019/">reflecting on the past year</a>, mainly from a developer &amp; geek point of view. I think it's a useful tool for summarizing how I've grown as a developer, and what cool new things I've done and accomplished.</p>

<p>I continued this in <a href="/blog/reflecting-on-2020/">2020</a>, <a href="/blog/reflecting-on-2021/">2021</a>, <a href="/blog/reflecting-on-2022/">2022</a>, and now, 2023.</p>

<h2>2023 TL;DR</h2>

<p>üîº üíª Laravel
üîº üèÉ Running
üîº üèä‚Äç‚ôÇÔ∏è Swimming
üîº üïπÔ∏è Gaming
üîº üìö Reading</p>

<p>üîΩ üõ†Ô∏è Side projects
üîΩ üö¥‚Äç‚ôÇÔ∏è Cycling</p>

<h2>üôà Personal</h2>

<p>As usual, I won't share any personal stuff here.</p>

<p>Thankfully I've been heathy, barring various minor physical sport-related injuries.</p>

<h2>üöß Work</h2>

<p>In 2023 I changed jobs. I am still full-stack and full-time remote, but in a small SaaS startup this time. It's a great place to be at, and I am happy to be working professionally with Laravel once again.</p>

<h2>üìù This blog</h2>

<p>The blog has now been around for 5 years. As time goes by, the motivation to write diminishes. Or rather, I would like to write more, and sometimes I create article outlines in my head, but when it comes down to actually doing it, I always find better (read "easier") things to do.</p>

<p>In terms of traffic, I decided to check Google Analytics for the first time in years. It turns out that tracking is broken because I haven't implemented GA4 üòÜ - so broken it shall remain.</p>

<p>Since I'm no longer tracking I don't know which of my articles people liked in 2023, but here are a few that I think are pretty decent:</p>

<ul>
<li><a href="https://chasingcode.dev/blog/integrate-mastodon-replies-in-laravel-jigsaw-blog-with-vuejs">How to Integrate Mastodon Replies in a Laravel Jigsaw Blog With VueJS</a> Feb 1</li>
<li><a href="https://chasingcode.dev/blog/csv-import-with-laravel-building-blocks-part-1">CSV import with Laravel building blocks - Part 1</a> - Sep 8</li>
<li><a href="https://chasingcode.dev/blog/csv-import-with-laravel-building-blocks-part-2">CSV import with Laravel building blocks - Part 2</a> - Sep 12</li>
<li><a href="https://chasingcode.dev/blog/how-to-find-owner-of-lost-gopro">How to find the owner of a lost GoPro</a> - Dec 22</li>
</ul>

<h2>üóÇÔ∏è Personal projects and software releases</h2>

<p>In 2023 I worked less on side projects, especially as the year progressed and I became more involved at work.</p>

<p>Here are some of the personal projects I worked on this year:</p>

<ul>
<li><a href="/blog/seismic-desktop-taskbar-app-usgs-earthquake-tracking/">Seismic</a> - a desktop taskbar app (only tested on Mac) for tracking earthquakes. Made with Tauri, Svelte, Tailwind CSS.</li>
<li><a href="/blog/react-hooks-in-svelte/">React Hooks in Svelte</a> - a comparison of React hooks vs the Svelte equivalent. Made with SvelteKit + Skeleton UI.</li>
<li><a href="/blog/aqi-desktop-nativephp-app/">AQI Desktop</a> - a very experimental desktop app for tracking the Air Quality Indicator in your zip code. Made with Native PHP + Tailwind CSS.</li>
<li><a href="https://syenite.vercel.app/">Syenite</a> - a super opinionated static blog engine. Still WIP. I would like to use this engine for a future fitness-oriented blog. I could almost tag it 1.0 but you know how that last 10% takes most of the dev time. Made with SvelteKit, TailwindCSS, and a variety of libraries.</li>
</ul>

<h2>üíæ New dev tech</h2>

<p>I described my <a href="/blog/2023-programming-stack">2023 stack</a> at the beginning of the year and nothing has changed, except for the fact that I decided to make my own blog engine.</p>

<p>The only new thing that intrigues me this year is <a href="https://htmx.org/">HTMX</a>. I wish it existed back in the days of jQuery. Today, however, it's a bit redundant with a Laravel back-end, since Livewire is the perfect equivalent.</p>

<h2>‚öôÔ∏è New gadgets</h2>

<p>The only new, "big-budget" gadgets I bought this year were both sports-related. A bike computer - <strong>Garmin Edge 840</strong>, and a watch - <strong>Garmin Forerunner 965</strong>. They are both great devices, but the watch is absolutely amazing. It's a bit of a downgrade from a Fenix in terms of durability, but everything else is leagues ahead, and it has helped me take my fitness to new heights.</p>

<h2>‚õëÔ∏èüèÉ‚Äç‚ôÇÔ∏è Health and fitness</h2>

<p>Speaking of fitness, 2023 saw my activities shifting towards running, and slightly away from <strong>cycling</strong>. I still ride quite a lot, but running has definitely been the headliner this year.</p>

<p>In 2023 I rode only 5100 miles (8200 km) vs 6400 miles last year.</p>

<p>On the other hand, <strong>running</strong> has become my top fitness activity (at least in terms of enjoyment). It's very ironic since I always dunked on running as being one of the most boring activities in addition to wrecking your knees and joints.</p>

<p>Well, I stuck with it for short distances at first, moving on to longer and longer runs. After a while I really began to enjoy it. I learned a few things that helped me progress: do 80% of your runs at low intensity, run short distances often, and listen to your body for recovery.</p>

<p>A couple of things that contributed to my newfound love for running were the fact that I could listen to a lot of podcasts and music during it (so I didn't get bored), and that it's super convenient to throw on some gear and go for a quick 30-45 minute run every day, at any time. In that respect it's way more convenient than cycling which takes me quite a while of prep before I am ready to go.</p>

<p>As my running fitness increased, so did my distances and paces. My favorite pace at the moment is 9:30 min/mile (5:57 min/km). If you're a seasoned runner this probably doesn't sound like much, but it's a pace that I can run comfortably for miles and miles.</p>

<p>At the same time, I started to enjoy longer distances. My daily 4 mile run became 5 miles and most days I wanted to run more. I ran quite a few half-marathon distances. I thought that sometime in 2024 I would be ready for a <strong>full marathon</strong>. Well, it happened a lot sooner than I had anticipated. One day in early December I decided to go for it and I completed the full distance in 4h 30m. Pretty good for a debutant, especially considering it was a trail run and quite muddy over a long stretch. This was a solo run - not a race.</p>

<p>Also in 2023 I learned how to <strong>swim</strong> properly in terms of technique and endurance, all from watching YouTube videos and applying the theory. So now I'm a much stronger swimmer who can go longer distances without becoming winded.</p>

<p>Health was good otherwise, except for minor sports injuries that recovered quickly.</p>

<h2>üìö Books</h2>

<p>I read more books this years, by applying some discipline in the form of reading one chapter every night before bed. I really enjoyed <strong>The Broken Earth</strong> trilogy by N.K. Jemisin, <strong>Project Hail Mary</strong> by Andy Weir, and an old classic (this time I hope to read the entire series) <strong>Ringworld</strong> by Larry Niven.</p>

<h2>üé¨ Movies and TV</h2>

<p>I don't watch TV in the traditional sense, but I do stream a fair amount of movies and TV shows.</p>

<p>Some of the movies I liked in 2023 are:  <strong>Glass Onion A Knives Out Mystery</strong> (2022), <strong>The Menu</strong> (2022), <strong>The Whale</strong> (2022), <strong>Tetris</strong> (2023), <strong>Dungeons Dragons Honor Among Thieves</strong> (2023), <strong>Creed III</strong> (2023), <strong>The Super Mario Bros. Movie</strong> (2023), <strong>John Wick Chapter 4</strong> (2023), <strong>Polite Society</strong> (2023), <strong>BlackBerry</strong> (2023), <strong>Nimona</strong> (2023), <strong>Asteroid City</strong> (2023), <strong>Big Bug</strong> (2022), <strong>Spider-Man Across The Spider-Verse</strong> (2023), <strong>Bottoms</strong> (2023), <strong>Totally Killer</strong> (2023), <strong>The Equalizer 3</strong> (2023), <strong>Jules</strong> (2023), <strong>Oppenheimer</strong> (2023), <strong>Killers Of The Flower Moon</strong> (2023), <strong>The Holdovers</strong> (2023), <strong>Finestkind</strong> (2023).</p>

<p>I also watched individual seasons from various TV shows. Excellent ones include: <strong>Wednesday S1</strong> (2022), <strong>The Mandalorian S3</strong> (2023), <strong>The Sandman S1</strong> (2022), <strong>One Piece S1</strong> (2023), <strong>Foundation S1,S2</strong> (2021-2023), <strong>The Fall of the House of Usher S1</strong> (2023).</p>

<h2>üïπÔ∏è Gaming</h2>

<p>2023 was a gaming resurgence. Some of these games aren't new, I just happened to buy and play them this year. I have a huge backlog of games, so I can wait very patiently to buy them during sales.</p>

<p>On PC/Mac I really enjoyed: <strong>Last Epoch</strong>, <strong>Halls of Torment</strong>, <strong>Satisfactory</strong>, <strong>Death Must Die</strong>, <strong>Hardspace: Shipbreaker</strong>, <strong>ŒîV: Rings of Saturn</strong>.</p>

<p>On Switch I had fun with: <strong>Cult of the Lamb</strong>, <strong>Loop Hero</strong>, <strong>Hades</strong>.</p>

<h2>Twitter and social media</h2>

<p>In 2023, <a href="https://twitter.com/brbcoding">Twitter</a> was dead to me. I stopped posting anything of value. I'm also on <a href="https://indieweb.social/@brbcoding">Mastodon</a>, but to be honest the death of Twitter has completely demotivated me from participating in any kind of social media. I'm also on BlueSky but that place seems dead.</p>

<p>I finished the year with 594 followers on Twitter and 106 followers on Mastodon (double than the end of 2022).</p>

<h2>Things to look forward to in 2024</h2>

<p><strong>Development stuff</strong></p>

<p>Last year I said I was excited about new versions of various tech stacks. I've reached a tipping point and I just wish things would slow down for a change. I'm tired of the never-ending release cycle. My wish is for everyone to take a year off from new releases (who am I kidding tho?).</p>

<p><strong>Technology</strong></p>

<p>This year ChatGPT has been omnipresent, and we've been building heavily on it at work. Going forward, I would also like this space to slow down a little because the implications are disquieting. Again - who am I kidding - change will happen with or without my approval.</p>

<p><strong>Projects</strong></p>

<p>I don't have any specific personal projects in mind. At the very least I'd like to finish or continue polishing the ones that are still WIP after many years.</p>

<p><strong>Games</strong></p>

<p>I have a feeling I'll be gaming more in 2024. I'm burnt out on work and side projects and I need some long-term R&amp;R. I already have a few queued up on the PC: <strong>Witchfire</strong>, <strong>Outer Worlds</strong>, <strong>Noita</strong>, <strong>We Who Are About To Die</strong>, <strong>Astral Ascent</strong>, and on the Switch I might buy <strong>The Legend of Zelda: Tears of the Kingdom</strong>.</p>

<p><strong>Health and fitness</strong></p>

<p>Being healthy is good and I'd like to continue that. Likewise with being in shape. In 2024 I hope to expand my running volume (cumulative distance) and keep it on an even keel with cycling and swimming.</p>

<p>That about wraps it up for now. Once again, thank you for your readership dear friends, and lets make 2024 the best year of the 20s yet!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/how-to-find-owner-of-lost-gopro</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/how-to-find-owner-of-lost-gopro" />
    <title>How to find the owner of a lost GoPro</title>
    <published>2023-12-22T00:00:00+00:00</published>
    <updated>2023-12-22T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I always enjoyed hearing how the owners of lost cameras were re-united with their property and media. Now it became my turn to find the owner of a lost GoPro. Here&#039;s how I did it.



All the names the locations are redacted for privacy.

I&#039;ve been......</summary>
    <content type="html"><![CDATA[
        <p>I always enjoyed hearing how the owners of lost cameras were re-united with their property and media. Now it became my turn to find the owner of a lost GoPro. Here's how I did it.</p>

<h2>Background</h2>

<p><em>All the names the locations are redacted for privacy.</em></p>

<p>I've been visiting a place in the USA that is popular with tourists. A local friend mentioned that they found a lost GoPro a few months previously, but they had no idea how to use it, so they asked me take a look at it.</p>

<p>The camera in question is a GoPro 11 Black. For perspective, I too have a GoPro, but it's the 1st generation. The newer ones are really cool with their touchscreen and other modern tech.</p>

<h2>Step 1 - poke around the menus</h2>

<p>First thing I did was to power on the GoPro and have a look at the menus. I was completely unfamiliar with the UI and this programmer doesn't start by RTFM, yet I felt right at home.</p>

<p>I wanted to find the serial number to see if it had been reported lost/stolen. So I went to <code>Preferences &gt; About &gt; Camera Info</code> and under <code>Camera Name</code> I read <code>Smith HERO11</code>.</p>

<p>I thought, "huh, <code>Smith</code> sure sounds like a last name". Apparently the owner labeled it when they set it up. That's a clue!</p>

<h2>Step 2 - take a look at the camera recordings</h2>

<p>I plugged the MicroSD card into my computer and browsed the photos and videos. Standard stuff shot by an American man and his family on vacation in the same place I had been.</p>

<p>Now I had a face - this must be Mr Smith. But a name and a face don't make it much easier to locate the needle in the haystack.</p>

<h2>Step 3 - look for identifying markers</h2>

<p>After the high-level skimming of the photos (I ignored the videos because who has time for that), I decided to take a closer look at the details, in particular clothing accessories and other personal items that might provide some identifying data.</p>

<p>Sure enough, in one photo Mr Smith was wearing a hat with a company logo "ACME Corp". This was not a company most people had heard of, so I thought there might be a good chance Mr Smith worked there. Clue number 2!</p>

<h2>Step 4 - search LinkedIn</h2>

<p>Armed with a company name and a last name, I searched LinkedIn for "ACME Corp". Bingo!</p>

<p>I went to the (thankfully short) list of employees and the first person I see is a Mr Bob Smith. He bore a resemblance to the man in the photos, yet looked a lot younger. Reading his bio, I realized he was too young to be the same person.</p>

<p>Slightly dejected, I went back to the employee list and continued scrolling. Not much farther down, I see Mr Bill Smith who looked like a 90% match. I opened up his profile and right away I knew he was the camera owner. He even had a clearer photo from an event he had attended, and there was no doubt it was the same person.</p>

<p>Owner located!</p>

<p>So what about the first Mr Smith - Bob? I believe he might be Bill's younger brother based on resemblance, and it so happens that they both work at the same company.</p>

<h2>Step 5 - contacting the owner</h2>

<p>This, in theory, is the easy part. I messaged Mr Smith on LinkedIn that I found his camera.</p>

<p>Unfortunately, there's a snag. Mr Smith did not have any LinkedIn activity in the past year. So it's unlikely he will respond (soon). He also has a profile on Twitter, but it's locked down with little activity.</p>

<h2>If all else fails</h2>

<p>I will try other avenues for contacting Mr Smith. It those fail, then I guess finders keepers. My friend will get to hang on to, and use the GoPro. I will make a backup of Mr Smith's media and keep it in case I find a way to reunite him with it.</p>

<p>If you read this by any chance, Mr Smith &amp; associates, please check your LinkedIn messages, or message me on <a href="https://twitter.com/brbcoding/">Twitter</a> or <a href="https://indieweb.social/@brbcoding">Mastodon</a> . There's also a <a href="https://chasingcode.dev/contact/">Contact form</a> that I barely check. The same applies to anyone who knows someone who's lost a GoPro 11 Black in recent months.</p>

<p>P.S. I'll make sure to ask some relevant questions to validate the actual owner - partly why I didn't give any personal details.</p>

<p>I'll update this if I manage to contact the owner.</p>

<h2>Epilogue</h2>

<p>I'm happy to report that I was finally able to reunite the owner with the GoPro.</p>

<p>To follow up on <strong>step 5</strong>, after waiting a while for Mr Smith to respond on LinkedIn, I noticed that the younger Mr Smith (brother?) had recent activity, so I messaged him with a summary of why I was trying to contact the older Smith.</p>

<p>Sure enough, Mr Smith (the owner) signed in shortly, confirmed ownership, and gave me a home address.</p>

<p>I mailed the GoPro and he received it without issues. I'm very happy that I was able to help.</p>

<p>I'll leave you with a parting tip. During this investigation, various people online were recommending putting a <code>contact.txt</code> file with your info in the memory card of a camera or other device that might get lost. Very common-sense advice that hadn't occurred to me until now.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/aqi-desktop-nativephp-app</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/aqi-desktop-nativephp-app" />
    <title>AQI Desktop - a NativePHP app</title>
    <published>2023-10-05T00:00:00+00:00</published>
    <updated>2023-10-05T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Having worked with Electron and Tauri to build desktop apps, I always thought it would be super cool if someone figured a way to build desktop apps with PHP. Well, that dream came true - in a way - when NativePHP was announced at Laracon US 2023.

Along......</summary>
    <content type="html"><![CDATA[
        <p>Having worked with Electron and Tauri to build desktop apps, I always thought it would be super cool if someone figured a way to build desktop apps with PHP. Well, that dream came true - in a way - when <a href="https://nativephp.com/">NativePHP</a> was announced at Laracon US 2023.</p>

<p>Along with that, <a href="https://github.com/laravel/folio">Laravel Folio</a> and <a href="https://livewire.laravel.com/docs/volt">Laravel Volt</a> were also released. I won't rehash what they are, just follow the links if you don't know already.</p>

<p>Suffice to say, a lot of people started experimenting with these three right away. I was one of them. You can find other NativePHP experiments at <a href="https://github.com/breadthe/awesome-nativephp">Awesome NativePHP</a>.</p>

<p><strong>NB</strong>: I made this a while back, but I'm just now getting around to writing about it.</p>

<h2>AQI Desktop</h2>

<p>During that time, the air quality in my area of the United States got really bad from the wildfires in Canada. What better way to experiment with NativePHP (and Folio, and Volt) than to build a simple desktop taskbar app that would show me the AQI (Air Quality Index) for my zipcode, at a glance?</p>

<p>So was born AQI Desktop. Find the source code on <a href="https://github.com/breadthe/aqi-desktop">GitHub</a>.</p>

<h2>v1.0 wham bam done!</h2>

<p>I wanted to limit the scope of this mini project in order to release v1 quickly. I am notorious for dragging on a release version until it reaches an unspecified amount of polish.</p>

<p>I used the <a href="https://docs.airnowapi.org/">AirNow API</a> to get the AQI data. It requires registering at the <a href="https://docs.airnowapi.org/login?index=">AirNow portal</a> for an API key.</p>

<p>The main requirements for v1 were:</p>

<ul>
<li>Taskbar app - NativePHP makes this very easy.</li>
<li>Enter a zipcode to display the AQI for that area.</li>
<li>Refresh the AQI every hour.</li>
<li>Keep a history of past AQI values.</li>
</ul>

<p>The <strong>History</strong> tab.</p>

<p><img src="https://user-images.githubusercontent.com/17433578/258668018-4195a45c-97ab-43c9-8116-f2523a26a36c.png" alt="AQI Desktop history" /></p>

<p>I added some visual tweaks to make it look nice and called it a day.</p>

<p>It's not perfect - I could continue hacking on this, but I moved on. It's good enough as a v1, for what it is.</p>

<h2>NativePHP - aye or nay?</h2>

<p>I think that building desktop apps with PHP is absolutely sick! The cool thing is that it's framework-agnostic, so you can install NativePHP in any PHP project, and it will transform it into a desktop app.</p>

<p>Currently, though, it is not even half-baked. The developers have taken a break from it, and I don't blame them. It's not easy to build something like this. The project hasn't been updated since Laracon, and there are a lot of issues and pull requests that have been sitting there for months.</p>

<p>I wouldn't recommend it for anything serious, but it's a fun experiment, and it can definitely be used to make all kinds of small utilities for personal use, even in its current state.</p>

<p>I am really happy NativePHP exists and I do hope development will continue, because I think it has a lot of potential, and a lot of PHP developers would prefer using it over Electron or Tauri.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/csv-import-with-laravel-building-blocks-part-2</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/csv-import-with-laravel-building-blocks-part-2" />
    <title>CSV import with Laravel building blocks - Part 2</title>
    <published>2023-09-12T00:00:00+00:00</published>
    <updated>2023-09-12T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">In Part 1 I described the command I built with Laravel Prompts to import a CSV file into a SQLite database.

Now, I&#039;ll dive deeper into how I used spatie/laravel-data for the &lt;code&gt;ItemData&lt;/code&gt; DTO, plus some custom data casts for the CSV columns.......</summary>
    <content type="html"><![CDATA[
        <p>In <a href="/blog/csv-import-with-laravel-building-blocks-part-1/">Part 1</a> I described the command I built with Laravel Prompts to import a CSV file into a SQLite database.</p>

<p>Now, I'll dive deeper into how I used <a href="https://spatie.be/docs/laravel-data/v3/introduction">spatie/laravel-data</a> for the <code>ItemData</code> DTO, plus some custom data casts for the CSV columns.</p>

<h2>The Data Transfer Object</h2>

<p>A DTO is a simple class that holds data. It's a great way to encapsulate data and pass it around the application.</p>

<p>Imagine receiving a CSV with inconsistent column data. Some columns could be empty, or contain data in a different format than my database likes. The <code>spatie/laravel-data</code> package helps with transforming and validating the data into a consistent format that I can then dump into the database.</p>

<p>For this application I needed a single DTO class which I created in <code>app/DataObjects/ItemData.php</code></p>

<p>These are the contents of the class:</p>

<pre><code class="language-php">namespace App\DataObjects;

use App\DataCasts\CommaSeparatedStringToArrayCast;
use App\DataCasts\DollarStringToIntCast;
use App\DataCasts\DateStringToCarbonImmutableCast;
use App\DataCasts\StringToNullCast;
use Carbon\CarbonImmutable;
use Spatie\LaravelData\Attributes\WithCast;
use Spatie\LaravelData\Data;

class ItemData extends Data
{
    public function __construct(
        #[WithCast(DateStringToCarbonImmutableCast::class, 'm/d/Y')]
        public CarbonImmutable|null $received_on,
        #[WithCast(DateStringToCarbonImmutableCast::class, 'm/d/Y')]
        public CarbonImmutable|null $ordered_on,
        #[WithCast(StringToNullCast::class)]
        public string|null $brand,
        public string $model,
        #[WithCast(DollarStringToIntCast::class)]
        public int $price,
        public string $with_tax,
        #[WithCast(StringToNullCast::class)]
        public string|null $store,
        #[WithCast(CommaSeparatedStringToArrayCast::class)]
        public array $tags,
        public string $notes,
    ) {
    }
}
</code></pre>

<p>In <a href="/blog/csv-import-with-laravel-building-blocks-part-1/">part 1</a> I was mapping each row of the CSV to a DTO like this (where <code>$rowProperties</code> is an array of column values):</p>

<pre><code class="language-php">$itemData = ItemData::from($rowProperties);
</code></pre>

<p>The cool thing about this is that certain columns that I didn't want to include (like <code>days</code>, <code>years</code>, <code>months</code>, <code>age</code>) are automatically ignored, because they are not defined in the DTO.</p>

<h2>Data casts</h2>

<p>The <code>spatie/laravel-data</code> package uses PHP attribute notation to apply custom casts to data properties. I'm not casting every column, just the ones that need to be transformed into a specific format.</p>

<p>Here's what each of my casts looks like. All casts are under <code>namespace App\DataCasts;</code>, and all import the <code>Spatie\LaravelData\Casts\Cast</code> interface, as well as the <code>Spatie\LaravelData\Support\DataProperty</code> class.</p>

<p><strong>DateStringToCarbonImmutableCast</strong></p>

<p>Transforms a "m/d/Y" string to a CarbonImmutable object, or null if empty.</p>

<pre><code class="language-php">use Carbon\CarbonImmutable;

class DateStringToCarbonImmutableCast implements Cast
{
    private string $timezone = 'UTC'; // 'America/Chicago'

    public function __construct(
        protected ?string $format = null,
    ) {
    }

    public function cast(DataProperty $property, mixed $value, array $context): ?CarbonImmutable
    {
        if (! $value) return null;

        return CarbonImmutable::createFromFormat($this-&gt;format, $value, $this-&gt;timezone)-&gt;startOfDay();
    }
}
</code></pre>

<p><strong>StringToNullCast</strong></p>

<p>Casts empty strings to null (because I prefer a NULL in my DB column rather than an empty string).</p>

<pre><code class="language-php">class StringToNullCast implements Cast
{
    public function cast(DataProperty $property, mixed $value, array $context): string|null
    {
        return $value === '' ? null : $value;
    }
}
</code></pre>

<p><strong>DollarStringToIntCast</strong></p>

<p>Transforms a dollar string to cents as integer.</p>

<p>Example: <code>"$1,600.72"</code> becomes <code>160072</code>.</p>

<pre><code class="language-php">class DollarStringToIntCast implements Cast
{
    public function cast(DataProperty $property, mixed $value, array $context): int
    {
        return (int)((float)preg_replace('/[$,]/', '', $value) * 100);
    }
}
</code></pre>

<p><strong>CommaSeparatedStringToArrayCast</strong></p>

<p>Transforms a string of comma separated tags into an array of tags.</p>

<p>Example: <code>"bike, tool"</code> becomes <code>['bike', 'tool']</code>.</p>

<pre><code class="language-php">class CommaSeparatedStringToArrayCast implements Cast
{
    public function cast(DataProperty $property, mixed $value, array $context): array
    {
        return str($value)
            -&gt;explode(',')
            -&gt;map(fn($tag) =&gt; str($tag)-&gt;trim()-&gt;toString())
            -&gt;filter()
            -&gt;toArray();
    }
}
</code></pre>

<p>Once each CSV row has been transformed into a DTO, I can then save it to the database. The <code>saveItem</code> function won't have to worry about any of the data transformations, it only needs to save the object to the corresponding tables.</p>

<pre><code class="language-php">$item = $this-&gt;saveItem($itemData);
</code></pre>

<p>Now the data is in the database, and I can use it to build the dashboard and other features. This, however, is outside the scope of this series.</p>

<h2>Conclusion</h2>

<p>I've only scratched the surface of what's possible with <code>spatie/laravel-data</code>. DTOs may not make sense right away, but once they do you might find yourself reaching for the pattern more often than not.</p>

<p>Going back to the concept of building blocks, with Laravel you don't have to build everything from scratch. Not only does it come with its own robust (and ever-growing) set of building blocks, but the surrounding ecosystem is so vast and mature that you can find a package for almost anything. Quite often it's just a matter of gluing the right packages together with a sprinkle of custom code, and voil√†, you have a functional MVP!</p>

<h2>And one more thing...</h2>

<p>Here's a video from Laracon 2023 of Mr Spatie himself (Freek Van der Herten), showing off some advanced techniques using the <code>spatie/laravel-data</code> package.</p>

<iframe width="656" height="369" src="https://www.youtube.com/embed/CrO_7Df1cBc" title="Freek Van Der Herten &quot;Enjoying Laravel Data&quot; - Laracon US 2023 Nashville" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/csv-import-with-laravel-building-blocks-part-1</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/csv-import-with-laravel-building-blocks-part-1" />
    <title>CSV import with Laravel building blocks - Part 1</title>
    <published>2023-09-08T00:00:00+00:00</published>
    <updated>2023-09-08T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I&#039;ve been hacking on a side project in Laravel that may never see the light of day, but I think it&#039;s worth talking about the building blocks I used for it. The core functionality revolves around importing data from a CSV (or XLS) file, transforming it......</summary>
    <content type="html"><![CDATA[
        <p>I've been hacking on a side project in Laravel that may never see the light of day, but I think it's worth talking about the building blocks I used for it. The core functionality revolves around importing data from a CSV (or XLS) file, transforming it into a <a href="https://en.wikipedia.org/wiki/Data_transfer_object">DTO</a> (Data Transfer Object), and then saving it to a SQLite database.</p>

<p>For context, I've been tracking bigger personal expenses in a Google Sheet for many years. By "bigger expenses" I mean material things that tend to last for a while. For example a bike, a laptop, a phone, tools, a nice pair of shoes, etc.</p>

<p>I wanted more insight into my spending habits: tracking expenses across different categories (or tags as I think of them), brands, and time spans (yearly, monthly), plotting expense charts, and calculating the lifetime cost of a particular item.</p>

<p>These are all things that an Excel expert might accomplish easily, but my hammer of choice is Laravel, so that's what I used.</p>

<p>The good news is that it doesn't take a lot of work to glue these blocks together to get a command-line CSV import working. The hard part is building the UI for all the complex visualizations I want to do. This series, however, will focus strictly on the import process.</p>

<p>In Part 1 I want to describe the command I built with Laravel Prompts to import the CSV file.</p>

<p><a href="/blog/csv-import-with-laravel-building-blocks-part-2/">Part 2 - The DTO</a></p>

<h2>The building blocks</h2>

<ul>
<li>Laravel 10</li>
<li>SQLite</li>
<li><a href="https://laravel.com/docs/10.x/prompts">Laravel Prompts</a></li>
<li><a href="https://spatie.be/docs/laravel-data/v3/introduction">spatie/laravel-data</a></li>
<li><a href="https://github.com/spatie/simple-excel">spatie/simple-excel</a></li>
<li><a href="https://livewire.laravel.com/">Livewire 3</a> for the UI</li>
<li><a href="https://laravel.com/docs/10.x/starter-kits#laravel-breeze">Laravel Breeze</a> for authentication</li>
<li>Tailwind CSS</li>
</ul>

<h2>The CSV file</h2>

<p>The CSV file I'm importing looks like this:</p>

<pre><code>received_on,ordered_on,brand,model,days,years,months,days,age,price,with_tax,store,tags,notes
12/6/2020,,Keychron,K1 v4 87-key RGB Red switches wireless mechanical keyboard,989,2,8,18,2 years 8 months 18 days,$95.61,including tax,Amazon,,
1/11/2021,,Microsoft,Xbox Wireless Controller + USB-C cable,953,2,7,12,2 years 7 months 12 days,$53.11,including tax,Xbox store,computer,
3/8/2021,,Leatherman,Squirt PS4 Multi-Tool,897,2,5,16,2 years 5 months 16 days,$45.75,including tax,REI,"bike, tool",This is a note
</code></pre>

<p>Note that <code>days</code> , <code>years</code> , <code>months</code> , <code>age</code> are all calculated by a formula in the Google Sheet. I don't need them in my database, so I'm going to ignore them.</p>

<p><em>But why don't you just connect directly to the Google Sheet?</em> you might ask. Well, mostly because I don't want to go through the hassle of setting up OAuth and all that. I just want to export the Google Sheet as a CSV file and import it. I don't need this data to be live, since I don't update the original Sheet very often.</p>

<h2>The import command</h2>

<p>I decided to dump the CSV in <code>storage/app</code> and then my import command can find it there.</p>

<p>Run the command with <code>php artisan stuff:import</code>.</p>

<p><a href="https://laravel.com/docs/10.x/prompts">Laravel Prompts</a> was announced at this year's Laracon and I just had to use it. It gives the command line superpowers through enhanced interactivity.</p>

<p>Here's what the command looks like (imports omitted for brevity):</p>

<pre><code class="language-php">class ImportCommand extends Command
{
    protected $signature = 'stuff:import';

    protected $description = 'Import from CSV or XLS';

    private ?int $userId = null; // User ID to import to
    private ?string $fileName = null; // File name (CSV/XLS) to import from

    public function handle(): int
    {
        $this-&gt;getUserId();

        $this-&gt;getFileName();

        $this-&gt;warn('Importing from "' . Storage::path($this-&gt;fileName) . '"');

        $rows = SimpleExcelReader::create(Storage::path($this-&gt;fileName));

        $bar = $this-&gt;output-&gt;createProgressBar();
        $bar-&gt;start();

        $rows-&gt;each(function (array $rowProperties) use ($bar) {
            try {
                $itemData = ItemData::from($rowProperties);

                $item = $this-&gt;saveItem($itemData);

                $bar-&gt;advance();
            } catch (CannotCreateData $e) {
                $this-&gt;error($e-&gt;getMessage());
                return;
            }
        });

        $bar-&gt;finish();

        DashboardDataService::bustCache($this-&gt;userId);

        return Command::SUCCESS;
    }

    private function getUserId(): void
    {
        //
    }

    private function getFileName(): void
    {
        //
    }

    private function saveItem(ItemData $itemData): Builder|Model
    {
        //
    }
}
</code></pre>

<p>First, I use <code>$this-&gt;getUserId()</code> to prompt for a user's email. I am the only user of this app, but I decided to make it support multiple users with authentication (via Breeze) from the start, just in case.</p>

<p>As you type, Prompts searches the database for a matching email and autocompletes it. It then returns the user's ID. It keeps prompting until a valid email is entered, or you hit "Ctrl+C" to exit.</p>

<p><img src="/assets/img/2023-09-08-import-command-1.png" alt="Using Prompts search to get the user's email" /></p>

<pre><code class="language-php">private function getUserId(): void
{
    do {
        $userId = search(
            label:  'What is the user\'s email?',
            options: fn(string $value) =&gt; strlen($value) &gt; 0
                ? User::where('email', 'like', "%{$value}%")-&gt;orderBy('email')-&gt;pluck('email', 'id')-&gt;all()
                : [],
            scroll: 10
        );

        $this-&gt;userId = (int)$userId;
    } while (User::query()-&gt;where('id', $this-&gt;userId)-&gt;doesntExist());
}
</code></pre>

<p>Once I have a user ID, I use <code>$this-&gt;getFileName()</code> to display a list of CSV/XLS files in the <code>storage/app</code> folder. In this case there's only one.</p>

<p><img src="/assets/img/2023-09-08-import-command-2.png" alt="Using Prompts search to show a list of CSV/XLS files" /></p>

<pre><code class="language-php">private function getFileName(): void
{
    do {
        $this-&gt;fileName = select(
            label:   'Select file to import (&lt;fg=white&gt;CSV/XLS in storage/app&lt;/&gt;)',
            options: array_values(preg_grep('/\.csv|\.xls$/', Storage::files())),
            scroll:  10
        );

        if (!$this-&gt;fileName) {
            $this-&gt;info('bye');
            exit;
        }
    } while (!Storage::exists($this-&gt;fileName));
}
</code></pre>

<p>Next, I use <code>SimpleExcelReader</code> to read the CSV file and return a collection of rows.</p>

<p>I then start a progress bar and iterate over the rows, creating an <code>ItemData</code> DTO from each row, and then saving it to the SQLite database.</p>

<p><img src="/assets/img/2023-09-08-import-command-3.png" alt="Reading the CSV and saving the rows to the database" /></p>

<p>The <code>saveItem()</code> method is a bit messy, but it does exactly what I need it to: it saves the data to the related tables (<code>brands</code>, <code>stores</code>, <code>tags</code>, <code>items</code>), all inside a transaction.</p>

<p>I won't go into the details of the models and their relationships because it's outside the scope of this series, but it should also be fairly self-explanatory.</p>

<pre><code class="language-php">private function saveItem(ItemData $itemData): Builder|Model
{
    DB::beginTransaction();

    $brand = null;
    if ($itemData-&gt;brand) {
        $brand = Brand::query()-&gt;updateOrCreate(
            [
                'user_id' =&gt; $this-&gt;userId,
                'name' =&gt; $itemData-&gt;brand,
            ],
            [
                'name' =&gt; $itemData-&gt;brand,
            ]
        );
    }

    $store = null;
    if ($itemData-&gt;store) {
        $store = Store::query()-&gt;updateOrCreate(
            [
                'user_id' =&gt; $this-&gt;userId,
                'name' =&gt; $itemData-&gt;store,
            ],
            [
                'name' =&gt; $itemData-&gt;store,
            ]
        );
    }

    $item = Item::query()-&gt;updateOrCreate(
        [
            'user_id' =&gt; $this-&gt;userId,
            'received_on' =&gt; $itemData-&gt;received_on,
            'ordered_on' =&gt; $itemData-&gt;ordered_on,
            'brand_id' =&gt; $brand?-&gt;getAttribute('id') ?? null,
            'model' =&gt; $itemData-&gt;model,
        ],
        [
            'price' =&gt; $itemData-&gt;price,
            'with_tax' =&gt; $itemData-&gt;with_tax,
            'store_id' =&gt; $store?-&gt;getAttribute('id') ?? null,
            'notes' =&gt; $itemData-&gt;notes,
        ]
    );

    foreach ($itemData-&gt;tags as $itemTag) {
        $tag = Tag::query()-&gt;updateOrCreate(
            [
                'user_id' =&gt; $this-&gt;userId,
                'name' =&gt; $itemTag,
            ],
            [
                'name' =&gt; $itemTag,
            ]
        );

        try {
            $item-&gt;tags()-&gt;attach($tag);
        } catch (\Exception $e) {
            // ignore exceptions if re-importing the same items
        }
    }

    DB::commit();

    return $item;
}

</code></pre>

<p>You might also notice this statement <code>DashboardDataService::bustCache($this-&gt;userId);</code>. I won't go into the inner workings, just know that all the data displayed on the user's dashboard is cached for performance (keyed by the user id), and the cache needs to be cleared every time new data is imported.</p>

<h2>Conclusion</h2>

<p>If you're a seasoned (Laravel) developer you might be offended at the idea of building all the import logic in the import command itself. I agree that it's not ideal, but I don't care. There are a myriad ways to optimize this, but it's simply not worth it for a quick prototype where the bulk of the functionality lies in the UI.</p>

<p>That's it for Part 1. In Part 2 I'll dive deeper into how I used <code>spatie/laravel-data</code> to create the <code>ItemData</code> DTO as well as custom data casts that I used for some of the CSV columns.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/best-remote-laravel-job-sites-in-2023</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/best-remote-laravel-job-sites-in-2023" />
    <title>Best Remote Laravel Job Sites in 2023</title>
    <published>2023-03-20T00:00:00+00:00</published>
    <updated>2023-03-20T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">In 2023 I changed jobs. For my next position, I was interested in two things: 100% remote work and Laravel. Thankfully, my job search was successful and I found exactly what I was looking for: a small, remote-first company with good culture and very nice......</summary>
    <content type="html"><![CDATA[
        <p>In 2023 I changed jobs. For my next position, I was interested in two things: 100% remote work and Laravel. Thankfully, my job search was successful and I found exactly what I was looking for: a small, remote-first company with good culture and very nice people, that uses Laravel.</p>

<p>If you're looking for work in a specific stack, I recommend narrowing your search to focus on sites that specialize in that stack. Likewise, there are remote-only job sites which should be high on your list, if remote is important for you.</p>

<p>Unfortunately, the "classic" job sites such as Monster, LinkedIn, etc have fallen behind in terms of user experience and actually helping you find what you need. There is one exception where I actually found this position, but I'll get to that in a minute.</p>

<p>Here's a short list of job sites that I found most helpful in my search.</p>

<h2>LaraJobs</h2>

<p><a href="https://larajobs.com/">LaraJobs</a> is the official Laravel job search site and my go-to recommendation if you're set on working in this stack.</p>

<p>The cool thing about LaraJobs is that you're guaranteed to find Laravel jobs instead of noise and chaff, like on other sites.</p>

<p>Unfortunately the site seems a bit unfinished and the user experience is lacking. For example, you can't apply multiple filters at once. I can't search, say, for "TALL stack" + "Full Time" at the same time. Also, there doesn't seem a way to filter by location. Even for remote work, I would like to filter jobs on another continent.</p>

<p>Despite the downsides, LaraJobs is razor-focused on Laravel jobs, and is updated regularly.</p>

<h2>LaraDir</h2>

<p><a href="https://laradir.com/">LaraDir</a> is a Laravel-focused discovery-based job directory. It's different from others on this list in that you create a developer profile and then companies can find you, so it's more company oriented. It sounds like an interesting approach, but I just came across it, so I haven't used it.</p>

<h2>RemoteOK</h2>

<p><a href="https://remoteok.com/">RemoteOK</a> is a job site that focuses strictly on remote work. It's a great place to find remote tech jobs in general, but it's not limited to Laravel. So if the tech stack is not that important for you, RemoteOK is a great place to start.</p>

<p>RemoteOK has a lot more filters than LaraJobs. You can filter by multiple criteria, including salary and location. You can also search by keyword and sort the results by various parameters.</p>

<p>The site is made and operated by <a href="https://twitter.com/levelsio">Pieter Levels</a>, the <a href="https://nomadlist.com/">NomadList</a> guy.</p>

<h2>Indeed</h2>

<p><a href="https://www.indeed.com/">Indeed</a> is a classic job site that has been around for a long time. Surprisingly, it has been updated since the last time I was looking for a job, and it feels fresh, modern and easy to use. You can create alerts with certain keywords, and you will receive emails with matching jobs.</p>

<p>The filtering is very good, and helps you narrow down the results.</p>

<p>This is where I found my current job, and that makes me a happy user.</p>

<h2>A word on LinkedIn</h2>

<p><strong>TL;DR</strong> LinkedIn is only useful for researching companies; don't use it as your primary job search tool.</p>

<p>LinkedIn used to be at the top of my list (next to Indeed) for job searching in the past. However, it has become a mess. The user experience is terrible, and the site is full of spammy content and nagging/clueless recruiters.</p>

<p>The email alerts are pretty awful, despite requesting to receive only the most relevant jobs. I would receive emails with jobs that were not even close to what I was looking for.</p>

<p>I would avoid LinkedIn for job searching, unless you're looking for a specific company.</p>

<p>LinkedIn, however does have one redeeming feature. It's (still) a good place to research a company.</p>

<p>You can make sure the company is legit, check out how many employees it has, and drill down to the individual positions of the people who work there. As a software engineer, I like to see the developers and managers who work there, and try to form a mental picture of the company culture.</p>

<p>Companies also have various links, posts, and information on their LinkedIn page, which can be helpful.</p>

<h2>A word on recruiters</h2>

<p>In general, I avoid recruiters. Most of them like to spam me on LinkedIn, but unfortunately they are only wasting my time with irrelevant positions.</p>

<p>The only recruiters that I will talk to are: 1) those whom I've worked with successfully in the past, and 2) those who have clearly done their research, and are presenting me with a relevant position.</p>

<p>I would recommend turning off the "I'm available for work" flag if you want to avoid dealing with recruiters.</p>

<h2>Types of companies to avoid</h2>

<p>Here comes a very personal, intimate, and wholly biased opinion.</p>

<p>Having either worked for, interviewed with, or had some form of close contact with these types of companies, they are at the bottom of my wishlist (unless they have something very special to offer).</p>

<ul>
<li>Software/client agencies</li>
<li>Marketing agencies</li>
<li>Companies that are not tech-focused</li>
<li>Companies that treat software development as a cost center</li>
</ul>

<p>Obviously, each of us has their own preferences, and it's up to you to decide who you want to work for.</p>

<h2>The Laravel job market is üî•</h2>

<p>My perception is that the Laravel market is not just doing well, but growing at a rapid pace the past few years. Ironically, the massive tech layoffs of 2022/2023 seemed to have had zero impact on the Laravel job market.</p>

<p>If I were to guess why this is the case, I would say that a lot of companies have started to realize how much you can get done in this stack, so Laravel has become a boon for any sort of startup that wants to iterate fast and be quick to the market. Larger companies are not immune to this either, as there are countless internal tools that can be built quickly with Laravel, even when the company hesitates to use it for their main product.</p>

<p>There are plenty of Laravel jobs out there for all experience levels, although this guide is biased towards senior and mid-level developers. I've had the luxury of deliberately filtering out positions that didn't agree with me in one way or another.</p>

<p>Another side effect of working in the Laravel ecosystem is that the community leans heavily towards remote work, thanks to several high-profile companies that have been pushing the concept for years, but also let's not forget the flexibility of the stack and plentiful documentation that facilitates asynchronous work.</p>

<p>I hope these pointers will help you find your next Laravel/remote job in 2023 and beyond!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/react-hooks-in-svelte</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/react-hooks-in-svelte" />
    <title>React Hooks in Svelte</title>
    <published>2023-03-06T00:00:00+00:00</published>
    <updated>2023-03-06T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I came across a repo by Josh Nussbaum comparing React hooks with Svelte through examples, and I thought it would be fun to present it as a static website.

I wanted a reason to use SvelteKit 1.x with Skeleton UI, and this was the perfect opportunity.

So......</summary>
    <content type="html"><![CDATA[
        <p>I came across a repo by <a href="https://twitter.com/joshnuss">Josh Nussbaum</a> comparing <a href="https://github.com/joshnuss/react-hooks-in-svelte">React hooks with Svelte</a> through examples, and I thought it would be fun to present it as a static website.</p>

<p>I wanted a reason to use SvelteKit 1.x with <a href="https://www.skeleton.dev/">Skeleton UI</a>, and this was the perfect opportunity.</p>

<p>So why make something about React? If you haven't picked it up from my ramblings, I've been successfully avoiding React since forever because Svelte is amazing. But life is unpredictable, and this year I got a new job where React is part of their stack. So it makes sense for me to learn React, and what better way to do it than to contrast with how the equivalent thing is done in Svelte?</p>

<p>The <a href="https://react-hooks-in-svelte.vercel.app">live demo</a> is hosted on Vercel. The source code is on <a href="https://github.com/breadthe/react-hooks-in-svelte">GitHub</a>.</p>

<p>Without further ado, here are some new things I used on this project.</p>

<h2>SvelteKit 1.x</h2>

<p>While I've used SvelteKit briefly pre-1.0, this is the first project where I'm using the final 1.x release.</p>

<p>Recently I saw this <a href="https://twitter.com/dimfeld/status/1627840639789588480?t=l2U0lSt-eyUKsDvDn2HaAQ">tweet from Daniel Imfeld</a> about importing raw code from another file or component in SvelteKit and I thought I could use this technique for the React vs Svelte code examples. I'll talk about it farther down.</p>

<h2>Skeleton UI</h2>

<p>I heard about <a href="https://www.skeleton.dev/">Skeleton UI</a> briefly on Twitter, but my interest was really piqued when I listened to the Podrocket episode <a href="https://podrocket.logrocket.com/skeleton">Using Svelte and Tailwind to build reactive interfaces with Chris Simmons</a>. After browsing the docs I was sold.</p>

<p>Skeleton is a UI library built with Svelte and Tailwind CSS. Sort of like Tailwind UI for Svelte, if you will. It's currently in beta, but is about to be released as a stable 1.0 version soon.</p>

<p>Skeleton is a very ambitious project that aims to provide (almost) complete coverage for all manner of styled Svelte components you might need.</p>

<p>In the short time I spent using it, I found it to be very well-thought-out and easy to use. It's great for building UI prototypes fast.</p>

<p>I did run into a couple issues, but at least one of these was resolved, however not yet tagged. It's cool though, as v1.0 is just around the corner.</p>

<p>These are the Skeleton components I used to put together this mini-project:</p>

<ul>
<li><a href="https://www.skeleton.dev/components/app-shell">App Shell</a> - for the site outline</li>
<li><a href="https://www.skeleton.dev/components/app-rail">App Rail</a> - for the left sidebar menu</li>
<li><a href="https://www.skeleton.dev/elements/cards">Cards</a> - to show all the hooks on the homepage</li>
<li><a href="https://www.skeleton.dev/utilities/codeblocks">Code Blocks</a> - to display the code examples</li>
<li><a href="https://www.skeleton.dev/utilities/lightswitches">Lightswitch</a> - to toggle between light and dark mode (currently disabled due to an issue with the beta version of this component)</li>
<li><a href="https://www.skeleton.dev/elements/gradient-headings">Gradient Headings</a> - to style the homepage H1</li>
</ul>

<h2>On building the code examples</h2>

<p>I really dig <a href="https://kit.svelte.dev/docs/routing">SvelteKit's routing</a>. Essentially the <code>routes</code> directory is a collection of Svelte components that are automatically routed to based on the file structure.</p>

<p>Inside each directory there's a <code>+page.svelte</code> file which holds the actual page content, typically paired with a <code>+layout.svelte</code> file that holds the page layout.</p>

<p>Children directories inherit the parent <code>+layout.svelte</code> file. But you can also override it by placing a <code>+layout.svelte</code> file in the child directory.</p>

<p><img src="/assets/img/2023-03-06-sveltekit-routing.png" alt="SvelteKit routing" /></p>

<p>What do you do if you want to use the same layout across a bunch of child directories? In my case, I wanted to use the same layout for all the hooks (the side-by-side React vs Svelte code blocks). SvelteKit makes this easy by allowing you to place all the child directories in a directory surrounded by <code>()</code>, in this example <code>(hooks)</code>.</p>

<p>The result is that in the browser the URL will look like this: <code>/useEffect</code>. If the parent had been named <code>hooks</code>, the URL would have been <code>/hooks/useEffect</code>, but that's not what I wanted. In other words, it's a way to "namespace" the child directories and to apply the same template to all of them while keeping the URL clean.</p>

<p>I placed each hook example in its own folder (<code>useEffect</code>, etc) with the following contents:</p>

<ul>
<li><code>+page.svelte</code> - empty file, just because SvelteKit requires it</li>
<li><code>+page.ts</code> - the "API" that provides the raw code for the React and Svelte examples and passes it to the layout as props</li>
<li><code>react.jsx</code> - the raw React code example</li>
<li><code>svelte.svelte</code> - the raw Svelte code example</li>
</ul>

<p>Back to <code>+page.ts</code>, these are the contents:</p>

<pre><code class="language-ts">import type { PageLoad } from "./$types"

export const load = (async ({ params }) =&gt; {
    return {
        title: "useEffect",
        react: (await import("./react.jsx?raw")).default,
        svelte: (await import("./svelte.svelte?raw")).default,
    }
}) satisfies PageLoad
</code></pre>

<p>This uses Daniel Imfeld's raw import technique mentioned above. The cool thing about it is I can keep each example in its own native file extension, so <code>.jsx</code> for React and <code>.svelte</code> for Svelte. This makes it easier to read and edit the code examples, but also works well in the IDE.</p>

<p>The <code>(hooks)/+layout.svelte</code> template can use these properties to display the code examples:</p>

<pre><code class="language-html">&lt;script&gt;
    import { page } from "$app/stores"
    import { CodeBlock } from "@skeletonlabs/skeleton"
    import Header from "./Header.svelte"
&lt;/script&gt;

&lt;!-- Page Route Content --&gt;
&lt;slot&gt;&lt;/slot&gt;

&lt;Header&gt;
    &lt;svelte:fragment slot="header"&gt;
        {$page.data.title}
    &lt;/svelte:fragment&gt;
&lt;/Header&gt;
...
&lt;CodeBlock code={$page.data.react} language="jsx" /&gt;
...
&lt;CodeBlock code={$page.data.svelte} language="svelte" /&gt;
...
</code></pre>

<p>To tell the truth, I'm not convinced this is the best approach. I had some trouble getting slots to behave the way I wanted inside each hook's <code>+page.svelte</code>, so I resorted to using <code>+page.ts</code> instead, with the associated duplication. I'm sure there's a better way to do this, but I'm still learning SvelteKit.</p>

<p>Overall, I'm pretty satisfied with how this works. It's trivial to copy-paste each hook directory and change the <code>title</code> prop and the code examples.</p>

<h2>Conclusion</h2>

<p>It took me about 2 days of casual tinkering to put this together, and I'm pretty happy with the result. Once Skeleton UI is released as a stable 1.0 version, I'll go back and fix a few things. I was glad to kick Skeleton's tires, and I'm sure it will become a staple in my toolbox.</p>

<p>SvelteKit is fabulous, though I'm a not very proficient in it. I can only hope that I will have more opportunities to use it in the future.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/geojson-resources</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/geojson-resources" />
    <title>GeoJSON Resources</title>
    <published>2023-02-14T00:00:00+00:00</published>
    <updated>2023-02-14T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I wanted to write an &quot;Intro to GeoJSON&quot; but Daniel Imfeld Mastodon Twitter beat me to it with an article that is hard to top. Instead, I&#039;ll use this space to add any resources around GeoJSON.

GeoJSON is an open source spatial data format for encoding a......</summary>
    <content type="html"><![CDATA[
        <p>I wanted to write an "Intro to GeoJSON" but Daniel Imfeld <a href="https://techhub.social/@dimfeld">Mastodon</a> <a href="https://twitter.com/dimfeld">Twitter</a> beat me to it with an article that is hard to top. Instead, I'll use this space to add any resources around GeoJSON.</p>

<p>GeoJSON is an open source spatial data format for encoding a variety of geographic data structures. I became aware of it just last week when I started building my newest side project, <a href="/blog/seismic-desktop-taskbar-app-usgs-earthquake-tracking/">Seismic</a>.</p>

<h2>GeoJSON resources</h2>

<ul>
<li><a href="https://imfeld.dev/writing/introduction_to_geojson">Introduction to GeoJSON</a> by Daniel Imfeld.</li>
<li><a href="https://en.wikipedia.org/wiki/GeoJSON">GeoJSON on Wikipedia</a></li>
<li><a href="https://geojson.io/#map=2/0/20">GeoJSON.io</a> - A simple tool for visualizing, editing, and sharing maps, with GeoJSON and other formats.</li>
</ul>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/seismic-desktop-taskbar-app-usgs-earthquake-tracking</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/seismic-desktop-taskbar-app-usgs-earthquake-tracking" />
    <title>Seismic - Desktop Taskbar App for USGS Earthquake Tracking</title>
    <published>2023-02-13T00:00:00+00:00</published>
    <updated>2023-02-13T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">After the devastating 2023 Turkey/Syria earthquakes I was looking at earthquake-related stuff on the interwebs and found this nice USGS magnitude 2.5+ earthquakes in the past day website.

I liked how simple it looked, and noticed that it refreshed......</summary>
    <content type="html"><![CDATA[
        <p>After the devastating <a href="https://en.wikipedia.org/wiki/2023_Turkey%E2%80%93Syria_earthquake">2023 Turkey/Syria earthquakes</a> I was looking at earthquake-related stuff on the interwebs and found this nice <a href="https://earthquake.usgs.gov/earthquakes/map/?extent=-89.76681,-400.78125&amp;extent=89.76681,210.23438&amp;map=false">USGS magnitude 2.5+ earthquakes in the past day</a> website.</p>

<p>I liked how simple it looked, and noticed that it refreshed periodically. Poking at it in the browser dev tools revealed that it was polling a <a href="https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_day.geojson">public GeoJSON feed</a>.</p>

<p>This inspired me to make a free/open-source desktop taskbar app that would replicate the functionality of the website, since I was visiting it quite often at that time. I thought it would also be cool if the app could notify me when a new earthquake past a certain magnitude threshold happened.</p>

<p>I called the app <strong>Seismic</strong> and released v1.0 in less than a week, which is a new record for me. I'm pretty happy with the result, and now it's living in my taskbar 24/7.</p>

<p>Download the latest release for your platform <a href="https://github.com/breadthe/seismic/releases">here</a>, or check out the <a href="https://github.com/breadthe/seismic">source code</a>.</p>

<h2>Stack</h2>

<p>From my <a href="/blog/2023-programming-stack/">2023 toolbox</a>:</p>

<ul>
<li><a href="https://tauri.app/">Tauri</a> - for building the app</li>
<li><a href="https://svelte.dev/">Svelte</a> - for the UI</li>
<li><a href="https://vitejs.dev/">Vite</a> - for the build tooling</li>
<li><a href="https://tailwindcss.com/">Tailwind CSS</a> - for the styling</li>
</ul>

<h2>v1.0 Features</h2>

<ul>
<li>Data: magnitude, location, time (client-side), depth</li>
<li>Open the location in <a href="https://geojson.io/#map=2/0/20">geojson.io</a></li>
<li>Polls the USGS feed every 60 seconds (default)</li>
<li>Configurable refresh interval</li>
<li>Notifies you when a new earthquake happens (by default all earthquakes are notified)</li>
<li>Configurable notification threshold</li>
<li>Light/dark mode</li>
</ul>

<p><strong>Note</strong> that the app is not signed, so you might get a warning when you run it for the first time. This is because I'm not paying for a code signing certificate.</p>

<p><strong>Note</strong>, also, that I've only tested it on Mac. It's very possible that it may not work as nicely on Windows or Linux. Unfortunately I don't have machines for those platforms to test it on (particularly the taskbar integration and desktop notifications).</p>

<h2>Screenshots</h2>

<p><img src="/assets/img/2023-02-13-seismic-v0.6.0-light.jpg" alt="Seismic light mode screenshot" /></p>

<p><img src="/assets/img/2023-02-13-seismic-v0.6.0-dark.jpg" alt="Seismic dark mode screenshot" /></p>

<p><img src="/assets/img/2023-02-13-seismic-v0.6.0-settings.jpg" alt="Seismic settings screenshot" /></p>

<p><img src="/assets/img/2023-02-13-seismic-v0.5.0-notifications.jpg" alt="Seismic desktop notifications" /></p>

<h2>What's next?</h2>

<p>Seismic is feature-complete for now, but I've already prepared v1.1 with optional color-coded events based on magnitude. Before that, I'm working on setting up an automatic updater, so you should be able to receive the next version without having to download it manually.</p>

<p>The USGS feed has a lot of metadata that I could display, so perhaps I'll add a details view for each event (if I can figure out what it all means). At the very least, I want to mark events that come with a tsunami warning.</p>

<p>A built-in map view would be interesting, though I'm not sure if it's worth the effort since you can already open the event location in geojson.io.</p>

<h2>Conclusion</h2>

<p>I'm very happy with how quickly I was able to reach v1.0 on this project. The reason for it is that it was a simple concept to start with, and I made sure to limit the scope to the bare minimum. I also had a lot of the tooling already in place, so it was just a matter of putting it all together.</p>

<p>Another positive side effect is that now I have a pretty solid taskbar app template that I can use for future projects. In fact, I have an older, unfinished app will benefit from the same treatment, as it makes for a perfect taskbar candidate. Stay tuned!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/integrate-mastodon-replies-in-laravel-jigsaw-blog-with-vuejs</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/integrate-mastodon-replies-in-laravel-jigsaw-blog-with-vuejs" />
    <title>How to Integrate Mastodon Replies in a Laravel Jigsaw Blog With VueJS</title>
    <published>2023-02-01T00:00:00+00:00</published>
    <updated>2023-02-01T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">üéâ After many years this blog finally has a comments section of sorts! I have recently added Mastodon replies to blog posts.

Granted, the audience is small for now, but I&#039;m hoping to grow it over time. I&#039;m also hoping that this will encourage me to......</summary>
    <content type="html"><![CDATA[
        <p>üéâ After many years this blog finally has a comments section of sorts! I have recently added Mastodon replies to blog posts.</p>

<p>Granted, the audience is small for now, but I'm hoping to grow it over time. I'm also hoping that this will encourage me to write more often. Eventually I hope to add GitHub issues as comments as well.</p>

<h2>How to</h2>

<p>Figuring out how to do this from scratch on my own would have been a massive undertaking. Thankfully, I found <a href="https://www.codingwithjesse.com/blog/add-mastodon-replies-to-your-blog/">this article</a> by <a href="https://toot.cafe/@JesseSkinner">Jesse Skinner</a> that explains in great detail how to do this.</p>

<p>If your blog doesn't use VueJS, you can probably stop here, although you can apply the same principles to components written in other JS frameworks. Otherwise, read on.</p>

<h2>Laravel Jigsaw with VueJS</h2>

<p>Jesse's solution is great, until I reached the JS part. Since this blog is not made with a JavaScript framework, I couldn't just copy/paste his front-end code and expect it to work.</p>

<p>I'm using <a href="https://jigsaw.tighten.co/">Laravel Jigsaw</a> to build this blog. The code is <a href="https://github.com/breadthe/chasingcode.dev">open source</a>, so feel free to check it out.</p>

<p>I considered several solutions, but in the end I decided to go with VueJS. There was already a VueJS component previously, for the search functionality. It made sense to follow the same pattern and add a new component for the Mastodon replies.</p>

<h2>The Blade wrapper partial</h2>

<p>To start, I created a new Blade partial in <code>source/_partials/mastodon-webmention.blade.php</code> that I included at the bottom of <code>source/_layouts/post.blade.php</code> (the template for a single blog post).</p>

<p>This Blade partial is just a wrapper around the VueJS component, and provides an id for the component to hook on to.</p>

<pre><code class="language-html">&lt;section id="mastodon-webmention"&gt;
    &lt;mastodon-webmention page-url="{{ $page-&gt;getUrl() }}" mastodon-toot-url="{{ $page-&gt;mastodon_toot_url }}"&gt;&lt;/mastodon-webmention&gt;
&lt;/section&gt;
</code></pre>

<p>It takes two props:</p>

<ul>
<li><code>page-url</code>: the URL of the current page (the blog post)</li>
<li><code>mastodon-toot-url</code>: the URL of the Mastodon toot</li>
</ul>

<p>Note that <code>$page-&gt;getUrl()</code> is a Jigsaw helper function that returns the URL of the current page.</p>

<p>The Mastodon toot url is empty initially, until I announce the published article in a Mastodon toot. Then I grab the URL and update the front matter of the blog post. The reason I need this is to be able to provide a "Discuss this article on Mastodon" link at the bottom of the blog post.</p>

<h2>Configuring the VueJS component</h2>

<p>Before being able to use the VueJS component, I needed to configure it. I created a new file <code>source/_assets/js/components/MastodonWebmention.vue</code> and then registered the component in <code>source/_assets/js/main.js</code>:</p>

<pre><code class="language-js">import MastodonWebmention from './components/MastodonWebmention.vue';

if (document.getElementById('mastodon-webmention')) {
    new Vue({
        components: {
            MastodonWebmention
        },
    }).$mount('#mastodon-webmention');
}
</code></pre>

<p>I am mounting the component to the <code>#mastodon-webmention</code> element, which is the wrapper I created in the Blade partial. I'm also checking if the element exists before mounting the component, to avoid JS errors on pages that are not blog posts (they won't have this element).</p>

<h2>The Mastodon replies VueJS component</h2>

<p>Now that the component is registered, it's time to copy the code from Jesse's article and paste it in the <code>MastodonWebmention.vue</code> file under the <code>methods</code> section. Note that this is Vue 2.5 code so it doesn't use the composition API.</p>

<p>I massaged it into a VueJS-friendly format, and added some additional helper methods.</p>

<p>I'm rendering replies, boosts, and favorites in the same component, much in the same way Jesse's doing it, but in a slightly different order. I'm also rendering a "Discuss this article on Mastodon" link at the bottom of the component, if the Mastodon toot URL is set.</p>

<p>Here's the full code for the component, but you can also check it out on <a href="https://github.com/breadthe/chasingcode.dev/blob/master/source/_assets/js/components/MastodonWebmention.vue">GitHub</a>.</p>

<pre><code class="language-html">&lt;template&gt;
  &lt;div :class="mastodonTootUrl.length || replies.length || boosts.length || favorites.length ? 'my-4 flex flex-col gap-4' : ''"&gt;
    &lt;a
        v-if="mastodonTootUrl.length"
        :href="mastodonTootUrl"
        class="w-full p-2 text-center text-xl text-mastodon-purple hover:text-white bg-indigo-100 hover:bg-mastodon-purple rounded font-bold"
        target="_blank"
    &gt;
      Discuss this article on Mastodon
    &lt;/a&gt;

    &lt;div v-if="replies.length"&gt;
      &lt;h6 class="mb-2 text-xl text-mastodon-purple font-bold"&gt;Replies&lt;/h6&gt;

      &lt;div class="flex flex-col gap-2"&gt;
        &lt;div v-for="reply in replies" :key="reply.url" class="p-2 border-2 border-mastodon-purple rounded"&gt;
          &lt;a :href="reply.author.url" class="flex gap-2 items-center text-base text-mastodon-purple font-bold group" target="_blank"&gt;
            &lt;img :src="reply.author.photo" :alt="reply.author.name" class="w-16 rounded-lg"&gt;

            &lt;div class="flex flex-col"&gt;
              &lt;span class="font-normal group-hover:text-mastodon-purple group-hover:underline"&gt;{{ reply.author.name }}&lt;/span&gt;
              &lt;span class="text-sm text-gray-600 font-light"&gt;{{ authorUrlToMastodonUrl(reply.author.url) }}&lt;/span&gt;
            &lt;/div&gt;
          &lt;/a&gt;

          &lt;div class="mt-2 text-gray-900 text-sm font-light"&gt;
            &lt;p class="text-black"&gt;{{ reply.content.text }}&lt;/p&gt;

            &lt;a :href="reply.url" target="_blank" class="block -mt-4 text-right text-mastodon-purple hover:text-mastodon-purple hover:underline"&gt;Reply&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div v-if="boosts.length"&gt;
      &lt;h6 class="mb-2 text-xl text-mastodon-purple font-bold"&gt;Boosted&lt;/h6&gt;

      &lt;div class="flex flex-wrap gap-2"&gt;
        &lt;a v-for="boost in boosts" :key="boost.url" :href="boost.author.url" target="_blank"&gt;
          &lt;img :src="boost.author.photo" :alt="boost.author.name" class="w-16 rounded-lg"&gt;
        &lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div v-if="favorites.length"&gt;
      &lt;h6 class="mb-2 text-xl text-mastodon-purple font-bold"&gt;Favorited&lt;/h6&gt;

      &lt;div class="flex flex-wrap gap-2"&gt;
        &lt;a v-for="favorite in favorites" :key="favorite.url" :href="favorite.author.url" target="_blank"&gt;
          &lt;img :src="favorite.author.photo" :alt="favorite.author.name" class="w-16 rounded-lg"&gt;
        &lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;

  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
    props: {
        pageUrl: {
            type: String,
            required: true,
            default: '/blog',
        },
        mastodonTootUrl: {
            type: String,
            required: true,
            default: '',
        },
    },
    data() {
        return {
          // https://webmention.io/api/mentions.jf2?target=https://yourblog.com/blog/blog-post-slug/&amp;per-page=100&amp;page=0}
          webmentionIoUrl: 'https://webmention.io/api/mentions.jf2',
          link: '',
          favorites: [],
          boosts: [],
          replies: [],
        };
    },
    computed: {

    },
    methods: {
      async loadWebmentions() {
        let mentions = await this.getMentions(this.pageUrl);

        if (mentions.length) {
          this.link = mentions
              // find mentions that contain my Mastodon URL
              .filter((m) =&gt; m.url.startsWith('https://indieweb.social/@brbcoding'))
              // take the part before the hash
              .map(({ url }) =&gt; url.split('#')[0])
              // take the first one
              .shift();

          // use the wm-property to make lists of favourites, boosts &amp; replies
          this.favorites = mentions.filter((m) =&gt; m['wm-property'] === 'like-of');
          this.boosts = mentions.filter((m) =&gt; m['wm-property'] === 'repost-of');
          this.replies = mentions.filter((m) =&gt; m['wm-property'] === 'in-reply-to');
        }
      },
      async getMentions(pageUrl) {
        let mentions = [];
        let page = 0;
        const perPage = 100;

        while (true) {
          const results = await fetch(
              `${this.webmentionIoUrl}?target=${pageUrl}/&amp;per-page=${perPage}&amp;page=${page}`
          ).then((r) =&gt; r.json());

          mentions = mentions.concat(results.children);

          if (results.children.length &lt; perPage) {
            break;
          }

          page++;
        }

        return mentions.sort((a, b) =&gt; ((a.published || a['wm-received']) &lt; (b.published || b['wm-received']) ? -1 : 1));
      },

      // Transforms "https://mastodon.social/@authorname" to "@authorname@mastodon.social"
      authorUrlToMastodonUrl(url) {
        const parts = url.split('/');
        return `${parts[3]}@${parts[2]}`;
      },
    },
  created() {
      this.loadWebmentions();
  },
};
&lt;/script&gt;
</code></pre>

<p>And that's about it! It's worth mentioning that I haven't touched Vue in a few years, but it felt familiar like riding a bike.</p>

<p>Here's what it looks like:</p>

<p><img src="/assets/img/2023-02-01-mastodon-replies-jigsaw-blog.jpg" alt="Screenshot of the Mastodon webmentions component" /></p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/lg-ultrafine-27un850-w-monitor-on-mac-setup-review</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/lg-ultrafine-27un850-w-monitor-on-mac-setup-review" />
    <title>Setting up an LG UltraFine 27UN850-W Monitor on Mac and Mini-Review</title>
    <published>2023-01-27T00:00:00+00:00</published>
    <updated>2023-01-27T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I bought a new 27&quot; 4K monitor for coding and light graphics/design work on the Mac. The full name is 
LG UltraFine UHD 27-Inch Computer Monitor 27UN850-W, IPS with VESA DisplayHDR 400, AMD FreeSync, and USB-C, White.

This is not a full review, merely a......</summary>
    <content type="html"><![CDATA[
        <p>I bought a new 27" 4K monitor for coding and light graphics/design work on the Mac. The full name is <a href="https://www.lg.com/us/monitors/lg-27un850-w-4k-uhd-led-monitor">
LG UltraFine UHD 27-Inch Computer Monitor 27UN850-W, IPS with VESA DisplayHDR 400, AMD FreeSync, and USB-C, White</a>.</p>

<p>This is not a full review, merely a short setup guide for my use-case, and a few random impressions.</p>

<h2>Specs</h2>

<p>I'm only listing the features I care about; for the full specs hit the official LG page above.</p>

<p><strong>Resolution/Size</strong> 27" 4K (3840x2160) IPS @ 60Hz, 5ms response time</p>

<p><strong>Stand</strong> Tilt/Height/Pivot (there's also a more expensive Ergo option)</p>

<p><strong>Other</strong> Built-in 5W 2-channel speakers, AMD FreeSync, 60W power delivery over USB-C</p>

<p><strong>Included</strong> Power adapter, USB-C data/power cable, HDMI cable</p>

<p><strong>Price</strong> ~<a href="https://amzn.to/3Ylbu2T">$406 on Amazon</a> with tax and free shipping ($450 retail)</p>

<h2>Setup</h2>

<p>The monitor came out of the box with super-saturated colors that frankly looked horrible side-by-side to my MacBook Pro. Here's what I adjusted to bring the image down to more civilized levels. It doesn't match the MacBook's image 100%, but it comes close enough, and I'm happy for the amount of work I put into it.</p>

<h3>Position</h3>

<ul>
<li>side-by-side to the MacBook. I tried putting it directly in front and above the laptop, but even at full vertical extension it's not tall enough to clear the 16" screen. I briefly considered adding some books under it, but realized my head would be tilted upwards painfully.</li>
<li>height all the way down so that my eyes are level with the vertical center of the screen</li>
</ul>

<h3>Monitor settings</h3>

<ul>
<li>Setup > Picture > Picture Mode > change from Vivid to Cinema (though it will change to Custom later as you make the next adjustments)</li>
</ul>

<h3>Mac settings</h3>

<p>System Settings > Displays > (select the LG monitor) ></p>

<ul>
<li>Color Profile > Adobe RGB (1998)</li>
<li>Text Size > the 2nd largest one (2560x1440) - a good balance between text size and legibility</li>
<li>High Dynamic Range > Off - this gets rid of the text aliasing</li>
</ul>

<p><img src="/assets/img/2023-01-27-lg-ultrafine-27un850-w-mac-settings.jpg" alt="LG UltraFine 27UN850-W" /></p>

<h2>Random impressions</h2>

<ul>
<li>the stand is trivial to install (tool-free).</li>
<li>the stand adjustment is pretty versatile for what I need.</li>
<li>it looks good, the bezels are thin, and the silver/white trim pair well with a MacBook.</li>
<li>the OSD (on-screen display) looks modern and has plenty of adjustments, though I haven't played a lot with it.</li>
<li>it has a lot of outputs that should satisfy a lot of scenarios. Best of all, it acts as a USB hub which can also power the laptop over USB-C, in addition to the image output.</li>
<li>thanks to this, I can keep my desk clean, with a single cable connecting my MacBook. The other cables are tucked away behind the monitor, held together by a cable organizer.</li>
<li>text and image are sharp, coming close enough (for coding at least) to the Mac's Retina display.</li>
<li>there's plenty of real-estate to display 2 apps in a 1/2 split fashion.</li>
<li>I like having speakers on a monitor, even if they suck. These are loud-ish, but not great acoustically. A Mac Mini, for example, would benefit from them if you don't want to have separate speakers for any reason. The built-in MacBook Pro speakers are a lot better though, so that's what I'll continue to use.</li>
</ul>

<h2>Conclusion</h2>

<p>If you can pick the LG 27UN850-W for a discount, at ~$400 it provides excellent value. It may not be ideal for a graphic designer, but as a coder I'm very happy with it so far.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/10-year-website-for-100-dollars</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/10-year-website-for-100-dollars" />
    <title>10-Year Website for Less Than $100</title>
    <published>2023-01-26T00:00:00+00:00</published>
    <updated>2023-01-26T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Someone near and dear to me recently opened a business (let&#039;s call it Generic Company) that runs entirely offline and is pretty low-tech. The owner does not need or want an online presence.

It so happens that I was curious if the domain......</summary>
    <content type="html"><![CDATA[
        <p>Someone near and dear to me recently opened a business (let's call it Generic Company) that runs entirely offline and is pretty low-tech. The owner does not need or want an online presence.</p>

<p>It so happens that I was curious if the domain GenericCompany.com was available. Lo and behold, it was! So I told them it would be a good idea to buy the domain right away, even if they didn't plan to use it.</p>

<p>My reasoning was twofold. First, they may <em>think</em> they don't need an internet presence now, but you never know how things change in a few years. Second, these days very few companies are so lucky anymore to find the exact CompanyName.com domain available for purchase.</p>

<p>When I explained it like that, my "client" was immediately on board with the idea. So, less than $100 and 15 minutes of my time later they had a brand-new 10-year domain with a generic (and super basic) landing page. Now they have a web presence, and no one else can claim GenericCompany.com. Win-win!</p>

<p>Here's what I did.</p>

<h2>Domain registration and hosting provider</h2>

<p><strong>Domain registrar</strong>: <a href="https://www.cloudflare.com/">Cloudflare</a></p>

<p>Cloudflare has recently begun to sell domains. I love them because they don't charge any extra fees so their domains are even cheaper than Google. They've also been around for a long time, protecting the web from bad actors, which builds a lot of trust in the online community. To top it off, the domain management UI is very easy to use.</p>

<p><strong>Hosting</strong>: <a href="https://vercel.com/">Vercel</a></p>

<p>Vercel makes it super easy to deploy static websites. The free tier is more than enough for this application.</p>

<h2>The "stack"</h2>

<p>The requirement for this "website" was to have just a landing page with the company name front-and-center, and a tagline below. Any form of dynamic content, design, mobile responsiveness, or SEO are not needed.</p>

<p>Initially I thought about doing it in <a href="https://kit.svelte.dev/">SvelteKit</a> with TailwindCSS for basic styling, but then I laughed out loud when I realized what a massive overkill that would be.</p>

<p>So I went back to most basic thing you can imagine: an <code>index.html</code> file with rudimentary HTML and 1 line of JS to make the date in the footer dynamic.</p>

<p>Here's the code in all its majestic glory:</p>

<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;title&gt;Generic Company&lt;/title&gt;
    &lt;style&gt;
        main {
            height: 95vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            text-align: center;
            padding: 0 2em;
        }

        h1 {
            font-size: 3em;
        }

        footer {
            text-align: center;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;main&gt;
        &lt;h1&gt;Generic Company&lt;/h1&gt;
        &lt;h2&gt;Company tagline bla bla.&lt;/h2&gt;
        &lt;em&gt;coming soon&lt;/em&gt;
    &lt;/main&gt;

    &lt;footer&gt;&amp;copy; &lt;span id="year"&gt;2023&lt;/span&gt; Generic Company&lt;/footer&gt;
&lt;/body&gt;
&lt;script&gt;
    document.getElementById('year').innerText = (new Date).getFullYear()
&lt;/script&gt;
&lt;/html&gt;
</code></pre>

<p>Feel free to use it :)</p>

<h2>Deployment</h2>

<p>First I bought the domain on Cloudflare: $91.50 for 10 years (<code>.com</code> domains are $9.15).</p>

<p>Next, I made a private GitHub repository where I pushed the <code>index.html</code>.</p>

<p>In Vercel I created a new project for this website, and linked the GitHub repo to it. I had to give explicit permissions to allow Vercel to access the repo. That was all the configuration I needed, since Vercel knows what to do if it encounters an <code>index.html</code> in the root.</p>

<p>I then added a Domain to my project. I assigned <code>genericcompany.com</code> to it, and it provided me with an <strong>A record</strong> and a <strong>CNAME record</strong> to configure in Cloudflare for the domain. In Cloudflare I did just that.</p>

<p>SSL is handled automatically, though keep reading for a little gotcha.</p>

<h2>Redirects</h2>

<p>When you add a custom domain Vercel suggests serving the main domain on <code>www.genericcompany.com</code> and redirecting <code>genericcompany.com</code> requests to it. They claim that their edge network can optimize things better doing it this way. I accepted their suggestion even though I prefer the opposite. It's your call, either is fine.</p>

<p>The default suggested redirect is <code>308 Permanent Redirect</code>, which I also kept.</p>

<p><strong>The gotcha</strong>: if you don't do anything else at this point, you might be baffled by a <code>err_too_many_redirects</code> error when you load the webpage from your new domain.</p>

<p><a href="https://vercel.com/guides/resolve-err-too-many-redirects-when-using-cloudflare-proxy-with-vercel">Vercel provides an answer to this problem</a>. Essentially you need to go to Cloudflare and set the SSL/TLS encryption to "Full" or "Full (strict)". I set mine to <em>Full</em> but Cloudflare offers a helpful analysis which recommends setting it to <em>Full (strict)</em> for even better performance, which is what I did.</p>

<h2>Conclusion</h2>

<p>I'm glad I had the foresight to check for my "client's" company domain availability. For negligible cost, and a trivial amount of work on my part (I didn't charge them, obviously), they now have a web presence for the next 10 years. More importantly, no one else can claim that domain in the meantime, and the client can always decide to build an actual web presence at their own convenience, with the peace of mind that their company trademark has a secure online presence.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/2023-programming-stack</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/2023-programming-stack" />
    <title>My 2023 Programming Stack</title>
    <published>2023-01-25T00:00:00+00:00</published>
    <updated>2023-01-25T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">If you&#039;ve read my 2022 Programming Stack article, then it shouldn&#039;t be much of a surprise to hear that it hasn&#039;t changed much for 2023, with one notable exception: I&#039;ve replaced Electron with Tauri.

TL;DR
- TALL stack (Laravel + Livewire + AlpineJS +......</summary>
    <content type="html"><![CDATA[
        <p>If you've read my <a href="/blog/2022-programming-stack">2022 Programming Stack</a> article, then it shouldn't be much of a surprise to hear that it hasn't changed much for 2023, with one notable exception: I've replaced Electron with Tauri.</p>

<p>TL;DR
- TALL stack (<strong>Laravel</strong> + <strong>Livewire</strong> + <strong>AlpineJS</strong> + <strong>TailwindCSS</strong>), <strong>Svelte</strong> + <strong>SvelteKit</strong>, <strong>Tauri</strong>.
- database: <strong>MySQL</strong>, <strong>SQLite</strong>
- situational: <strong>PostgreSQL</strong>, <strong>Inertia</strong>, <strong>Rust</strong>
- blog: <strong>Writefreely</strong></p>

<p>Read on for details.</p>

<h2>Back-end</h2>

<p><a href="https://laravel.com/">Laravel</a> is my solution for anything requiring a database. Together with <a href="https://laravel-livewire.com/">Livewire</a>, <a href="https://alpinejs.dev/">AlpineJS</a>, and <a href="https://tailwindcss.com/">TailwindCSS</a> I can quickly build complex functionality and appealing UI.</p>

<p>With <a href="https://www.php.net/releases/8.2/en.php">8.2</a>, PHP has continued to evolve and stay relevant, driving a majority of the world's websites. PHP 8.3 is probably going to launch in 2023.</p>

<p><strong>Laravel</strong> remains the best web framework (in my biased view) and continues to improve steadily. Version 10 is coming out in early 2023, but with new features added to the framework every week, major versions don't feel as the huge stepping stones they once were, which speaks to Laravel's maturity.</p>

<p><strong>Livewire</strong> is the logical companion to Laravel for building interactive UI without much JavaScript. It goes hand-in-hand with <strong>AlpineJS</strong> for those times when you need fancier UI behavior. Livewire v3 is expected this year, but I'll admit I'm a little apprehensive because it heralds a lot of changes and deprecations, though compensating with better performance and new APIs.</p>

<h2>Database</h2>

<p><strong>MySQL 8.x</strong> is my go-to server-side database, mostly because I've been using it forever and it satisfies most of my requirements.</p>

<p><strong>PostgreSQL</strong> brings powerful features that MySQL does not yet have, so I am waiting for a chance to use it for the right application.</p>

<p><strong>SQLite</strong> is becoming more fashionable lately, after developers realized that a simple flat-file database can handle most simple applications (and even some complex ones), and it's very portable which makes it easy to maintain and back up.</p>

<p>Another thing that makes SQLite desirable is that it's a very good option for desktop apps where you need to persist data in a more permanent way.</p>

<p>I have already started to use SQLite on a very early-stage prototype for a side-project I'm working on, and I have plans to use it in various desktop apps.</p>

<h2>Front-end</h2>

<p><strong>Tailwind</strong> has been my bread-and-butter for styling the front-end since v0.7. As a full-stack dev, nothing makes me more efficient at building good-looking UI. Tailwind continues to gain new features, and I can't imagine another CSS framework overthrowing it.</p>

<p>For JS apps, <a href="https://svelte.dev/">Svelte</a> is my jam. It's such a joy to work with, that I literally miss if after spending too much time in PHP-land.</p>

<p><a href="https://kit.svelte.dev/">SvelteKit</a> is my tool for building static sites that require any kind of routing. Add one more to the list of frameworks that have finally reached v1.0 after a long beta.</p>

<p>Philosophically, I've abandoned the concept of a backend-driven SPA (Single Page App). With Laravel and Livewire there's just no need for it. However, if I ever needed something along the lines, I would choose Laravel with <a href="https://inertiajs.com/">Inertia.js</a> and Svelte, though I am open to using Vue if my employer or client required it.</p>

<p>Inertia has been on my radar for a very long time, and I'm itching for a reason to use it. There has never been a better time to add Inertia to the Laravel stack than now, with v1.0 officially released after a very long beta period.</p>

<p>I don't think much about <strong>AlpineJS</strong>. It's there when I need it, usually in tandem with Livewire. Works very well for adding small bits of dynamic functionality to an otherwise static page or site.</p>

<h2>Desktop</h2>

<p>Sometimes I build desktop apps, usually when I feel that the app doesn't need internet access or a user account. One of the most complex apps I built with Electron is <a href="https://svgx.app/">SVGX</a>.</p>

<p>In 2022 I discovered <a href="https://tauri.app/">Tauri</a> and my world was flipped upside down. Right out of the box, Tauri provides a much better developer experience than Electron. It allows me to scaffold a desktop app a lot quicker (with Svelte and Tailwind cause that's what I like), and comes with batteries included.</p>

<p>With Tauri, I made the most complex desktop app to date, a <a href="https://github.com/breadthe/sd-buddy">UI client for Stable Diffusion on the Mac</a>. The open-source Svelte-powered codebase has collected 237 stars on GitHub to date (it may not sound like much, but it's a lot to me). In addition, I made a few other small apps that remained in the prototype stage.</p>

<h2>Systems</h2>

<p>I never had a chance to get into systems programming, but Tauri nudged me to use <strong>Rust</strong> to an extent (Tauri uses Rust under the hood). I'll admit that it feels alien compared to the PHP/JS stack I've been using all my career, but it's interesting at the same time because it can build some seriously fast and efficient low-level programs.</p>

<p>I'll continue to dabble in Rust as required by Tauri, probably at an early amateur level.</p>

<h2>Blog engine</h2>

<p>In 2022 I've been thinking more seriously about starting another blog on fitness (cycling, swimming, running, nutrition, etc). The main difficulty was picking the right blog engine (ain't it always?). I <em>think</em> I've found the solution in <a href="https://writefreely.org/">Writefreely</a>.</p>

<p>Writefreely is a minimalistic blog engine that can be self-hosted on a Linux box. Both of these are things that I'm looking for, so I'll give it a spin and see how it goes.</p>

<h2>Summary</h2>

<p>That just about wraps it up. Since I'm always learning something new, there's a good chance this list will change by the end of the year, but that's part of the fun!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/must-have-laravel-php-packages</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/must-have-laravel-php-packages" />
    <title>Must-have Laravel &amp; PHP Packages</title>
    <published>2023-01-06T00:00:00+00:00</published>
    <updated>2023-01-06T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">A list of Laravel and PHP packages I absolutely need in every project, continuously updated.

This list is relatively short because I follow the principle &quot;avoid packages until it hurts&quot;. I use packages that encapsulate complex functionality and features......</summary>
    <content type="html"><![CDATA[
        <p>A list of Laravel and PHP packages I <strong>absolutely</strong> need in every project, continuously updated.</p>

<p>This list is relatively short because I follow the principle "avoid packages until it hurts". I use packages that encapsulate complex functionality and features that would take too long to implement from scratch. I also heavily favor those that are well maintained, which is why you'll see a lot of Spatie ones on the list.</p>

<h2>Must-have</h2>

<ul>
<li><a href="https://github.com/livewire/livewire">livewire/livewire</a> - Laravel Livewire.</li>
<li><a href="https://github.com/wire-elements/modal">wire-elements/modal</a> - Wire Elements Modal, a modal component for Laravel Livewire.</li>
<li><a href="https://github.com/spatie/laravel-google-fonts">spatie/laravel-google-fonts</a> - Manage self-hosted Google Fonts in Laravel apps.</li>
<li><a href="https://github.com/spatie/laravel-backup">spatie/laravel-backup</a> - A modern backup solution for Laravel apps.</li>
<li><a href="https://github.com/opcodesio/log-viewer">opcodesio/log-viewer</a> - Easy-to-use, fast, and beautiful log viewer for Laravel apps.</li>
<li><a href="https://github.com/barryvdh/laravel-debugbar">barryvdh/laravel-debugbar</a> <strong>dev</strong> - Laravel Debugbar.</li>
<li><a href="https://github.com/spatie/laravel-ray">spatie/laravel-ray</a> <strong>dev</strong> - Laravel adapter for Ray.</li>
<li><a href="https://github.com/spatie/laravel-login-link">/spatie/laravel-login-link</a> <strong>dev</strong> - Quick login links for the local environment.</li>
<li><a href="https://github.com/barryvdh/laravel-ide-helper">barryvdh/laravel-ide-helper</a> <strong>dev</strong> - Laravel IDE Helper. It generates helper files that enable your IDE to provide accurate autocompletion. Especially useful to allow PHPStorm to make sense of facades. Run the following commands after installing:

<ul>
<li><code>php artisan clear-compiled</code></li>
<li><code>php artisan ide-helper:generate</code></li>
<li>(optional) <code>php artisan ide-helper:models</code></li>
<li>(optional) <code>php artisan ide-helper:meta</code></li>
</ul></li>
</ul>

<h2>Sometimes</h2>

<ul>
<li><a href="https://github.com/spatie/laravel-data">spatie/laravel-data</a> - Powerful data objects for Laravel.</li>
<li><a href="https://github.com/spatie/simple-excel">spatie/simple-excel</a> - Read and write simple Excel and CSV files.</li>
<li><a href="https://github.com/spatie/laravel-markdown">spatie/laravel-markdown</a> - A highly configurable markdown renderer and Blade component for Laravel.</li>
<li><a href="https://github.com/spatie/laravel-personal-data-export">spatie/laravel-personal-data-export</a> - Create zip files containing personal data.</li>
<li><a href="https://github.com/roach-php/laravel">roach-php/laravel</a> - Web Scraping for Laravel.</li>
<li><a href="https://github.com/vlucas/phpdotenv">vlucas/phpdotenv</a> - PHP dotenv / Loads environment variables from .env to getenv(), $_ENV and $_SERVER automagically.</li>
<li><a href="https://github.com/bringyourownideas/laravel-backblaze">bringyourownideas/laravel-backblaze</a> - B2-Backblaze Storage Adapter for Laravel 5+.</li>
<li><a href="https://github.com/brendt/php-sparkline">brendt/php-sparkline</a> - Generate <a href="https://en.wikipedia.org/wiki/Sparkline">sparkline</a> SVGs in PHP.

<ul>
<li><a href="https://www.youtube.com/watch?v=N_6Y09NLaqM">YouTube - Building the SparkLine package</a></li>
</ul></li>
</ul>

<h2>My packages</h2>

<ul>
<li><a href="https://github.com/breadthe/php-simple-calendar">breadthe/php-simple-calendar</a> - Generate a 7 x 6 (42) or 7 x 5 (35) element array of the days of the month for any date in PHP.</li>
<li><a href="https://github.com/breadthe/laravel-silent-spam-filter">breadthe/laravel-silent-spam-filter</a> - Silently ignore messages submitted via contact forms in Laravel.</li>
<li><a href="https://github.com/breadthe/php-contrast">PHP Contrast Tools</a> - Various utilities for working with color contrast in PHP.</li>
</ul>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/reflecting-on-2022</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/reflecting-on-2022" />
    <title>Reflecting on 2022</title>
    <published>2022-12-31T00:00:00+00:00</published>
    <updated>2022-12-31T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">In 2019, I started the &quot;tradition&quot; of reflecting on the past year, mainly from a developer &amp;amp; geek point of view. I think it&#039;s a useful tool for summarizing how I&#039;ve grown as a developer, and what cool new things I&#039;ve done and accomplished.

I......</summary>
    <content type="html"><![CDATA[
        <p>In 2019, I started the "tradition" of <a href="/blog/reflecting-on-2019/">reflecting on the past year</a>, mainly from a developer &amp; geek point of view. I think it's a useful tool for summarizing how I've grown as a developer, and what cool new things I've done and accomplished.</p>

<p>I continued this in <a href="/blog/reflecting-on-2020/">2020</a>, <a href="/blog/reflecting-on-2021/">2021</a>, and now, 2022.</p>

<h2>Personal</h2>

<p>As usual, I won't share any personal stuff except that, despite all precautions over the past 2 years, Covid 19 finally found me. I have no idea how that happened, especially since at the time I was pretty cautious about isolating, but thankfully it was a mild form and mostly over after 2 days.</p>

<p>Apart from that, I'm grateful for being generally healthy (see the Fitness section below) and aging gracefully.</p>

<h2>Work</h2>

<p>I continue to work remotely as a full stack PHP + JS developer for (mostly) legacy code. As a useful distraction I worked in Node on a newer project for a couple of months. The company is A+ but the work leaves me unfulfilled and uninspired.</p>

<h2>This blog</h2>

<p>The blog has now been around for 4 years. That's cool, but I've been posting less every year. I'll continue to add interesting coding tidbits, however my motivation has been sinking for a long time.</p>

<p>I've been mulling over the idea of redesigning the blog, including a brand new engine. I would very much like to use <a href="https://kit.svelte.dev/">SvelteKit</a> for that. I have a list of requirements in mind - pretty much all the features of this blog, with comments in addition. A SvelteKit blog template that comes very close is <a href="https://swyxkit.netlify.app/">SwyxKit</a>.</p>

<p>Who knows, maybe 2023 will finally be the year for it, especially now that SvelteKit 1.0 is finally released. I realize how much of a lift it is though, so I won't make any promises.</p>

<p>Traffic-wise, I don't care enough to check.</p>

<p>I'll skip the popular posts section this time. Feel free to browse my <a href="/archive">articles</a>, though some of the older ones are becoming outdated or irrelevant.</p>

<h2>Personal projects and software releases</h2>

<p>In 2022 I used less Laravel in my personal projects. Laravel remains my go-to for complex, server-driven applications, but I haven't settled on a good project yet.</p>

<p>I'm becoming more partial to the idea of building standalone/offline desktop apps, which is where the Tauri/Svelte stack comes in.</p>

<p>Here are some of the personal projects I worked on in 2022:</p>

<ul>
<li><a href="https://github.com/breadthe/sd-buddy">Stable Diffussion Buddy</a> - a free/open-source desktop client for Stable Diffusion on the M1 Mac. 2022 was the year of AI/ML image generation (as well as GPT3 &amp; Co.) and I found myself riding that wave for a while. It's been a lot of fun building this, especially with a few collaborators at the beginning who provided very useful feedback and even contributed some PRs. As I write this the project is pretty much abandoned because the Stable Diffusion ecosystem has been moving at a faster pace than I was able to keep up with, but also because mentally I've switched to other things. The project is made with Tauri and Svelte. It has collected over 200 stars on GitHub which is incredible to me.</li>
<li><a href="https://github.com/breadthe/paneful">Paneful</a> - a free/open-source desktop dual-pane file browser that I started for a hackathon at work. Started but never finished, nor will it ever be. Made with Tauri and Svelte.</li>
<li><a href="https://untitled-color-app.vercel.app/">Untitled Color App</a> - a color-swatch organizer made with SvelteKit. I haven't made the code public because I lost direction on the project.</li>
<li><strong>Cycling stats app</strong> - a tool for Strava cycling activities. I've been slowly tinkering with it and adding features. I wanted to release it to the wide public but the onboarding experience is rough around the edges and I haven't had time to polish it. Made with Laravel and Livewire.</li>
</ul>

<h2>New dev tech</h2>

<p>I described my <a href="/blog/2022-programming-stack/">2022 stack</a> at the beginning of the year, and most of it holds true with some exceptions.</p>

<ul>
<li><a href="https://laravel.com/">Laravel</a></li>
<li><a href="https://laravel-livewire.com/">Livewire</a></li>
<li><a href="https://alpinejs.dev/">AlpineJS</a></li>
<li><a href="https://tailwindcss.com/">TailwindCSS</a></li>
<li><a href="https://svelte.dev/">Svelte</a> and <a href="https://kit.svelte.dev/">SvelteKit</a></li>
<li><a href="https://tauri.app/">Tauri</a> replaces Electron, as it's overall a better developer experience.</li>
<li><a href="https://www.rust-lang.org/">Rust</a> was on my radar for a while and I finally got a chance to give it a spin, since Tauri uses it under the hood. Unfortunately it's harder to wrap my brain around than I thought.</li>
</ul>

<h2>New gadgets</h2>

<p>In 2021 I adopted Apple Silicon for my personal and work laptops.</p>

<p>In 2022 I bought my first <strong>iPad</strong>, a 2021 13" Pro M1 + Apple Pencil. It's quite a big boi but I always wanted a large screen for reading comics and sketching ideas, icons, diagrams, and other amateur art.</p>

<p>I still use an Android phone, but eventually I know I'll switch to an iPhone as it makes everything easier when all devices share the same ecosystem. I like to hold on to my devices for at least 2 years (3+ ideally) and I'm holding out for a rumored future iPhone with a big optical zoom lens like I currently have on my Samsung S21 Ultra.</p>

<p>The new Apple Watch Ultra is very interesting for an amateur athlete like me, but it doesn't hold a candle to a flagship Garmin watch, at least in terms of sports/outdoors features. For that reason I don't see myself buying an Apple Watch very soon.</p>

<p>My only other tech purchase was a <strong>Nintendo Switch</strong> OLED. I'm very late to the table but I didn't have much of a reason for one, until this year when Diablo 2 Resurrected was released on the Switch. Diablo 2 is my #1 game of all time and, while I hate what Blizzard has become, I can't fault how D2R turned out. D2R is the D2 with modern graphics I always wanted. It works amazingly with a controller and the Switch is perfect for long-haul flights where I can easily pass away the hours.</p>

<h2>Health and fitness</h2>

<p>Cycling remained my one and only activity. In 2022 I rode a total of 6400 miles (10.4K km), slightly more than the previous year.</p>

<p>I've acquired a 4th steed, a lightweight gravel race bike, but in 2023 I plan to sell most of my stable and focus mostly on gravel riding.</p>

<p>Last year I said I hoped to race a few events but it failed to materialize. My usual excuse is that I'm too lazy to prepare for the logistics of a race, not to mention driving to the location. I'd much rather hit the trails close to my house since it's way more convenient.</p>

<p>For 2023 I won't make any promises - I'll compete if I feel motivated enough, otherwise I'll stay the course.</p>

<p>Unfortunately cycling has also come with the downside of injuries. At the beginning of the year I had a crash which wasn't too bad considering, but took me out of action for 2 weeks. Later I developed a persistent sort of <a href="https://en.wikipedia.org/wiki/Repetitive_strain_injury">RSI</a> in one arm which prevents me from enjoying the sport to the fullest. That's the way it goes with me and sports. I tend to become obsessed with them which often leads to injury from overindulgence.</p>

<h2>Books</h2>

<p>Last year I said I was planning to read some comics and I stayed true to that. I read Jodorowsky's <strong>The Incal</strong>, and re-read the <strong>Tintin</strong> and <strong>Asterix</strong> books.</p>

<h2>Movies and TV</h2>

<p>I don't watch TV in the traditional sense, but I do stream a fair amount of movies and TV shows.</p>

<p>Some of the movies I liked in 2022 are:  <strong>The French Dispatch</strong> (2021), <strong>Moonwalkers</strong> (2015), <strong>Studio 666</strong> (2022), <strong>The Batman</strong> (2022), <strong>Sonic The Hedgehog 2</strong> (2022), <strong>The Bad Guys</strong> (2022), <strong>The Power of the Dog</strong> (2021), <strong>The Sea Beast</strong> (2022), <strong>Prey</strong> (2022), <strong>Top Gun Maverick</strong> (2022), <strong>Nope</strong> (2022), <strong>Bullet Train</strong> (2022), <strong>All Quiet On The Western Front</strong> (2022), <strong>Weird The Al Yankovic Story</strong> (2022), <strong>The Banshees of Inisherin</strong> (2022).</p>

<p>I also watched individual seasons from various TV shows. Excellent ones include: <strong>Our Flag Means Death</strong> S1 (2021), <strong>Severance</strong> S1 (2022), <strong>Stranger Things</strong> S4 (2022), <strong>Avenue 5</strong> S1 (2021), <strong>Rome</strong> S1-S2 (2005-2007), <strong>House of the Dragon</strong> S1 (2022), <strong>The Lord of the Rings: The Rings of Power</strong> S1 (2022), <strong>Andor</strong> S1 (2022), <strong>The White Lotus</strong> S2 (2022).</p>

<h2>Gaming</h2>

<p>Most of my gaming in 2022 was on the Switch, playing <strong>Diablo 2</strong>. A lot of it was done on long flights and during various downtimes.</p>

<h2>Twitter and social media</h2>

<p>The end of 2022 marked the end of my active participation on <a href="https://twitter.com/brbcoding">Twitter</a>. While I'm only there for the dev side of things, I am not agreeable to the change in ownership. So I moved my active presence over to <a href="https://indieweb.social/@brbcoding">Mastodon</a>. If you want to stay in touch with my dev postings, follow me there.</p>

<p>I finished the year with 562 followers on Twitter and 59 followers on Mastodon.</p>

<h2>Things to look forward to in 2023</h2>

<p><strong>Development stuff</strong></p>

<p><strong>Laravel 10</strong> is coming out in the spring. <strong>Livewire 3</strong> should also be released at some point. <strong>SvelteKit 1.0</strong> was finally released in 2022 so I expect it will continue to evolve. I'm expecting <strong>Tauri</strong> to gain a larger share of the cross-platform development pie.</p>

<p>I would love to dip my toes in something new, such as Svelte development with <strong>Three.js</strong>, and even learning how to make games with <a href="https://godotengine.org/">Godot</a>.</p>

<p><strong>Technology</strong></p>

<p>AI tech such as ChatGPT and StableDiffusion will continue to improve. The future will be interesting. Will AI take everyone's jobs? I'm not too worried but I will keep a wary eye on this space.</p>

<p><strong>Projects</strong></p>

<p>These are some of the side projects I could work on in 2023, though realistically there's never enough time.</p>

<ul>
<li>Launch the <strong>Strava cycling app</strong>! It would be a miracle if I actually did it but who knows.</li>
<li>Finish the MVP for an <strong>expense tracking app</strong> I started in very early stage.</li>
<li>Make an app that <strong>collects links</strong> and <strong>broadcasts</strong> them weekly to various channels (RSS, Twitter, Mastodon, etc).</li>
<li><strong>Feed reader</strong> desktop app.</li>
<li>Continue building features into my <strong>SD Buddy</strong> project.</li>
</ul>

<p><strong>Health and fitness</strong></p>

<p>More than anything, I want to avoid further sports-related injuries in 2023. Cycling shall continue, of course, supplanted with other activities such as running and swimming.</p>

<p>And that about wraps it up for now. Once again, thank you for your readership dear friends, and may 2023 be gentler on all of us than the past few years.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/build-desktop-apps-tauri-php</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/build-desktop-apps-tauri-php" />
    <title>How to Build Desktop Apps with Tauri and PHP</title>
    <published>2022-08-25T00:00:00+00:00</published>
    <updated>2022-08-25T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Tauri is an exciting alternative to Electron for building cross-platform desktop applications.
While not as mature as Electron and still missing some features, it offers a fresh approach via its lightweight bundle
sizes and superior performance.

These......</summary>
    <content type="html"><![CDATA[
        <p><a href="https://tauri.app/">Tauri</a> is an exciting alternative to Electron for building cross-platform desktop applications.
While not as mature as Electron and still missing some features, it offers a fresh approach via its lightweight bundle
sizes and superior performance.</p>

<p>These improvements are partly facilitated by the Rust back-end, but on the flip side you might have to write Rust code
at some point. From my point of view the advantage here lies with Electron since it's built on Node/JavaScript which I'm
a lot more familiar with.</p>

<p>Tauri does have enough cool features (and promises of things to come) to draw me in. The documentation is pretty good
too. The best thing is that I was able to quickly scaffold a new project with a Vite + Svelte preset, then pull in
Tailwind CSS without a hitch. With Electron this would have taken me a lot longer.</p>

<h2>The need for PHP</h2>

<p>Desktop apps very often need to do more things than the front-end code can. Things like accessing system APIs such as
the filesystem, a database, or making HTTP requests.</p>

<p>The last one is the basis of a new idea I had for a desktop app. It required an HTTP client, and to my embarrassment I
failed to build a simple one in Rust in 2 hours despite GitHub Copilot helping me (or perhaps because of it).</p>

<p>The question that comes to mind is, why didn't I take the time to learn Rust? Well, friend, one does not simply learn
Rust in a couple of hours. Rust's paradigm is foreign enough to a PHP and JS user that it would require a longer period
of deep study - time that I don't have right now. Don't get me wrong, Rust is at the top of my list of future things to
learn, but currently I have other priorities.</p>

<p>Playing around with very basic <a href="https://tauri.app/v1/guides/features/command">Rust inside Tauri</a> I quickly realized that
I can call system commands from my app. The Svelte front-end can call Rust functions and pass arguments to them. The
Rust function can, in turn, call a system command and pass <em>it</em> those arguments.</p>

<p>Following the thought process, I figured that I could just as well use Rust to call a PHP executable in the form of
a <a href="https://www.php.net/manual/en/intro.phar.php">PHAR</a>. So I could build my HTTP client in PHP, package it into a PHAR
file which I would then bundle with the Tauri app and boom, mission accomplished!</p>

<p>Hold your horses, this is an imperfect solution. I'll get into the weeds of how all this works but feel free to skip to
the end if you want to hear the drawbacks.</p>

<h2>The architecture</h2>

<p>Next I'll explain the basic concept for 2-way communication between Tauri and a PHP app via serialized JSON data.</p>

<p>As I mentioned previously, the front-end can call Rust functions with arguments. Taken directly from
the <a href="https://tauri.app/v1/guides/features/command#passing-arguments">Tauri docs</a>:</p>

<pre><code class="language-js">invoke('my_custom_command', {invokeMessage: 'Hello!'})
</code></pre>

<p>The Rust function then calls a <code>.phar</code> command and forwards the arguments.</p>

<p>The <code>.phar</code> code accepts the command, parses the argument, does whatever logic it needs, then returns a
serialized/stringified JSON object back to the Rust function.</p>

<p>Finally, the Rust function returns the string to the front-end code that issued the command.</p>

<p>To retrieve the response on the front-end, chain a <code>.then</code> to the <code>invoke</code> command like so:</p>

<pre><code class="language-js">invoke('my_custom_command', {invokeMessage: 'Hello!'})
    .then((result: string) =&gt; {
        const jsonResult = JSON.parse(result)
    })
</code></pre>

<p>And now we're back in familiar territory, so we are free to do whatever we want with the response object.</p>

<h2>Building the PHAR</h2>

<p>I haven't worked a lot with PHP executables in the past (apart from consuming them) so I wasn't in the mood to build one
from scratch. Thankfully there's an excellent and powerful package named <a href="https://github.com/box-project/box">Box</a> that
can automate the build process.</p>

<p>On the Mac I used
the <a href="https://github.com/box-project/box/blob/master/doc/installation.md#homebrew">Homebrew installation</a>, so I can run
it from anywhere in the command line with <code>box</code>.</p>

<p>To compile a PHP project simply navigate to the project at the command line and run <code>box compile</code>. It will generate a
PHAR binary named the same as the entry point script. So if your app's entry point is <code>index.php</code> the binary will
be <code>index.phar</code>.</p>

<p>The beauty of Box is that it can compile anything with zero config (though you can certainly tweak
the <a href="https://github.com/box-project/box/blob/master/doc/configuration.md#base-path-base-path">configuration</a> in great
detail), from a simple 1-file PHP script to a full-blown Laravel app.</p>

<p>My advice, though, is to stick to the basics if you don't need the full power of a framework since it will have an
impact on the file size of the PHAR.</p>

<h2>Options for building PHP command line (CLI) apps</h2>

<p>There are 3 methods that I recommend:</p>

<ul>
<li><p>Plain PHP with Composer. Use <code>composer init</code> and follow the prompts to quickly scaffold a new project structure. Pull
in as few dependencies as you can get away with (ideally none) and rejoice in the tiny bundle size.</p></li>
<li><p><a href="https://symfony.com/doc/current/components/console.html">Symfony console component</a>. If you're a Symfony dev this is
an excellent choice, especially since Symfony components are a solid backbone for a lot of other frameworks including
Laravel. Unfortunately I have zero experience here so there's not much I can say.</p></li>
<li><p><a href="https://laravel-zero.com/">Laravel Zero</a> - a powerful Laravel-based CLI framework
by <a href="https://github.com/nunomaduro">Nuno Maduro</a>, Laravel core team member. This one's very powerful, and has
excellent documentation. It would be my go-to if I wanted to build something more complex than option #1.
Furthermore, Laravel Zero <a href="https://laravel-zero.com/docs/build-a-standalone-application">includes Box by default</a> so
you don't need to install it separately.</p></li>
</ul>

<h2>Create the PHP back-end application</h2>

<p>To keep it simple, I'll create a basic PHP project which takes a string argument when invoked, and responds with a JSON
encoded string.</p>

<pre><code class="language-bash">mkdir php-example &amp;&amp; cd php-example
composer init
</code></pre>

<p>This scaffolds an fresh project with a <code>composer.json</code> that looks like this (I changed the default generated namespace):</p>

<pre><code class="language-json">{
  "name": "breadthe/php-example",
  "description": "Example app that accepts a string argument and returns JSON encoded data",
  "type": "project",
  "license": "MIT",
  "autoload": {
    "psr-4": {
      "App\\": "src/"
    }
  },
  "require": {}
}
</code></pre>

<p>Run <code>composer install</code>.</p>

<p>Finally, create a <code>index.php</code> file in the root of the project as the entry-point script with the following:</p>

<pre><code class="language-php">&lt;?php
require __DIR__ . '/vendor/autoload.php';

// Get the first argument
$argument = $argv[1] ?? null;

if (empty($argument)) {
    echo json_encode([
        'error' =&gt; true,
        'message' =&gt; 'Argument expected',
    ]);

    return;
}

echo json_encode([
    'error' =&gt; false,
    'message' =&gt; "PHP says hi and thanks for the message [$argument]",
]);

return;
</code></pre>

<p>That's it on the PHP side. Now, this is the simplest example I could think of. If you want to pass more than one
argument you could use <code>$argc</code> to count the total arguments, then loop through them. Complex logic, additional classes,
services, etc. would then go into <code>src/</code>.</p>

<h2>Create the PHAR</h2>

<p>Assuming you have installed <a href="https://github.com/box-project/box">Box</a> globally on your system, all you need to do is
run <code>box compile</code> inside the project folder.</p>

<p>The result is a <code>index.phar</code> file that you can execute with <code>./index.phar some_argument</code>. It will
output <code>{"error":false,"message":"PHP says hi and thanks for the message [some_argument]"}</code>, or <code>{"error":true,"message":"Argument expected"}</code> if you don't specify
an argument. Later, Rust will run this file and capture the output.</p>

<h2>Create the Tauri app</h2>

<p>First install the <a href="https://tauri.app/v1/guides/getting-started/prerequisites/">prerequisites</a> which include Rust and a
bunch of dependencies.</p>

<p>Also install the Tauri CLI:</p>

<pre><code class="language-bash"># either
npm install --save-dev @tauri-apps/cli

# or
cargo install tauri-cli
</code></pre>

<h3>Create the front-end</h3>

<p>I prefer <a href="https://tauri.app/v1/guides/getting-started/setup/vite">Vite</a> + Svelte:</p>

<pre><code class="language-bash">npm create vite@latest

#‚úî Project name: ‚Ä¶ tauri-vite-php
#‚úî Select a framework: ‚Ä∫ svelte
#‚úî Select a variant: ‚Ä∫ svelte-ts

npm install
</code></pre>

<p>If using Svelte, update the <code>vite.config.ts</code> file like so (the Tauri docs omit the Svelte plugin):</p>

<pre><code class="language-js">import {defineConfig} from 'vite'
import {svelte} from '@sveltejs/vite-plugin-svelte'

// https://vitejs.dev/config/
export default defineConfig({
    plugins: [svelte()],
    // prevent vite from obscuring rust errors
    clearScreen: false,
    // Tauri expects a fixed port, fail if that port is not available
    server: {
        strictPort: true,
    },
    // to make use of `TAURI_PLATFORM`, `TAURI_ARCH`, `TAURI_FAMILY`,
    // `TAURI_PLATFORM_VERSION`, `TAURI_PLATFORM_TYPE` and `TAURI_DEBUG`
    // env variables
    envPrefix: ['VITE_', 'TAURI_'],
    build: {
        // Tauri supports es2021
        target: ['es2021', 'chrome100', 'safari13'],
        // don't minify for debug builds
        minify: !process.env.TAURI_DEBUG ? 'esbuild' : false,
        // produce sourcemaps for debug builds
        sourcemap: !!process.env.TAURI_DEBUG,
    },
})
</code></pre>

<h3>Create the Rust project</h3>

<p>Inside the Vite project folder scaffold the Tauri/Rust part of the project with the following options:</p>

<pre><code class="language-bash"># either
npm tauri init

# or
cargo tauri init

#‚úî What is your app name? ¬∑ tauri-vite-php
#‚úî What should the window title be? ¬∑ tauri-vite-php
#‚úî Where are your web assets (HTML/CSS/JS) located, relative to the "&lt;current dir&gt;/src-tauri/tauri.conf.json" file that will be created? ¬∑ ../dist
#‚úî What is the url of your dev server? ¬∑ http://localhost:5173
</code></pre>

<p>In <code>src-tauri/tauri.conf.json</code> update the <code>build</code> block to:</p>

<pre><code class="language-json">{
  "build": {
    // this command will execute when you run `tauri build`
    "beforeBuildCommand": "npm run build",
    // this command will execute when you run `tauri dev`
    "beforeDevCommand": "npm run dev",
    "devPath": "http://localhost:5173",
    "distDir": "../dist"
  },
</code></pre>

<p>Also update the build identifier from the default <code>com.tauri.dev</code> to a unique reverse-domain string:</p>

<pre><code class="language-json">{
  ...,
  "tauri": {
    ...
    "bundle": {
      ...
      "identifier": "com.tauri-vite-php.dev",
</code></pre>

<p>To run Rust commands from JavaScript an additional dependency is required:</p>

<pre><code class="language-bash">npm install @tauri-apps/api
</code></pre>

<p>Run the app in dev mode:</p>

<pre><code class="language-bash"># either
npm run tauri dev

# or
cargo tauri dev
</code></pre>

<p>To build for production use <code>npm run tauri build</code> or <code>cargo tauri dev</code>.</p>

<p>If everything went well this is how the new app looks:</p>

<p><img src="/assets/img/2022-08-25-tauri-vite.png" alt="Tauri Vite app" /></p>

<h2>Passing data from the front-end to Rust</h2>

<p>In <code>App.svelte</code> (or whatever file is the main entry-point to your front-end) I replaced the generated HTML with:</p>

<pre><code class="language-html">&lt;button on:click={sayHiToRust}&gt;Say hi to Rust&lt;/button&gt;
</code></pre>

<p>In the JS section:</p>

<pre><code class="language-javascript">import {invoke} from "@tauri-apps/api/tauri";

let rustResponse: string = "";

function sayHiToRust() {
    invoke("say_hi", {name: "Rust"}).then(
        (response) =&gt; (rustResponse = response)
    );
}
</code></pre>

<p>Next we're adding the Rust function that will handle the front-end request. In <code>src-tauri/src/main.rs</code>:</p>

<pre><code class="language-rust">tauri::Builder::default()
     .invoke_handler(tauri::generate_handler![say_hi])
     ...

#[tauri::command]
fn say_hi(name: String) {
    println!("Hello {} from JS!ü•≥", name);
}
</code></pre>

<p>Looking at the dev console we should see <code>Hello Rust from js!ü•≥</code>.</p>

<h2>Passing data from the front-end to Rust</h2>

<p>Now that we can pass data to Rust, let's get data back from it.</p>

<p>We'll extend the Rust function a bit to return a string:</p>

<pre><code class="language-rust">#[tauri::command]
fn say_hi(name: String) -&gt; String {
    println!("Hello {} from JS!ü•≥", name);

    let output = "Hi back from Rust".to_string();

    output
}
</code></pre>

<p>Back in <code>App.svelte</code> add to the HTML:</p>

<pre><code class="language-html">{#if rustResponse}
 &lt;div&gt;Rust response:&lt;/div&gt;
 &lt;div&gt;{rustResponse}&lt;/div&gt;
{/if}
</code></pre>

<p>Clicking the button will now display <code>Rust response: Hi back from Rust</code>.</p>

<p>So now we have 2-way communication between the front-end and Rust.</p>

<p>I went ahead and improved this a bit by adding a text field where you can type a message that will be sent to Rust. If you type "bla bla" Rust console will now say <code>JS says: bla bla</code>. I won't show the changes here but you can inspect them in the repository for the complete code.</p>

<h2>Putting it all together</h2>

<p>Now let's wire up PHP to Rust, and start by copying the <code>index.phar</code> created earlier to <code>src-tauri</code>.</p>

<p>Back in <code>src-tauri/src/main.rs</code> (accounting for the changes mentioned at the end of the previous section):</p>

<pre><code class="language-rust">#[tauri::command]
fn say_hi(message: String) -&gt; String {
    println!("JS says: {}", message);

    // execute the index.phar binary
    let output = std::process::Command::new("./index.phar")
        .arg(message)
        .output()
        .expect("failed to execute index.phar");

    // convert the output to a string
    let output = String::from_utf8(output.stdout).expect("failed to convert PHP output to string");

    output
}
</code></pre>

<p>Basically we're using Rust to execute a command and pass it an argument which is the message from the front-end. We then assign the output of the command (in this case a JSON string) to the <code>output</code> variable and returning it to the front-end which now displays <code>Rust response: {"error":false,"message":"PHP says hi and thanks for the message [hey]"}</code>.</p>

<p>Back in JS we can use <code>JSON.parse</code> to transform the PHP response back to a JSON object.</p>

<p>Here's what the final demo looks like after I added a few more bits and pieces (ignore the lack of styling):</p>

<p><img src="/assets/img/2022-08-25-tauri-vite-php.png" alt="Final Tauri Vite app" /></p>

<p>You can find the Tauri repo <a href="https://github.com/breadthe/tauri-vite-php">here</a> and the PHP repo <a href="https://github.com/breadthe/php-phar-example">here</a>. Note the Tauri repo already contains <code>index.phar</code> but feel free to rebuild it if you want.</p>

<h2>Drawbacks</h2>

<p>While there was a very positive reaction when I tweeted about this technique, it's not all roses and butterflies. Here are some of the drawbacks.</p>

<ul>
<li>üß™ <strong>Experimental</strong> for now. I'm not yet sure how viable this approach is. The reason I went in this direction is that I don't yet know enough Rust, but I'm hoping to change that. When that happens, I won't have need for PHP.</li>
<li>ü§î I'm 99% certain that <strong>PHP needs to be installed</strong> on the system running the app. I haven't built PHARs previously so despite being able to run the executable with <code>./index.phar</code> I still have a feeling that PHP is required. I haven't found much online to confirm or deny this. I don't have a dev machine without PHP to test this on either.</li>
<li>üöß Problems with the <strong>prod build</strong>. Currently, when launching the production app and clicking the button to pass the request to Rust and PHP, the app crashes. I pretty sure it's a result of the Tauri build config not referencing <code>index.phar</code> as a dependency. I hope to figure that out soon, since it's critical for what I'm planning to build.</li>
<li>üèãÔ∏è‚ÄçIt adds <strong>overhead</strong>. With a simple PHP script as shown here the response is instant, but I can see how a larger PHP app might slow things down a little. But I wouldn't worry too much since PHP is very fast these days.</li>
</ul>

<h2>Conclusion</h2>

<p>I'll admit that I'm quite enjoying this experiment. It may not lead anywhere, but it's still a valuable example of thinking outside the box. The issues I encountered might even push me sooner to learn some Rust.</p>

<p>I can see this technique being especially useful for building desktop tools for PHP developers. In this scenario the requirement for the PHP runtime might not be a deal-breaker.</p>

<p>I hope you enjoyed this guide and let me know on <a href="https://twitter.com/brbcoding/">Twitter</a> what you think.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/upgrading-legacy-php-project-notes</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/upgrading-legacy-php-project-notes" />
    <title>Notes on Upgrading a Legacy PHP 5.X Project to a Modern Stack in 2022</title>
    <published>2022-06-25T00:00:00+00:00</published>
    <updated>2022-06-25T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I talked before about BankAlt.com, the first side-project with dynamic PHP/MySQL functionality I ever shipped. In that article I expressed my desire to resurrect the legacy PHP 5.X project and make it run on PHP 8.1.

What follows is a list of notes I......</summary>
    <content type="html"><![CDATA[
        <p>I talked before about <a href="/blog/my-first-side-project/">BankAlt.com</a>, the first side-project with dynamic PHP/MySQL functionality I ever shipped. In that article I expressed my desire to resurrect the legacy PHP 5.X project and make it run on PHP 8.1.</p>

<p>What follows is a list of notes I made while reviving BankAlt. It is by no means an exhaustive guide, rather a list of steps I took to declare myself satisfied with the outcome.</p>

<h2>The framework</h2>

<p>BankAlt was created circa 2009 when it was still acceptable to roll your own framework. As a result, it is based on a PHP mini-framework someone at work had written. I simplified it even further since I didn't need all the features of the original.</p>

<p>The code is all procedural, which is fine for such a small project. It does not implement MVC.</p>

<h2>The stack</h2>

<ul>
<li>Apache</li>
<li>PHP 5.2 (or 5.3) - hard to tell exactly</li>
<li>MySQL 5.1.20, with lots of stored procedures</li>
<li>jQuery</li>
<li>plain CSS</li>
<li>hosted on a shared server run by a friend</li>
<li>no SSL</li>
</ul>

<h2>Revival goals</h2>

<p>Why revive this project at all? Why not let it fade into memory? Nostalgia. BankAlt was a labor of love and very dear to me at the time. Besides, I was curious how much of a lift it would be to update it to a modern 2022 stack.</p>

<p><strong>Main goals:</strong></p>

<ul>
<li>run in a local environment on Nginx</li>
<li>replace SVN with Git</li>
<li>use Composer to manage dependencies</li>
<li>get it working on PHP 8.1</li>
<li>upgrade the database from MySQL 5.1 to 8</li>
<li>refactor deprecated code + folder structure</li>
<li>do NOT rewrite the code if I don't need to</li>
</ul>

<p><strong>Bonus goals:</strong></p>

<ul>
<li>replace msqli with PDO</li>
<li>use modern tooling to bundle JS + CSS</li>
<li>replace jQuery with Alpine.js</li>
</ul>

<p><strong>Super bonus goal</strong> (that will likely never be attempted): rebuild it on Laravel with Livewire.</p>

<h2>Local environment setup</h2>

<p><strong>Note</strong> All my coding is done on a Mac, so if you're on a different platform this won't apply.</p>

<p>Since I'm already using <a href="https://laravel.com/docs/9.x/valet#main-content">Valet</a> for my local environment, I wanted to use it for this as well. You can run pretty much any PHP project locally with it.</p>

<p>For the local database server I used <a href="https://dbngin.com/">DBngin</a> running on localhost.</p>

<p>Valet uses Nginx as the webserver.</p>

<h2>Replace SVN with Git</h2>

<p>Originally, I built BankAlt on a Windows machine. The code was versioned using SVN, specifically <a href="https://tortoisesvn.net/">TortoiseSVN</a>.</p>

<p>Before switching to Git, I wanted to get rid of all traces of SVN. To do this, I deleted all the <code>.svn</code> folders from the codebase. Unlike Git which creates a single <code>.git</code> file in the root of the project, SVN creates a <code>.svn</code> folder in each nested folder that is under version control.</p>

<p>Next, add the entire project to Git by running <code>git init</code>, followed by <code>git add . &amp;&amp; git commit -m "init"</code></p>

<p>Add a <code>.gitignore</code> file in the project root with the following contents:</p>

<pre><code>.env
/vendor
/storage
</code></pre>

<ul>
<li><code>.env</code> contains actual credentials, so it should never be under version control</li>
<li><code>vendor</code> is Composer's default package vendor location which, under 99.99% of situations, should not be version controlled</li>
<li><code>storage</code> in this case contains only one subfolder <code>logs</code> which should not be version controlled for obvious reasonss</li>
</ul>

<p>Push to GitHub.</p>

<p>Phew, now I can safely start slicing and dicing the codebase.</p>

<h2>Remove PHP closing tags</h2>

<p>One of the first thing I did, just because it was griding my gears, was to remove all the PHP closing tags from the code. You see, back in the day it wasn't universally agreed upon whether to use the closing tags or not. So now I deleted all the <code>?&gt;</code> tags and made sure every <code>.php</code> script ended in a blank line.</p>

<h2>Replace hardcoded DB credentials with .env file</h2>

<p>Another big legacy <em>faux pas</em> was to hardcode the database credentials in the code AND VERSION CONTROL IT. So that had to be refactored pronto to a modern <code>.env</code> file.</p>

<p>First I tried to build my own <code>.env</code> parser. Very soon I realized that it's harder than it sounds, so I decided to use an off-the-shelf popular package called <a href="https://github.com/vlucas/phpdotenv">vlucas/dotenv</a>.</p>

<p>But wait, this requires Composer. Fast forward... After adding Composer:</p>

<pre><code class="language-php">// call this after the autoloader
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv-&gt;load();
</code></pre>

<p>Now access <code>.env</code> variables from anywhere in the code with <code>$_ENV['DB_HOST']</code> etc.</p>

<p>I also added a <code>.env.example</code> file to the project root containing:</p>

<pre><code>APP_NAME=BankAlt
APP_ENV=local
APP_DEBUG=true
APP_URL=https://bankalt-2022.test

DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=
DB_USERNAME=root
DB_PASSWORD=
</code></pre>

<p>Notice how it looks identical to a Laravel project. This is by intent.</p>

<h2>Add Composer</h2>

<p>Run <code>composer init</code> in the project root.</p>

<p>Allow it to add PSR-4 autoloading from <code>src/</code>.</p>

<p>Originally the project had an entrypoint via <code>index.php</code> in the root, with logic inside <code>module</code> and <code>include</code> folders. I moved those two folders to <code>src</code>.</p>

<p>Add this line at the top of <code>index.php</code>:</p>

<pre><code class="language-php">require __DIR__ . '/vendor/autoload.php';
</code></pre>

<p>Here's what <code>composer.json</code> looks like:</p>

<pre><code class="language-json">{
    "name": "xxx/xxx",
    "description": "2022 edition of the original BankAlt.com code",
    "type": "project",
    "autoload": {
        "psr-4": {
            "App\\": "src/"
        }
    },
    "authors": [
        {
            "name": "xxx",
            "email": "xxx@xxx.xxx"
        }
    ],
    "require": {
        "vlucas/phpdotenv": "^5.4"
    }
}
</code></pre>

<h2>Use a Laravel-like directory structure</h2>

<p>The original project structure was a bit archaic:</p>

<pre><code class="language-bash">.svn
css
data
images
include
module
index.php
application.inc.php
</code></pre>

<p>I changed it to more closely resemble a Laravel project:</p>

<ul>
<li>Make <code>public</code> folder and move old <code>css</code>, <code>images</code>, <code>include/js</code> to it.</li>
<li>Rename <code>images</code> to <code>img</code>.</li>
<li>Move the old <code>application.inc.php</code> (aka bootloader) to <code>src</code>.</li>
<li>Move <code>include</code> folder to <code>src</code>.</li>
</ul>

<p>The new structure looks like this:</p>

<pre><code class="language-bash">.git
public
src
storage
vendor
.gitignore
.env
.env.example
composer.json
composer.lock
index.php
</code></pre>

<h2>Fix asset paths</h2>

<p>Relocating the CSS + JS assets broke all the static links, so I had to search/replace the paths globally.</p>

<h2>Replace <code>define</code> constants with <code>const</code></h2>

<p>Read this <a href="https://stackoverflow.com/a/3193704">excellent explanation</a> on why you might prefer <code>const</code> over <code>define</code>, especially in a modern codebase.</p>

<pre><code class="language-php">define('_DIR_MODULE',   _DIR . 'module/');
// =&gt;
const _DIR_INCLUDE = __DIR__ . '/include/';
</code></pre>

<h2>Restore DB, stored procedures, and one function</h2>

<p>Thank goodness for keeping solid backups of ALL the data, including stored procedures! The zip archive contained the entire codebase, graphic assets, full database backups with the SQL tables, stored procedures, and functions, as well as raw design assets (PSD, etc) that should have lived elsewhere, but ultimately I was glad I had them all in one place.</p>

<p>The app is heavily reliant on stored procedures, 43 in fact. Those were the days when I preferred to put a lot of the business logic in stored procedures.</p>

<p>I created a new MySQL 8.1 database and restored from the backup easily. There were no issues restoring SQL exported from MySQL 5.1. I also removed unused stored procedures (present in the DB but not used in the code). Trimmed them down from 43 -> 16.</p>

<p>Later I realized that a stored procedure was also using a stored function. Running it gave a cryptic error.</p>

<pre><code>This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable)
</code></pre>

<p>A quick web-search later yielded these 2 solutions (I chose #1, as #2 appears to be less safe):</p>

<pre><code class="language-sql">/* before */    
DELIMITER $$

CREATE FUNCTION `bla_bla`() RETURNS varchar(255) CHARSET utf8
-- function body


/* after - solution 1 */    
DELIMITER $$

CREATE FUNCTION `bla_bla`() RETURNS varchar(255) CHARSET utf8 DETERMINISTIC
-- function body


/* after - solution 2 */    
DELIMITER $$

SET GLOBAL log_bin_trust_function_creators = 1;

CREATE FUNCTION `bla_bla`() RETURNS varchar(255) CHARSET utf8
-- function body
</code></pre>

<h2>Add basic logging</h2>

<p>With respect to keeping dependencies to a minimum I decided to throw together a quick logging class. I made it a singleton, and it does one thing only: appends a new line to the <code>error.log</code> file.</p>

<pre><code class="language-php">namespace App;

/**
 * Barebones error logging class
 * 
 * Location: &lt;project root&gt;/src/Log.php
 * 
 * Usage: 
 * App\Log::error('Your error message');
 * 
 * Output (&lt;project root&gt;/storage/logs/error.log):
 * [2022-04-02 16:20:46] Your error message
 */
class Log
{
    private const PATH = __DIR__ . '/../storage/logs';
    private const FILENAME = 'error.log';

    private static self|null $singleton = null;

    protected function __construct()
    {
        self::createStorageFolderIfNotExists();
    }

    public static function singleton(): ?Log
    {
        if (self::$singleton === null) {
            self::$singleton = new self;
        }

        return self::$singleton;
    }

    public static function error(string $message): void
    {
        (new self)-&gt;writeError($message);
    }

    private static function createStorageFolderIfNotExists(): void
    {
        if (!file_exists(self::PATH)) {
            mkdir(self::PATH, 0755, true);
        }
    }

    private function writeError(string $message): void
    {
        $line = '['. self::timestamp() . '] ' . $message;
        $filename = self::PATH . DIRECTORY_SEPARATOR . self::FILENAME;
        file_put_contents($filename, $line, FILE_APPEND);
    }

    private static function timestamp(): string
    {
        return date('Y-m-d H:i:s');
    }
}
</code></pre>

<p>Feel free to use it in your own code. Here's the <a href="https://gist.github.com/breadthe/b8a7952bf2bbdf4f6df33ac75ec870f8">gist</a>.</p>

<h2>Fix more image links</h2>

<p>Now that the stored procedures are in place more pieces of the site are beginning to work. The professions pages (containing datatables) work nicely but all the images are missing.</p>

<p>These come from JS/Ajax, so the src paths need to be updated in all the <code>.js</code> files. What used to be <code>/images/</code> is now <code>/img/</code>.</p>

<h2>Fix <code>addslashes</code> deprecation... the lazy way</h2>

<p>There was liberal usage of <code>addslashes($some_string_variable)</code> throughout the app (in ~100 places). Unfortunately I was getting <em>"Deprecated:  addslashes(): Passing null to parameter #1 ($string) of type string is deprecated"</em> errors in various places. I guess in PHP 5.X it wasn't a problem to pass <code>null</code> to this function, but 8.1 complains.</p>

<p>Sometimes it's ok to be lazy to quickly fix or get around a problem. Instead of putting null checks in all 100 places I opted to create a similarly-named global function called <code>__addslashes</code> with built-in null checking. Then I did a global search-replace of all instances of <code>addslashes</code> with the new <code>__addslashes</code> function.</p>

<pre><code class="language-php">function __addslashes(string|null $string): string
{
    return addslashes($string ?? '');
}
</code></pre>

<h2>Fix <code>preg_replace</code> deprecation</h2>

<p>I came across a couple functions that were calling <code>preg_replace</code> without handling null strings. Quick fix here: typehint and initialize the parameter with empty string, and return early if null.</p>

<pre><code class="language-php">// before
function blaBla($q)
{
    $patterns = [...];
    $replacements = [...];
    return preg_replace($patterns, $replacements, $q);
}

//after
function blaBla(string|null $q = '')
{
    if (!$q) return ''; // put this line at the top

    //...
}
</code></pre>

<h2>Admin section</h2>

<p>Because it is hidden from the public, I had totally forgotten about the admin/CMS section. It has tooling for managing site content such as items, images, icons and a few other bits.</p>

<p>Part of its functionality depends on 3rd party sites (from where I scraped item icons for example), but those links are no longer valid. That's just fine, as this site will remain frozen in time and so will the admin section.</p>

<h2>Other considerations &amp; potential improvements</h2>

<p>If this were an operational project, I would strongly consider the following:</p>

<ul>
<li>Replace <code>msqli</code> with <code>PDO</code></li>
<li>Make the DB connector class a singleton instead of instantiating it all over the place</li>
<li>Bundle JS + CSS with a modern tool (such as Vite or Mix)</li>
<li>Replace jQuery with <a href="alpinejs.dev/">Alpine.js</a></li>
<li>Generate migrations for the DB tables</li>
<li>Pull in a package that can execute DB migration</li>
<li>Pull in a testing package and write some tests</li>
</ul>

<h2>Even more improvements</h2>

<p>One day when I'm very old and bored I might re-build BankAlt from scratch with Laravel/TALL stack, but for now the effort is not justified.</p>

<h2>Closing words</h2>

<p>I went into this revival with general goals in mind but unsure what exactly to expect. I am very happy to have accomplished 80-90% of my goals in a couple of hours of surgical hacking.</p>

<p>Modernizing a 10-12 year old PHP codebase can be done in stages, starting with the lowest hanging fruit, and this is what I've done here. I employed Composer, limited dependencies to just one, and updated the project structure to match Laravel. The main goal was to load the project in a browser locally and be able to navigate all the pages without errors. This mission was accomplished successfully in less time than I had anticipated.</p>

<p>There's always more that could be improved, but I will hang my hat up here and call it a job well done.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/refactor-laravel-eloquent-conditions-to-trait</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/refactor-laravel-eloquent-conditions-to-trait" />
    <title>Refactor Laravel Eloquent Query Conditions to a Trait</title>
    <published>2022-06-08T00:00:00+00:00</published>
    <updated>2022-06-08T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">My recent tweet on refactoring Laravel Eloquent query conditions to a trait proved popular so here it is with a little more context, in permanent form.



My biggest side-project at the moment (NextBike) is about visualizing cycling data from Strava&#039;s......</summary>
    <content type="html"><![CDATA[
        <p>My recent <a href="https://twitter.com/brbcoding/status/1534209246883192834">tweet on refactoring Laravel Eloquent query conditions to a trait</a> proved popular so here it is with a little more context, in permanent form.</p>

<h2>Intro</h2>

<p>My biggest side-project at the moment (<a href="https://nextbike.mumu.pw">NextBike</a>) is about visualizing cycling data from Strava's API. It's main feature is a searchable, filterable, sortable datatable of all your cycling activities.</p>

<p>This table currently has 18 filters, but it didn't start like that. At first it had 2, then I kept adding more, and I will likely add even more. The table is also a Livewire component containing most of the logic. It reached 500+ lines before I decided it was time to extract certain parts to slim it down and more easily locate the associated logic.</p>

<p>People on Twitter have asked <em>porque no</em> pipeline structure or custom query builder? Sure, why not. Traits are <strong>one way</strong> of refactoring it, and <strong>likely not the best way</strong>. It's what I like right now and what works for me.</p>

<p><strong>WARNING</strong> NextBike is in beta, use at your risk. The UX is not fully fleshed out and may be confusing initially. Be aware that you can delete your account with all the data if you wish.</p>

<h2>The initial query</h2>

<p>There's more detail here than in the tweet because I want to show more types of filters. All the datatable logic is contained within the <code>app/Http/Livewire/Rides.php</code> Livewire component.</p>

<pre><code class="language-php">use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Livewire\Component;
use Livewire\WithPagination;

class Rides extends Component
{
    use WithPagination;

    const PER_PAGE = 20; // rides per page, this will become a configurable property later

    public $sortField = 'start_date';
    public $sortDirection = 'desc';

    // Filter properties
    public $year;
    public $bike;
    public $frame;
    public $stravaIds;

    // Provides the data for the table
    private function getRides(): LengthAwarePaginator
    {
        $rides = Ride::query()-&gt;with('bike')
            -&gt;where(['user_id' =&gt; $this-&gt;userId])

            // filter YEAR
            -&gt;when(
                $this-&gt;year &amp;&amp; $this-&gt;year !== 'all',
                fn($query) =&gt; $query-&gt;whereRaw(
                    'YEAR(start_date_local) = ?', [$this-&gt;year]
                )
            )

            // filter BIKE
            -&gt;when(
                $this-&gt;bike &gt; 0 &amp;&amp; $this-&gt;bike !== 'all',
                fn($query) =&gt; $query
                    -&gt;has('bike')
                    -&gt;where('bike_id', $this-&gt;bike)
            )

            // filter bike FRAME (on a relationship)
            -&gt;when(
                $this-&gt;frame &gt; 0 &amp;&amp; $this-&gt;frame !== 'all',
                fn($query) =&gt; $query-&gt;whereHas('bike', fn($query) =&gt; $query-&gt;where('bikes.frame_type', $this-&gt;frame))
            )

            // filter STRAVA IDS (Example: 123456789,987654321)
            -&gt;when(
                $this-&gt;stravaIds,
                fn($query) =&gt; $query-&gt;whereIn('id', Arr::map(explode(',', $this-&gt;stravaIds), fn($id) =&gt; trim($id)))
            )

            // + 14 other filters... this can get long

            // sort the results
            -&gt;when(
                $this-&gt;sortField,
                fn($query) =&gt; $query
                    -&gt;orderBy(
                        $this-&gt;sortField, $this-&gt;sortDirection
                    )
            );

        return $rides-&gt;paginate(self::PER_PAGE);
    }
}
</code></pre>

<h2>Refactoring to a trait</h2>

<p>The reason I picked a trait and not something else is because, well, I just love traits in PHP. They are multipurpose by allowing not just multiple inheritance, but also providing a simple way to extract code and logic.</p>

<p>Now of course, there's the danger that one might get confused by properties and methods that don't seem to be defined in the class that imports a trait, but this can be inferred by checking which traits are imported, and/or by clicking through to the property or method definition in the IDE.</p>

<p>Laravel itself (and much of the ecosystem) makes heavy use of traits, and by giving them intuitive names makes it straightforward to understand their purpose. See for example the <code>Livewire\WithPagination</code> trait in the code example above.</p>

<p>To refactor, I've extracted the conditional <code>-&gt;when()</code> parts of the Eloquent query, the filtering logic, associated properties, and methods from <code>app/Http/Livewire/Rides.php</code> to <code>app/Http/Traits/Filters/WithFilters.php</code>.</p>

<pre><code class="language-php">namespace App\Http\Livewire;

use App\Http\Traits\WithFilters;
use Livewire\Component;
use Livewire\WithPagination;

class Rides extends Component
{
    use WithPagination, WithFilters;

    const PER_PAGE = 20; // rides per page, this will become a configurable property later

    public $sortField = 'start_date';
    public $sortDirection = 'desc';

    private function getRides(): LengthAwarePaginator
    {
        $baseQuery = Ride::query()-&gt;with('bike')
            -&gt;where(['user_id' =&gt; $this-&gt;userId]);

        $rides = $this-&gt;withFilters($baseQuery)

            // sort
            -&gt;when(
                $this-&gt;sortField,
                fn($query) =&gt; $query
                    -&gt;orderBy(
                        $this-&gt;sortField, $this-&gt;sortDirection
                    )
            );

        return $rides-&gt;paginate(self::PER_PAGE);
    }
}
</code></pre>

<p>And this is how the trait looks (showing only the method containing the Eloquent condition chain).</p>

<pre><code class="language-php">namespace App\Http\Traits\Filters;

use Illuminate\Database\Eloquent\Builder;

trait WithFilters
{
    // Filter properties
    public $year;
    public $bike;
    public $frame;
    public $stravaIds;

    // Only 4/18 filters shown in this example
    private function withFilters(Builder $query): Builder
    {
        return $query

            // filter YEAR
            -&gt;when(
                $this-&gt;year &amp;&amp; $this-&gt;year !== 'all',
                fn($query) =&gt; $query-&gt;whereRaw(
                    'YEAR(start_date_local) = ?', [$this-&gt;year]
                )
            )

            // filter BIKE
            -&gt;when(
                $this-&gt;bike &gt; 0 &amp;&amp; $this-&gt;bike !== 'all',
                fn($query) =&gt; $query
                    -&gt;has('bike')
                    -&gt;where('bike_id', $this-&gt;bike)
            )

            // filter bike FRAME (on a relationship)
            -&gt;when(
                $this-&gt;frame &gt; 0 &amp;&amp; $this-&gt;frame !== 'all',
                fn($query) =&gt; $query-&gt;whereHas('bike', fn($query) =&gt; $query-&gt;where('bikes.frame_type', $this-&gt;frame))
            )

            // filter STRAVA IDS (Example: 123456789,987654321)
            -&gt;when(
                $this-&gt;stravaIds,
                fn($query) =&gt; $query-&gt;whereIn('id', Arr::map(explode(',', $this-&gt;stravaIds), fn($id) =&gt; trim($id)))
            )

            // + 14 other filters...
            ;
    }
}
</code></pre>

<p>Note how the <code>withFilters()</code> method accepts and returns an Eloquent <code>Builder</code> instance, allowing it to be chained in the original/parent query. Incidentally I didn't specify the return type in the tweet screenshot.</p>

<p>So that's all there is to it. This pattern can be used to extract other things from a big Laravel Eloquent/DB query when it makes sense. Remember, it may not be the best method, but <em>it could be the best for you</em>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/enable-experimental-js-css-features-electron</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/enable-experimental-js-css-features-electron" />
    <title>Enable Experimental JS and CSS Features in Electron</title>
    <published>2022-05-21T00:00:00+00:00</published>
    <updated>2022-05-21T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Electron uses the Chromium engine for rendering. This is the same engine that powers the Chrome browser.

Sometimes you might run into a situation where a certain JavaScript or CSS feature that your browser clearly supports does not seem to work with......</summary>
    <content type="html"><![CDATA[
        <p>Electron uses the <a href="https://www.chromium.org/chromium-projects/">Chromium</a> engine for rendering. This is the same engine that powers the Chrome browser.</p>

<p>Sometimes you might run into a situation where a certain JavaScript or CSS feature that your browser clearly supports does not seem to work with Electron.</p>

<p>A good example is <code>aspect-ratio</code> which is not supported by Electron 11 which runs a version of Chromium &lt; v88. <a href="https://caniuse.com/?search=aspect-ratio">Chrome added this feature in v88</a>.</p>

<p>You can use this technique for any such feature. Here's how I enabled <code>aspect-ratio</code> for an Electron 11 project.</p>

<p>In the Electron main process entry file (<code>src/index.js</code> in my case) add this line before <code>app.whenReady()</code>.</p>

<pre><code class="language-js">app.commandLine.appendSwitch('enable-experimental-web-platform-features');

app.whenReady().then(() =&gt; {
...
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/carbon-php-practical-examples</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/carbon-php-practical-examples" />
    <title>Carbon PHP Practical Examples</title>
    <published>2022-04-17T00:00:00+00:00</published>
    <updated>2022-04-17T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I&#039;ve been working and experimenting a lot lately with Carbon, the sublime PHP date and time utility library. I&#039;ve tweeted a lot of Carbon tips and decided to collect all these tips into a permanent article.



If you&#039;re using Laravel, Carbon is included......</summary>
    <content type="html"><![CDATA[
        <p>I've been working and experimenting a lot lately with <a href="https://carbon.nesbot.com/">Carbon</a>, the sublime PHP date and time utility library. I've tweeted a lot of Carbon tips and decided to collect all these tips into a permanent article.</p>

<h2>Laravel - Carbon\Carbon vs Illuminate\Support\Carbon</h2>

<p>If you're using Laravel, Carbon is included in the framework by default. There are, however, two versions of it: <code>Carbon\Carbon</code> and <code>Illuminate\Support\Carbon</code>. Which one to use?</p>

<p>Based on my research, it appears that it's safe to use either. Personally I tend to use <code>Carbon\Carbon</code> because it looks cleaner when I import it. The <code>Illuminate</code> version is a wrapper around the official Carbon library, for backward/forward compatibility.</p>

<h2>Laravel - now() vs today()</h2>

<p>Laravel offers several date/time shortcuts. The most commonly used are <code>now()</code> and <code>today()</code>.</p>

<pre><code class="language-php">// Carbon\Carbon::now() vs now() -- they are functionally equivalent but...

Carbon\Carbon::now(); // returns an instance of Carbon\Carbon
now(); // returns an instance of Illuminate\Support\Carbon

Carbon\Carbon::today(); // returns an instance of Carbon\Carbon
today(); // returns an instance of Illuminate\Support\Carbon

// Difference between now() and today()

now(); // returns the full timestamp
// =&gt; Illuminate\Support\Carbon @1648647277 {#3867
//     date: 2022-03-30 13:34:37.437085 UTC (+00:00),
//   }

today(); // returns only the date part
// =&gt; Illuminate\Support\Carbon @1648598400 {#3870
//     date: 2022-03-30 00:00:00.0 UTC (+00:00),
//   }
</code></pre>

<h2>Timezone considerations</h2>

<p>When working with any date/time helper, be aware that by default the result is always expressed in UTC (universal) time. UTC is the format most commonly used to  store timestamps in the database (with some exceptions).</p>

<p>As a consequence, using <code>now()</code> to retrieve a timestamp for a user who is not in the UTC timezone might give unwanted results.</p>

<p>One technique to show each user their local timezone is to:
- store the timestamp in UTC for each user record
- store the local timezone for each user (Example: <code>'America/Chicago'</code>)
- perform timezone conversion as shown below to display local time</p>

<pre><code class="language-php">now(); // returns UTC time
// =&gt; Illuminate\Support\Carbon @1648647744 {#3864
//     date: 2022-03-30 13:42:24.742152 UTC (+00:00),
//   }

now()-&gt;setTimezone('America/Chicago'); // returns local time
now()-&gt;tz('America/Chicago'); // alias
now('America/Chicago'); // alias
// =&gt; Illuminate\Support\Carbon @1648647747 {#3865
//     date: 2022-03-30 08:42:27.037484 America/Chicago (-05:00),
//   }

today()-&gt;setTimezone('America/Chicago'); // returns local date
today()-&gt;tz('America/Chicago'); // alias
today('America/Chicago'); // alias
// =&gt; Illuminate\Support\Carbon @1648598400 {#3871
//     date: 2022-03-29 19:00:00.0 America/Chicago (-05:00),
//   }

now()-&gt;tz; // gets the current timezone
// =&gt; Carbon\CarbonTimeZone {#1112
//      timezone: UTC (+00:00),
//    }
now('America/Chicago')-&gt;tz;
// =&gt; Carbon\CarbonTimeZone {#1107
//      timezone: America/Chicago (-05:00),
//    }

// These are the same; all return "2022-03-30" UTC
date('Y-m-d'); // native PHP
now()-&gt;format('Y-m-d');
now()-&gt;toDateString(); // nice shortcut for the above
</code></pre>

<p>In Laravel Eloquent:</p>

<pre><code class="language-php">$userId = 123;
$user = User::find($userId)-&gt;created_at;
</code></pre>

<h2>Calculate the local time across timezones</h2>

<p>Let's assume we are in Hawaii and we are interviewing with someone in Melbourne, Australia. The interviewer has given us their local date and time, but we want to find out what our local time will be. Carbon can make that conversion.</p>

<pre><code class="language-php">// 12 PM in Melbourne, Australia
$auDateTime = 'Thursday Feb 9 2023 12:00:00';
$auTimezone = 'Australia/Melbourne';

$auTime = Carbon\CarbonImmutable::createFromTimeString($auDateTime, $auTimezone);

$localTimezone = 'US/Hawaii';
$localDateTime = $auTime-&gt;timezone($localTimezone)-&gt;toDateTimeString();
// =&gt; "2023-02-08 15:00:00"
// 3 PM in Hawaii, USA
</code></pre>

<h2>Start/end of week/month/year</h2>

<p>Every developer will eventually need to calculate week/month/year boundaries (start/end dates). Carbon makes this easy.</p>

<p><strong>Note</strong> Consider using timezone conversion, otherwise you might not get the desired result if the local time is only a few hours away from UTC. In other words, it might be "tomorrow" in UTC, but still "today" in local time.</p>

<pre><code class="language-php">$today = Carbon\Carbon::now()-&gt;setTimezone('America/Chicago');
// =&gt; Carbon\Carbon @1649218375 {#1110
//      date: 2022-04-05 23:12:55.846210 America/Chicago (-05:00),
//    }

$startOfWeek = $today-&gt;startOfWeek()-&gt;toDateString(); // =&gt; "2022-04-04"
$endOfWeek = $today-&gt;endOfWeek()-&gt;toDateString(); // =&gt; "2022-04-10"

$startOfMonth = $today-&gt;startOfMonth()-&gt;toDateString(); // =&gt; "2022-04-01"
$endOfMonth = $today-&gt;endOfMonth()-&gt;toDateString(); // =&gt; "2022-04-30"

$startOfYear = $today-&gt;startOfYear()-&gt;toDateString(); // =&gt; "2022-01-01"
$endOfYear = $today-&gt;endOfYear()-&gt;toDateString(); // =&gt; "2022-12-31"
</code></pre>

<h2>First/last day of month using fluid string constructors</h2>

<p>Carbon offers a neat way of building date/time objects. One of them is the fluid string constructor which lets you use natural English language to build your object.</p>

<pre><code class="language-php">use Carbon\Carbon;

// today = 2022-04-07
// returns UTC DateTime object
// chain -&gt;toDateString() to get only the date part
Carbon::make('first day of this month'); // 2022-04-01
Carbon::make('last day of this month'); // 2022-04-30

Carbon::make('first day of last month'); // 2022-03-01
Carbon::make('last day of last month'); // 2022-03-31

Carbon::make('first day of next month'); // 2022-05-01
Carbon::make('last day of next month'); // 2022-05-31
</code></pre>

<h2>Get total seconds in a string interval</h2>

<p>This technique is extremely powerful for calculating total units for a specified interval.</p>

<p>Here's how I used it in a Laravel project. I'm tracking bicycle rides and each record in the database has a <code>INT duration</code> field in seconds. The user should be able to filter rides of a certain duration, using a user-friendly string like <code>1h30m</code>. I can use <code>CarbonInterval</code> to easily perform the conversion to seconds which I can then use to query the database.</p>

<pre><code class="language-php">use Carbon\CarbonInterval;

// Several ways to initialize the interval:
CarbonInterval::fromString('1h30m')-&gt;total('minutes');
CarbonInterval::make('1h30m')-&gt;total('minutes');
CarbonInterval::make('1h30m')-&gt;totalMinutes;
// =&gt; 90

// Many ways to write the fluid string:
// '1h 30m'
// '1hour30minutes'
// '1 hour 30 minute'
// '1 hour 30 minutes'
// '1 hour and 30 minutes'

CarbonInterval::fromString('1h 30m')-&gt;total('seconds');
// 5400

// Also
$seconds = CarbonInterval::fromString('1hour30minutes')-&gt;total('seconds');
$seconds = CarbonInterval::fromString('1 hour 30 minutes')-&gt;total('seconds');
$seconds = CarbonInterval::fromString('1 hour and 30 minutes')-&gt;total('seconds');
$seconds = CarbonInterval::fromString('1 h 30 m')-&gt;total('seconds');
$seconds = CarbonInterval::fromString('1 h 30 m')-&gt;totalSeconds;
</code></pre>

<p>You can obtain the reverse as shown next. Note that the output string is not exactly the same as the input (I need to figure out if this is possible). More on <code>cascade()</code> in the next sections.</p>

<pre><code class="language-php">use Carbon\CarbonInterval;

CarbonInterval::fromString('5400 seconds')-&gt;cascade()-&gt;forHumans(null, true);
CarbonInterval::fromString('5400seconds')-&gt;cascade()-&gt;forHumans(null, true);
CarbonInterval::fromString('5400s')-&gt;cascade()-&gt;forHumans(null, true);
// =&gt; "1h 30m"
</code></pre>

<p>Here are simplified examples of how you might use this with Laravel Eloquent.</p>

<pre><code class="language-php">/**  
 * Laravel Eloquent examples
 * - The "1h30m" string may come from a user-friendly input
 * - The duration DB column is in seconds
 */
use Carbon\CarbonInterval;

// Retrieve all rides at least 1h30m long
$seconds = CarbonInterval::fromString('1h30m')-&gt;totalSeconds;
Rides::where(['user_id' =&gt; $user-&gt;id, ['duration', '&gt;=', $seconds]])-&gt;get();

// Retrieve rides between 30m and 2h long
$minDuration = CarbonInterval::fromString('30m')-&gt;totalSeconds;
$maxDuration = CarbonInterval::fromString('2h')-&gt;totalSeconds;
Rides::where('user_id', $user-&gt;id)-&gt;whereBetween('duration', [$minDuration, $maxDuration])-&gt;get();
</code></pre>

<h2>CarbonInterval factor</h2>

<p>One gotcha when using <code>CarbonInterval</code> factors is that it will return 336 days in a year instead of 365 as most of us are used to. Carbon's month also has 28 days. How is that?</p>

<pre><code class="language-php">use Carbon\CarbonInterval;

// Retrieve the default factors for
CarbonInterval::getFactor('days', 'week'); // days in a week: 7
CarbonInterval::getFactor('weeks', 'month'); // weeks in a month: 4
CarbonInterval::getFactor('months', 'year'); // months in a year: 12

// =&gt; total days in a month = 7 * 4 = 28
CarbonInterval::getFactor('days', 'month'); // days in a month: 28

// =&gt; total days in a year = 7 * 4 * 12 = 336
CarbonInterval::getFactor('days', 'year'); // days in a year: 336
</code></pre>

<p>When you break it down like this it makes a lot of sense. There needs to be some consistency when doing date/time math and this is how Carbon achieves it. As a consequence, it might trip you up if you're not careful, as shown below. Luckily you can define your own interval factors:</p>

<pre><code class="language-php">use Carbon\CarbonInterval;

CarbonInterval::fromString('1 year')-&gt;total('days'); // ‚ùå 336
CarbonInterval::fromString('1 year')-&gt;totalDays; // ‚ùå 336

// Find out how many days are defined per year by default
CarbonInterval::getFactor('days', 'year'); // 336

// Set your own
CarbonInterval::setCascadeFactors([
  'year' =&gt; [365,  'days']
]);

// Now you get the "real" number of days in a year
CarbonInterval::getFactor('days', 'year'); // ‚úÖ 365
CarbonInterval::fromString('1 year')-&gt;totalDays; // ‚úÖ 365
</code></pre>

<p>Cascade factor argument order is important - the last factor in the arguments array should be the one you need to operate on. Consider these two examples:</p>

<pre><code class="language-php">CarbonInterval::setCascadeFactors([
  'month' =&gt; [30, 'days'],
  'year' =&gt; [365, 'days'],
]);
CarbonInterval::getFactor('days', 'year'); // ‚úÖ 365
CarbonInterval::getFactor('days', 'month'); // ‚ùå 0
CarbonInterval::make('1 year')-&gt;totalDays; // ‚úÖ success: 365
CarbonInterval::make('1 month')-&gt;totalDays; // ‚ùå failure: 0

CarbonInterval::setCascadeFactors([
  'year' =&gt; [365, 'days'],
  'month' =&gt; [30, 'days'],
]);
CarbonInterval::getFactor('days', 'year'); // ‚ùå 0
CarbonInterval::getFactor('days', 'month'); // ‚úÖ 30
CarbonInterval::make('1 year')-&gt;totalDays; // ‚ùå failure: 0
CarbonInterval::make('1 month')-&gt;totalDays; // ‚úÖ success: 30
</code></pre>

<h2>CarbonInterval cascade (sloppy interval conversion)</h2>

<p>When working with <code>CarbonInterval</code> it is often useful to display the resulting string in a readable, consistent format. This is where <code>cascade()</code> comes in.</p>

<p>In the examples below, we are building a fluid string interval using simple English. If we pass a messy/sloppy string we get the same back, but wouldn't it be nice to automatically parse these units into something that makes more sense? The simplest example is <code>25h</code> to <code>1d 1h</code>. This is what cascade does.</p>

<p>A practical use-case can be collecting/collating different time interval units from various parts of the app or database, then transforming them into a consistent string for displaying to the end user.</p>

<pre><code class="language-php">/**
 * CarbonInterval's cascade() method converts units
 * into the next one up, when they "spill" over.
 * This allows freeform fluid string conversion.
 */
use Carbon\CarbonInterval;

// Ugly and not very readable
CarbonInterval::fromString('13 months 36 days 56 hours')
    -&gt;forHumans();
// =&gt; "13 months 5 weeks 1 day 56 hours"

// Let's cascade that into "standard" units
CarbonInterval::fromString('13 months 36 days 56 hours')
    -&gt;cascade()
    -&gt;forHumans();
// "1 year 2 months 1 week 3 days 8 hours"

// Let's get really sloppy
// The order of the units doesn't matter - same result
CarbonInterval::fromString('56 hours 36 days 13 months')
    -&gt;cascade()
    -&gt;forHumans();
// "1 year 2 months 1 week 3 days 8 hours"

// You can use shorthand for the constructor
CarbonInterval::fromString('25h')-&gt;cascade()-&gt;forHumans();
// =&gt; "1 day 1 hour"
</code></pre>

<h2>Carbon arithmetic - adding, subtracting time intervals</h2>

<p>It's very easy to perform any kind of date/time arithmetic with Carbon. The API is so natural that you can simply guess it without referring to the documentation. A good IDE makes that even easier.</p>

<p>Furthermore, there are multiple ways of achieving the same result, including syntactic sugar for common operations such as <code>yesterday()</code> or <code>tomorrow()</code>. Units can also be specified in singular or plural.</p>

<pre><code class="language-php">use Carbon\Carbon;

Carbon::today(); // 2022-04-12

// Add one or more days
Carbon::today()-&gt;addDay(); // 2022-04-13
Carbon::today()-&gt;addDays('1'); // 2022-04-13
Carbon::today()-&gt;add('1 day'); // 2022-04-13
Carbon::today()-&gt;add('1 days'); // 2022-04-13
Carbon::today()-&gt;add('5 day'); // 2022-04-17
Carbon::today()-&gt;addYear('2'); // 2024-04-12

// Subtract one or more days
Carbon::today()-&gt;subDay(); // 2022-04-11
Carbon::today()-&gt;subDays('1'); // 2022-04-11
Carbon::today()-&gt;subtract('1 day'); // 2022-04-11
Carbon::today()-&gt;sub('1 day'); // 2022-04-11
Carbon::today()-&gt;sub('1 days'); // 2022-04-11
Carbon::today()-&gt;sub('1 week'); // 2022-04-05
Carbon::today()-&gt;subMonth('2'); // 2022-02-12

// Use unit shorthand
Carbon::today()-&gt;add('1w'); // 2022-04-19
// Or a mix of units
Carbon::today()-&gt;sub('1w1d'); // 2022-04-04

// Easier shortcuts for adding/subtracting 1 day üòé
Carbon::tomorrow(); // 2022-04-13
Carbon::yesterday(); // 2022-04-11

// Don't forget timezone conversion
Carbon::today()-&gt;tz('America/Chicago')-&gt;add('1w'); // 2022-04-18 

// Timestamps work too
Carbon::now()-&gt;toDateTimeString();
// =&gt; "2022-04-12 02:50:24"
Carbon::now()-&gt;add('1h1m1s')-&gt;toDateTimeString();
// =&gt; "2022-04-12 03:51:25"

// Very small units (milliseconds/microseconds) also work (PHP 7.1+ for full microsecond support), although they are hard to capture
// Here's a way to test that by adding the equivalent of 1 second
dump([
  Carbon::now()-&gt;toDateTimeString(),
  Carbon::now()-&gt;add('1000ms')-&gt;toDateTimeString(),
]);
// =&gt; [
//      "2022-04-11 21:30:16",
//      "2022-04-11 21:30:17",
//    ]

dump([
  Carbon::now()-&gt;toDateTimeString(),
  Carbon::now()-&gt;add('1000000microsecond')-&gt;toDateTimeString(),
]);
// =&gt; [
//      "2022-04-12 02:41:11",
//      "2022-04-12 02:41:12",
//    ]
</code></pre>

<h2>Carbon vs CarbonImmutable</h2>

<p>Both offer the same API, but when operated upon:</p>

<ul>
<li>Carbon - returns the same instance</li>
<li>CarbonImmutable - returns a new instance with the new value.</li>
</ul>

<p>When operating on Carbon instances, timestamps may get out of sync (drift) if you're not being careful. This can especially occur when chaining operations and assigning Carbon instances to multiple variables. Here's a practical example:</p>

<pre><code class="language-php">// The problem - assigning a Carbon instance to a variable
$today = Carbon\Carbon::today(); // 2022-04-14

// As you pass around the same instance and apply operations to it, the initial timestamp gets mutated

$tomorrow = $today-&gt;addDay(); // ‚úÖ 2022-04-15
$tomorrow = $today-&gt;addDay(); // ‚ùå 2022-04-16
$tomorrow = $today-&gt;addDay(); // ‚ùå 2022-04-17
$dayAfterTomorrow = $tomorrow-&gt;addDay(); // ‚ùå 2022-04-18

// $today is no longer "today"
echo $today-&gt;toDateString(); // ‚ùå "2022-04-18"
// $tomorrow is no longer "tomorrow" either
echo $tomorrow-&gt;toDateString(); // ‚ùå "2022-04-18"

// --------------------------------------

// The solution - prevent drift with CarbonImmutable
$today = Carbon\CarbonImmutable::today(); // 2022-04-14

// You can operate on the original instance as many times as you want...
// ... and it will remain the same
$tomorrow = $today-&gt;addDay(); // ‚úÖ 2022-04-15
$tomorrow = $today-&gt;addDay(); // ‚úÖ 2022-04-15
$tomorrow = $today-&gt;addDay(); // ‚úÖ 2022-04-15
$dayAfterTomorrow = $tomorrow-&gt;addDay(); // ‚úÖ 2022-04-16

// Now both $today and $tomorrow are correct
echo $today-&gt;toDateString(); // ‚úÖ "2022-04-14"
echo $tomorrow-&gt;toDateString(); // ‚úÖ "2022-04-15"
</code></pre>

<h2>Resources</h2>

<p>A collection of Carbon-related resources from around the web.</p>

<ul>
<li><a href="https://github.com/dansoppelsa/laravel-carbon-macros">Laravel Carbon Macros</a></li>
</ul>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/mysql-laravel-cte-group-by-year-month-with-gaps</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/mysql-laravel-cte-group-by-year-month-with-gaps" />
    <title>How to Use MySQL CTE in Laravel to Group by Year and Month with Gaps</title>
    <published>2022-03-30T00:00:00+00:00</published>
    <updated>2022-03-30T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Following up on my previous article on grouping data using MySQL Common Table Expressions, I am offering an implementation of the same technique in Laravel.

Note This requires MySQL v8.0+.



Grouping total distance by year-month (e.g.......</summary>
    <content type="html"><![CDATA[
        <p>Following up on my previous article on <a href="/blog/mysql-cte-group-by-year-month-with-gaps/">grouping data using MySQL Common Table Expressions</a>, I am offering an implementation of the same technique in Laravel.</p>

<p><strong>Note</strong> This requires MySQL v8.0+.</p>

<h2>Recap - The original Eloquent query</h2>

<p>Grouping total distance by year-month (e.g. <code>2016-03</code>) for a specific bike is pretty straightforward...</p>

<pre><code class="language-php">$ridesByYearMonth = 
    DB::table('rides')
        -&gt;select(
            'start_date',
            DB::raw('SUM(distance) AS total_distance'),
        )
        -&gt;where([
            'user_id' =&gt; $userId,
            'bike_id' =&gt; $bikeId,
        ])
        -&gt;groupBy('start_date')
        -&gt;orderBy('start_date')
        -&gt;get();
</code></pre>

<p>... but it doesn't return gaps for months without rides.</p>

<h2>Option 1 - üì¶ Use the staudenmeir/laravel-cte package</h2>

<p>There's a Laravel package for everything, and CTEs are no exception. <a href="https://github.com/staudenmeir/laravel-cte">laravel-cte</a> is a popular, well maintained package that offers an Eloquent-like syntax for Common Table Expressions across the most popular SQL databases.</p>

<p>Unfortunately I wasn't able to figure out how to use this package in the short time I dedicated to it. Here's an <a href="https://johnathansmith.com/laravel-mysql-cte/">article</a> that might shed some light.</p>

<h2>Option 2 - üßÄ Cheese it with raw SQL</h2>

<p>Personally I like to keep dependencies to a bare minimum. In this case, the same outcome can be achieved with raw SQL, though it won't look as clean as using the package. Here's how this looks in Laravel:</p>

<pre><code class="language-php">$user_id = 1;
$bike_id = 100;
$bindings = [$user_id, $bike_id, $user_id, $bike_id, $user_id, $bike_id];

$query = "
WITH RECURSIVE dates (
    date
) AS (
    SELECT
        DATE(LAST_DAY(MIN(start_date)))
    FROM
        rides
    WHERE
        user_id = ?
        AND bike_id = ?
    UNION ALL
    SELECT
        DATE(LAST_DAY(date)) + INTERVAL 1 MONTH
    FROM
        dates
    WHERE
        DATE(LAST_DAY(date)) &lt;= (
            SELECT
                DATE(MAX(start_date))
            FROM
                rides
            WHERE
                user_id = ?
                AND bike_id = ?)
)
SELECT
    DATE_FORMAT(date, '%Y-%m') AS 'year_month', COALESCE(total_distance, 0) AS total_distance
FROM
    dates
    LEFT JOIN (
        SELECT
            DATE_FORMAT(start_date, '%Y-%m') AS yearmonth,
            SUM(distance) AS total_distance
        FROM
            rides
        WHERE
            user_id = ?
            AND bike_id = ?
        GROUP BY
            DATE_FORMAT(start_date, '%Y-%m')
    ) AS rides ON DATE_FORMAT(date, '%Y-%m') = yearmonth;
";

$ridesByYearMonthArray = DB::connection()
    -&gt;select($query, $bindings); // returns an array

$ridesByYearMonthCollection = collect($ridesByYearMonthArray); // cast to collection
</code></pre>

<p>I'm not very happy with how I pass the query bindings (same pair of ids repeated 3 times), but it does the job. You should also consider doing extra validation and casting on those bindings to prevent garbage data.</p>

<p><code>DB::select(...)</code> also works.</p>

<h2>Conclusion</h2>

<p>I hope Laravel will have first class support for Common Table Expressions at some point in the future, but for now these two techniques should suffice.</p>

<p>Thoughts and improvements? Hit me up on <a href="https://twitter.com/brbcoding">Twitter</a>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/mysql-cte-group-by-year-month-with-gaps</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/mysql-cte-group-by-year-month-with-gaps" />
    <title>How to Use MySQL CTE to Group by Year and Month with Gaps</title>
    <published>2022-03-26T00:00:00+00:00</published>
    <updated>2022-03-26T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Note CTE (Common Table Expressions) are a MySQL feature since v8.0. Earlier versions won&#039;t be able to use this technique.



My passion project these days is a Laravel app for cycling data from the Strava API.

I have a Charts section which plots ride......</summary>
    <content type="html"><![CDATA[
        <p><strong>Note</strong> CTE (Common Table Expressions) are a MySQL feature since v8.0. Earlier versions won't be able to use this technique.</p>

<h2>Intro</h2>

<p>My passion project these days is a Laravel app for cycling data from the <a href="https://strava.com/">Strava</a> API.</p>

<p>I have a Charts section which plots ride distances for all or individual bikes on a bar chart, grouped by year or month.</p>

<h2>The problem</h2>

<p>Notice how there should be gaps in the graph for months without rides for the selected filters (this particular bike), but the graph skips those.</p>

<p><img src="/assets/img/2022-03-26-month-gaps.jpg" alt="Month gaps in statistical data" title="Month gaps in statistical data" /></p>

<p>The SQL I'm using to generate the graph looks like this:</p>

<pre><code class="language-sql">SELECT
    DATE_FORMAT(start_date, '%Y-%m') AS 'year_month',
    COALESCE(SUM(distance), 0) AS total_distance
FROM
    rides
WHERE
    user_id = XXX
    AND bike_id = YYY
GROUP BY
    DATE_FORMAT(start_date, '%Y-%m');
</code></pre>

<p>A typical record in the <code>rides</code> table looks like this (redacted for brevity):</p>

<pre><code class="language-bash">id    user_id   bike_id   distance      start_date
123   XXX       YYY       26934.2000    2017-05-13 15:48:15
</code></pre>

<p>The partial result of the query is:</p>

<pre><code class="language-bash">year_month  total_distance

2016-03     35692.4000
2016-04     390209.3000
2016-05     71417.6000
# gap
2016-08     88008.1000
2016-09     88051.3000
# gap
2017-05     51819.1000
# gap
2018-05     25426.8000
2018-06     205786.6000
2018-07     66438.5000
2018-08     150242.9000
# ...
2022-03     428588.5000
</code></pre>

<p>Here's a <a href="https://www.db-fiddle.com/f/5swkrL8pLteXFXYyV8xdRQ/0">DB Fiddle</a> of the initial implementation (works in MySQL &lt; 8.0).</p>

<p>But what I want is:</p>

<pre><code class="language-bash">year_month  total_distance

2016-03     35692.4000
2016-04     390209.3000
2016-05     71417.6000
2016-06     0.0000
2016-07     0.0000
...
2016-08     88008.1000
2016-09     88051.3000
# and so on...
</code></pre>

<h2>The solution</h2>

<p>I've been punting on fixing this for a long time, partially because I had bigger priorities and partially because I'm not a SQL expert who can find a solution in a few minutes.</p>

<p>Earlier in the week I saw this <a href="https://twitter.com/tobias_petry/status/1506632076317138947">tweet by Tobias Petry</a> which shed light on the problem I was facing. This led me down the path of <a href="https://dev.mysql.com/doc/refman/8.0/en/with.html">MySQL 8.0 Common Table Expressions</a>.</p>

<p>Tobias' solution wasn't a drop-in replacement for my specific use-case. Most examples I found on the web deal with 1-day intervals. It seems that most people implementing this pattern need it to track visits on websites, counters, etc. For these you typically want daily intervals. In my case you can have 2-3 rides max in one day accumulating a number of miles/kilometers, so I'm more interested in longer mileage intervals to the order of weeks, months and years.</p>

<p>So I spent a few hours tweaking various aspects of the CTE to fit my use-case. Here's what I came up with.</p>

<pre><code class="language-sql">-- CTE start
WITH RECURSIVE dates (
    date
) AS (
    SELECT
        DATE(LAST_DAY(MIN(start_date)))
    FROM
        rides
    WHERE
        user_id = XXX
        AND bike_id = YYY
    UNION ALL
    SELECT
        DATE(LAST_DAY(date)) + INTERVAL 1 MONTH
    FROM
        dates
    WHERE
        DATE(LAST_DAY(date)) &lt;= (
            SELECT
                DATE(MAX(start_date))
            FROM
                rides
            WHERE
                user_id = XXX
                AND bike_id = YYY)
)
-- CTE end
SELECT
    DATE_FORMAT(date, '%Y-%m') AS 'year_month', COALESCE(total_distance, 0) AS total_distance
FROM
    dates
    LEFT JOIN (
        SELECT
            DATE_FORMAT(start_date, '%Y-%m') AS yearmonth,
            SUM(distance) AS total_distance
        FROM
            rides
        WHERE
            user_id = XXX
            AND bike_id = YYY
        GROUP BY
            DATE_FORMAT(start_date, '%Y-%m')
    ) AS rides ON DATE_FORMAT(date, '%Y-%m') = yearmonth;
</code></pre>

<p>I won't go over every line explaining what it does (read the MySQL docs for that), but essentially the recursive CTE generates an interval (monthly in this case) between the first and last recorded dates, then <code>LEFT JOIN</code>s it against the table we want to summarize. The <code>LEFT JOIN</code> ensures empty values are preserved in the results.</p>

<p>One interesting side effect of this approach is that the lower and upper bounds of the range will map directly to the timestamps of the first and last recorded rides resulting from the query.</p>

<p>Here's a <a href="https://www.db-fiddle.com/f/rxHqJEtQVqy6ydwL4UvPEw/2">DB Fiddle</a> of the CTE solution (MySQL 8.0+).</p>

<p>The result is what I was hoping to achieve üéâ</p>

<pre><code class="language-bash">year_month  total_distance

2016-03     35692.4000
2016-04     105004.6000
2016-05     71417.6000
2016-06     0.0000
2016-07     0.0000
2016-08     88008.1000
</code></pre>

<p>And here's how the chart looks now.</p>

<p><img src="/assets/img/2022-03-26-month-gaps-fixed-mysql-cte.jpg" alt="Month gaps displaying correctly with MySQL CTE" title="Month gaps displaying correctly with MySQL CTE" /></p>

<h2>Additional reading</h2>

<p><a href="https://twitter.com/tobias_petry">Tobias Petry</a> wrote a article about <a href="https://sqlfordevs.com/statistical-results-fill-gaps">filling gaps in statistical time series results</a> with MySQL and PostgreSQL examples and a detailed explanation. He also recently launched a free ebook on <a href="https://sqlfordevs.com/ebook">advanced databased techniques</a> which is a must-read.</p>

<h2>Caveats and conclusion</h2>

<p>Not everything is perfect:</p>

<ul>
<li>It's probably <strong>not</strong> the <strong>cleanest</strong> or <strong>most efficient</strong> implementation. I will have to revisit it at some point in an attempt to extract additional performance from it.</li>
<li>It's <strong>slower</strong> than the original implementation (4-8ms vs 1-3ms for ~280 records when filtered by bike, or ~570 records for all bikes).</li>
<li>Since the CTE is a <strong>recursive query</strong>, one needs to pay attention to the potential <strong>number of iterations</strong>. Exceeding the configured value will result in <code>Query 1 ERROR: Recursive query aborted after 1001 iterations. Try increasing @@cte_max_recursion_depth to a larger value.</code>. This error can be triggered by changing the interval from <code>1 MONTH</code> to <code>1 DAY</code>, for example.</li>
</ul>

<p>All things considered, <strong>it solves my problem</strong> and the speed penalty is insignificant.</p>

<p>While I have vague apprehension about scaling for a large number of records, I am realistic to know that it's not an immediate concern. For one thing, not even professional cyclists would accumulate so many rides to trigger this error. For another, if I ever reach the point where this becomes an issue, it means I'm in an excellent situation (many users with lots of data is a good "problem" to have).</p>

<p>If you have ideas on how to improve it, hit me up on <a href="https://twitter.com/brbcoding">Twitter</a> ideally with a <a href="https://www.db-fiddle.com/">DB Fiddle</a> example.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/reflecting-on-2021</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/reflecting-on-2021" />
    <title>Reflecting on 2021</title>
    <published>2021-12-31T00:00:00+00:00</published>
    <updated>2021-12-31T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">In 2019, I started the &quot;tradition&quot; of reflecting on the past year, mainly from a developer &amp;amp; geek point of view. I think it&#039;s a useful tool for summarizing how I&#039;ve grown as a developer, and what cool new things I&#039;ve done and accomplished.

I......</summary>
    <content type="html"><![CDATA[
        <p>In 2019, I started the "tradition" of <a href="/blog/reflecting-on-2019/">reflecting on the past year</a>, mainly from a developer &amp; geek point of view. I think it's a useful tool for summarizing how I've grown as a developer, and what cool new things I've done and accomplished.</p>

<p>I continued this in <a href="/blog/reflecting-on-2020/">2020</a>, and now, 2021.</p>

<h2>Personal</h2>

<p>As usual, I won't share any personal stuff except that it appears I've avoided Covid 19 successfully. Or, if I had it, it was asymptomatic.</p>

<p>Apart from that, I'm grateful for being healthy and aging gracefully.</p>

<h2>Work</h2>

<p>I continue to be employed as a full stack PHP + JS developer working on legacy code. The work is stressful and not incredibly satisfying but I like the company and co-workers.</p>

<p>We've been fully remote since the pandemic started, and not going back to the office. In fact, if there's one good thing that came out of this pandemic it's that I became determined never to work in a physical location again.</p>

<h2>This blog</h2>

<p>The blog is 3 now üéÇ. Whoopty-doo I guess. I'll admit that I've been steadily losing my blogging motivation. The problem is having to make a choice between working on side projects or writing stuff in my spare time. The side projects win most of the time.</p>

<p>The blog remains very useful as a permanent repository for various techniques I discover during my daily coding journey. Posting, however, has been very erratic this year and will likely continue to be so.</p>

<p>Holding a day job requires strict prioritization of extra-curricular activities, so I decided not to put any pressure on myself to blog on a regular schedule.</p>

<p>There are 2 things the blog needs:</p>

<ul>
<li>Comments. Since this is a static site <a href="https://utteranc.es/">utterances</a> is the main contender.</li>
<li>A redesign. I would like at some point to rebuild the site (and blog) on <a href="https://kit.svelte.dev/">SvelteKit</a>. While it's not a huge priority, I've become disenchanted with the build process and relative complexity of the <a href="https://jigsaw.tighten.co/">Jigsaw</a> engine.</li>
</ul>

<h3>Traffic</h3>

<p>I still haven't moved away from Google Analytics and I won't even pretend I will. It's not very high on my priority list. Traffic continues to grow, as these things go, but I just don't care enough to keep a close eye on it.</p>

<h3>Most popular posts</h3>

<p>Here are the most popular articles from the last 12 months, as determined by GA:</p>

<ul>
<li><a href="/blog/upgrade-php-74-cli-mac/">Upgrade the PHP CLI to 7.4 on Mac</a> <em>rerun</em></li>
<li><a href="/blog/edit-in-place-component-livewire-alpinejs/">Build an edit in place component with Livewire &amp; Alpine.js</a></li>
<li><a href="/blog/build-signup-form-with-alpinejs/">Build a Dynamic Sign Up Form With Alpine.js</a></li>
<li><a href="/blog/svelte-persist-state-to-localstorage/">Svelte - Persist State to localStorage</a></li>
<li><a href="/blog/fix-laravel-public-storage/">How to Fix Laravel Public Storage</a> <em>rerun</em></li>
<li><a href="/blog/fix-curl-error-60-ssl-certificate-problem/">Fix cURL Error 60 SSL Certificate Problem</a></li>
<li><a href="/blog/laravel-livewire-dynamic-charts-apexcharts/">How to Create Dynamic Charts with Laravel Livewire and ApexCharts</a></li>
<li><a href="/blog/how-to-install-httpie-windows-10/">How to Install HTTPie in Windows 10</a> <em>rerun</em></li>
<li><a href="/blog/verify-pgp-signature-windows-10/">How to Verify a PGP Signature on Windows 10</a></li>
<li><a href="/blog/fix-laravel-no-input-file-specified/">How to Fix Laravel's Dreaded "No input file specified" Error</a> <em>rerun</em></li>
</ul>

<h2>Personal projects, and software releases</h2>

<p>I made a few random things in 2021 with Laravel, Svelte, and Electron.</p>

<ul>
<li><a href="https://svgx.app/">SVGX</a> - a free desktop SVG icon library manager. This was a lot of fun to build and despite all the work I put into it I decided to give it away for free, but sell access to the source code. It's made with Svelte and Electron.</li>
<li><a href="https://craftnautica.netlify.app/">Craftnautica 2.0</a> - a Subnautica crafting helper and inventory manager. This is a SvelteKit port of the original tool that was built with Vue 2. You can find the repo <a href="https://github.com/breadthe/craftnautica2">here</a>.</li>
<li><a href="https://github.com/breadthe/laravel-fileserver">Laravel FileServer</a> - a file serving solution with multiple providers, written in Laravel. The idea behind this is to allow anyone with a PHP/Laravel server to be able to upload and serve files either from the local filesystem or from various 3rd party providers such as Backblaze, S3, etc. Unfortunately I haven't had time to work on it and it currently only supports local storage and Backblaze.</li>
<li><a href="https://git-diff.netlify.app/">GitHub Diff</a> - a GitHub diffing tool which behaves very much like GitHub's own tool, but with a stripped-out UI. It's made with Svelte.</li>
<li><strong>Cycling stats app</strong> - a tool I built to my own specifications to have a better UI for all my Strava cycling activities. I put a lot of time into it in 2021, and I've been consistently improving it and adding new features. I think I might eventually release it to the public as a mini-SaaS but for now I'm keeping it under wraps. Made with Laravel and Livewire.</li>
<li><strong>Secret desktop debugging tool</strong>. Unfortunately I can't talk about this one or share it with the public because it clones certain features of a commercial app that I reverse-engineered and rebuilt with Svelte and Electron.</li>
<li><strong>Various starter templates</strong> mostly around Svelte, TailwindCSS, and Electron. The problem with templates is that they are very opinionated in terms of features, as well as falling quickly out of date if you don't keep the dependencies updated every week. As we speak, I'm in the process of creating yet another <a href="/blog/svelte-vite-tailwindcss3-template/">template</a>.</li>
</ul>

<h2>New dev tech</h2>

<p>Though I am very curious to try new programming languages such as Rust, Go, and even Python (not new, just new to me), I haven't had time. So I am sticking to the tools I know best, documented <a href="/blog/2022-programming-stack/">here</a>.</p>

<ul>
<li><a href="https://laravel.com/">Laravel</a></li>
<li><a href="https://laravel-livewire.com/">Livewire</a></li>
<li><a href="https://alpinejs.dev/">AlpineJS</a></li>
<li><a href="https://tailwindcss.com/">TailwindCSS</a></li>
<li><a href="https://svelte.dev/">Svelte</a> and <a href="https://kit.svelte.dev/">SvelteKit</a></li>
<li><a href="https://www.electronjs.org/">Electron</a></li>
</ul>

<h2>New Apple M1 machines</h2>

<p>2021 marked the rise of Apple Silicon. I am fortunate enough to have access to two M1 machines:</p>

<ul>
<li>my personal MacBook Air that I use for all my side projects. It replaces a 15" 2015 MacBook Pro i7.</li>
<li>my work machine, a 14" MacBook Pro with the M1 Pro CPU. It replaces a 16" 2019 MacBook Pro i9 - I was so glad to be rid of this power-hungry hot air blower.</li>
</ul>

<p>Both machines are a huge improvement over what I had previously. I like the smaller form factor, and the performance is more than I need for web development. The 14" in particular is a work of art, notwithstanding the notch.</p>

<p>Lest you think I'm an Apple fanboi, I use a PC for gaming and entertainment, as well as an Android phone. I do, however, strongly believe that <a href="/blog/ode-to-the-mac/">the Mac is the best web development tool</a> (for me).</p>

<h2>Health and fitness</h2>

<p>Continuing and expanding on the trend from 2020, cycling has been my only physical activity this year - and I've done a lot of it.</p>

<p>I've expanded my stable to 3 bikes: road, gravel, and MTB, and I practice all 3 several times a week.</p>

<p>I like long rides - 60+ miles for gravel, ~30 miles for MTB.</p>

<p>This year I rode a total of 6300 miles (10K km) compared to 4000 miles (6400 km) in 2020.</p>

<p>Will I ride even more in 2022? Not necessarily. I feel I've reached a limit for how many miles I can ride in a year, not because I'm not willing or capable, but because I have other things to do outside of my day job. As is, I've squeezed as many rides in as I possibly could; then there's the weather to contend with.</p>

<p>If there's one thing that might change in 2022 in terms of cycling is that I'm considering participating in a couple of official events/races. I'm not the competitive type, I don't like large groups, and I prefer to ride on my own schedule, but it might be fun.</p>

<h2>Books</h2>

<p>Sadly my book reading has declined this year due to strong competition from other activities. The one book that stands out is <strong>Nemesis Games</strong> (The Expanse book 5). I'm a huge fan of this series and I read one book every year, to keep up with the TV show which I also think is very good.</p>

<p>In 2022 I plan to read some comic books.</p>

<h2>Movies and TV</h2>

<p>I don't watch TV in the traditional sense, but I do stream a fair amount of movies and TV shows.</p>

<p>Some of the movies I liked in 2021 are: <strong>Black Cat White Cat</strong> (1998), <strong>Raya And The Last Dragon</strong> (2021), <strong>Treasure Planet</strong> (2002), <strong>The Mitchells Vs. The Machines</strong> (2021), <strong>Seoul Searching</strong> (2015), <strong>Wrath Of Man</strong> (2021), <strong>Werewolves Within</strong> (2021), <strong>Secondhand Lions</strong> (2003), and <strong>Red Notice</strong> (2021).</p>

<p>I also watched individual seasons from various TV shows. Excellent ones include: <strong>What We Do In The Shadows</strong> (2019-2020), <strong>Invincible</strong> (2020), <strong>Loki S01</strong> (2021), <strong>Reservation Dogs</strong> (2021), <strong>The White Lotus</strong> (2021), <strong>Chernobyl</strong> (2019), and both editions of <strong>Cowboy Bebop</strong> (1998 and 2021). I liked the live-action 2021 Cowboy Bebop, so sue me. I also watched about half the seasons of <strong>Veep</strong> (2012+), probably the most hilarious political comedy show.</p>

<h2>Gaming</h2>

<p>Between side projects and cycling, I haven't had much time for gaming. To be honest my motivation to play games has been declining since I tend to prefer working on side projects when I'm in front of a computer.</p>

<p>Having said that, I <em>am</em> entering the new year in fresh possession of 3 new games:</p>

<ul>
<li><a href="https://store.steampowered.com/app/892970/Valheim/">Valheim</a> - open world Viking survival online co-op. I'm attracted to sandbox survival games for some reason, and this is one of the best that came out in 2021.</li>
<li><a href="https://store.steampowered.com/app/548430/Deep_Rock_Galactic/">Deep Rock Galactic</a> - online co-op FPS. It got some excellent reviews, and I agree based on the incredible level of polish I've experienced.</li>
<li><a href="https://store.steampowered.com/app/562860/Ion_Fury/">Ion Fury</a> - I was a huge sucker for Duke Nukem 3D back in the 90s, so this is right up my alley.</li>
</ul>

<h2>Twitter and social media</h2>

<p><a href="https://twitter.com/brbcoding">Twitter</a> remains my primary social media outlet. I'm a very slow grower, primarily due to not posting on a regular schedule. However I strictly post webdev-related stuff so I'm definitely worth a follow if you care about Laravel/Livewire/AlpineJS/Svelte/TailwindCSS/Electron and don't appreciate shitposting. I'm ending the year at 333 followers, which is more than I expected.</p>

<p>I am also present on:</p>

<ul>
<li><a href="https://www.producthunt.com/@brbcoding">Product Hunt</a></li>
<li><a href="https://www.indiehackers.com/brbcoding/">Indie Hackers</a></li>
</ul>

<h2>Things to look forward to in 2022</h2>

<p>On the dev front, <strong>Laravel 9</strong> will be one of the hottest things in 2022. I'm also expecting big things from <strong>Svelte</strong> and <strong>SvelteKit</strong> especially after <a href="https://twitter.com/Rich_Harris">Rich Harris</a> joined <a href="https://vercel.com/">Vercel</a> to work full-time on Svelte.</p>

<p>I'd like to launch my cycling app/SaaS to the public but it's not set in stone. I might also work on <a href="https://svgx.app/">SVGX</a> 2.0, only it would be a paid app this time. And then, of course, I have a few unfinished side-projects that I'd like to complete, as well as tons of new ideas that I'd like to try.</p>

<p>Health-wise, I hope to continue the trend of staying in shape through cycling. I'll be doing a lot of gravel riding in 2022, as well as continuing to improve my MTB skills.</p>

<p>I'll stop short of making any more predictions or resolutions.</p>

<p>Thank you dear friends for your readership, and may 2022 be... a year?</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/svelte-vite-tailwindcss3-template</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/svelte-vite-tailwindcss3-template" />
    <title>Creating a Svelte, Vite, and TailwindCSS 3 Template</title>
    <published>2021-12-29T00:00:00+00:00</published>
    <updated>2021-12-29T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">At the end of 2021 I decided to create a very basic Svelte/Vite/TailwindCSS 3 template that would provide a starting point for future projects. Thanks to modern tooling and automation, the procedure is pretty simple, but I am documenting it here......</summary>
    <content type="html"><![CDATA[
        <p>At the end of 2021 I decided to create a very basic Svelte/Vite/TailwindCSS 3 template that would provide a starting point for future projects. Thanks to modern tooling and automation, the procedure is pretty simple, but I am documenting it here nonetheless.</p>

<p>Why not SvelteKit? Two reasons.</p>

<p>First, I already wrote instructions for scaffolding a <a href="https://chasingcode.dev/blog/svelte-kit-tailwind/">SvelteKit/Vite/Tailwind</a> site.</p>

<p>Second, I intend to use this as an Electron starter, for which I don't need SvelteKit.</p>

<h2>Create a new Vite project with Svelte template</h2>

<p><a href="https://vitejs.dev/guide/#scaffolding-your-first-vite-project">Scaffold a new Vite project</a> with the <code>svelte</code> (or <code>svelte-ts</code> for TypeScript) template:</p>

<pre><code class="language-bash"># for TypeScript use --template svelte-ts
npm init vite@latest my-svelte-app -- --template svelte

cd my-svelte-app
npm install
</code></pre>

<h2>Add TailwindCSS 3</h2>

<pre><code class="language-bash">npx svelte-add@latest tailwindcss
npm install
</code></pre>

<p>This step automates most of Tailwind's configuration, by creating pre-populated configs for <code>postcss.config.cjs</code>, <code>tailwind.config.cjs</code>, and filling in the required PostCSS config in <code>svelte.config.cjs</code>.</p>

<p>Finally open <code>app.postcss</code> and verify that it looks like this:</p>

<pre><code class="language-css">/* Write your global styles here, in PostCSS syntax */
@tailwind base;

/* Custom classes go here */
/* This will always be included in your compiled CSS */

@tailwind components;

@tailwind utilities;
</code></pre>

<p>That's it! Now run the site in dev mode with <code>npm run dev</code>, or build for production with <code>npm run build</code>.</p>

<p>If you want additional customizations, read on.</p>

<h2>Add Prettier</h2>

<p>I'm not big on super-detailed customizations, but there are two things that annoy me right off the bat in a new Svelte project: the default line length (80 is too short), and having semicolons at the end of statements.</p>

<p>In addition, I favor single quotes, as well as trailing commas in objects and arrays.</p>

<p>So I like to add Prettier to fix those.</p>

<pre><code class="language-bash">npm install --save-dev prettier
</code></pre>

<p>Then create a <code>.prettierrc.json</code> file in the root of the project with the following contents:</p>

<pre><code class="language-json">{
  "semi": false,
  "singleQuote": true,
  "trailingComma": "es5",
  "printWidth": 120
}
</code></pre>

<p>Finally, add a <code>.prettierignore</code> in the root file with the following contents, to ignore the build directory:</p>

<pre><code class="language-bash">dist
</code></pre>

<p>Now if you hit OPT-CMD-L (on the Mac) in VS Code, it will format the code according to the Prettier rules. If you want the formatting to be automatic, toggle Text Editor > Formatting > Format On Save.</p>

<h2>Add TypeScript</h2>

<p>If you want to use TypeScript, you can add it with the following command:</p>

<pre><code class="language-bash">npm install --save-dev typescript @tsconfig/svelte
</code></pre>

<p>Then create a <code>tsconfig.json</code> file in the root of the project with the following contents:</p>

<pre><code class="language-json">{
  "extends": "@tsconfig/svelte/tsconfig.json",
  "include": [
    "vite.config.ts",
    "src/**/*.d.ts",
    "src/**/*.ts",
    "src/**/*.js",
    "src/**/*.svelte"
  ],
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "resolveJsonModule": true,
    "baseUrl": ".",
    "allowJs": true,
    "checkJs": true,
    "isolatedModules": true,
    "sourceMap": true,
    "strict": true,
    "noImplicitAny": true,
    "composite": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "noEmit": true,
  }
}
</code></pre>

<p>Now you can change the <code>script</code> tag in all Svelte components where you want to use TypeScript to:</p>

<pre><code class="language-html">&lt;script lang="ts"&gt;
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/2022-programming-stack</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/2022-programming-stack" />
    <title>My 2022 Programming Stack</title>
    <published>2021-12-09T00:00:00+00:00</published>
    <updated>2021-12-09T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">As we slowly roll into 2022, I decided to take a step back and have an objective look at my coding stack for the near future. It&#039;s a short one - I&#039;ll keep it focused strictly on my programming languages of choice, ignoring other tools and services.......</summary>
    <content type="html"><![CDATA[
        <p>As we slowly roll into 2022, I decided to take a step back and have an objective look at my coding stack for the near future. It's a short one - I'll keep it focused strictly on my programming languages of choice, ignoring other tools and services.</p>

<p>TL;DR - TALL stack (<strong>Laravel</strong> + <strong>Livewire</strong> + <strong>AlpineJS</strong> + <strong>TailwindCSS</strong>), <strong>Svelte</strong>, <strong>Electron</strong>.</p>

<h2>Back-end</h2>

<p><a href="https://laravel.com/">Laravel</a> is my solution for anything requiring a database. Together with <a href="https://laravel-livewire.com/">Livewire</a>, <a href="https://alpinejs.dev/">AlpineJS</a>, and <a href="https://tailwindcss.com/">TailwindCSS</a> I can quickly build complex functionality and appealing UI.</p>

<p>With <a href="https://www.php.net/releases/8.1/en.php">8.1</a> PHP has never been better, and in recent years has risen from its slumber to make web development exciting again.</p>

<p>Built on top of PHP, <strong>Laravel</strong> is the best web framework that ever was (I'm biased, sue me) and continues to improve by leaps and bounds. Every time I ask myself what more is there to improve, along come a host of new features that make it even quicker to ship stuff.</p>

<p><strong>Livewire</strong> is the logical companion to Laravel for building interactive UI without much JavaScript. It goes hand-in-hand with <strong>AlpineJS</strong> for those times when you need fancier UI behavior.</p>

<p><strong>MySQL</strong> is the one and only server-side database I will be using in the near future, simply because I've been using it forever and I don't need anything more capable.</p>

<h2>Front-end</h2>

<p>I can't live without <strong>Tailwind</strong> since v0.7. As a full stack dev, it's a very reliable tool for building any kind of user-facing interface, quickly.</p>

<p>For static sites I will absolutely reach for <a href="https://svelte.dev/">Svelte</a> and <a href="https://kit.svelte.dev/">SvelteKit</a>. I get a lot of joy building front-end heavy web apps with this fast, lightweight, minimalistic framework (sorry, compiler).</p>

<p>Philosophically, I've abandoned the concept of a backend-driven SPA (Single Page App). With Laravel and Livewire there's just no need for it. However, if I ever needed something along the lines, I would choose Laravel with <a href="https://inertiajs.com/">Inertia.js</a> and Svelte.</p>

<h2>Desktop</h2>

<p>Occasionally I build cross-platform desktop apps, such as <a href="https://svgx.app/">SVGX</a>. The easy choice is to use <a href="https://www.electronjs.org/">Electron</a> in tandem with a preferred JS framework, and that would be Svelte in my case.</p>

<p>I am also exploring the possibility of integrating <strong>SQLite</strong> in a future Electron app.</p>

<h2>Summary</h2>

<p>I don't see my coding stack changing much over 2022. I've narrowed it down to an ecosystem centered around <strong>Laravel</strong> for <em>back-end</em> apps, with an offshoot around <strong>Svelte</strong> for <em>front-end</em> apps. Simple, fun, and super-productive.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/laracon-summer-2021-links</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/laracon-summer-2021-links" />
    <title>Laracon Summer 2021 Links</title>
    <published>2021-09-01T00:00:00+00:00</published>
    <updated>2021-09-01T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">The Summer 2021 edition of Laracon just ended, and I collected a variety of interesting links. Here they are.



Gathered from @enunomaduro and his Types In Laravel talk


Laracon schedule CLI tool
Larastan
PHPStorm Psalm + PHPStan support





Mastering......</summary>
    <content type="html"><![CDATA[
        <p>The Summer 2021 edition of <a href="https://laracon.net/">Laracon</a> just ended, and I collected a variety of interesting links. Here they are.</p>

<h2>Tools</h2>

<p>Gathered from <a href="https://twitter.com/enunomaduro">@enunomaduro</a> and his <em>Types In Laravel</em> talk</p>

<ul>
<li><a href="https://github.com/nunomaduro/laracon-schedule">Laracon schedule CLI tool</a></li>
<li><a href="https://github.com/nunomaduro/larastan">Larastan</a></li>
<li><a href="https://blog.jetbrains.com/phpstorm/2020/12/phpstorm-2020-3-release/#psalm_and_phpstan_support">PHPStorm Psalm + PHPStan support</a></li>
</ul>

<h2>Courses</h2>

<ul>
<li><a href="https://swoolebook.com">Mastering Swoole PHP</a> gathered from <a href="https://twitter.com/themsaid">@themsaid</a> 's <em>Asynchronous Laravel</em> talk</li>
<li><a href="https://learn-laravel-cashier.com/">Learn Laravel Cashier</a> gathered from <a href="https://twitter.com/driesvints">@driesvints</a> 's <em>Getting The Most Out Of Cashier Stripe &amp; Paddle</em> talk</li>
</ul>

<h2>Repos / demo apps</h2>

<p>Gathered from <a href="https://twitter.com/driesvints">@driesvints</a> 's <em>Getting The Most Out Of Cashier Stripe &amp; Paddle</em> talk:</p>

<ul>
<li><a href="https://github.com/driesvints/cashier-paddle-talk">Cashier Paddle Talk repo</a></li>
<li><p><a href="https://github.com/driesvints/cashier-stripe-talk">Cashier Stripe Talk repo</a></p></li>
<li><p><a href="https://gist.github.com/colindecarlo/9ba9bd6524127fee7580ae66c6d4709d">Test Form Request gist</a> gathered from <a href="https://twitter.com/colindecarlo">@colindecarlo</a> 's <em>Practical Laravel Unit Testing</em> talk</p></li>
</ul>

<p>Gathered from <a href="https://twitter.com/christophrumpel">@christophrumpel</a> 's <em>Why Refactoring Is The Best Tool To Write Better Code</em> talk:</p>

<ul>
<li><a href="https://github.com/christophrumpel/larastreamers">Source code</a> for <a href="https://larastreamers.com/">Larastreamers</a></li>
<li><a href="https://laravelworkflows.com/">Laravel Workflows</a> upcoming package</li>
</ul>

<p>Gathered from <a href="https://twitter.com/freekmurze">@freekmurze</a> 's <em>Introduction to Snapshot Testing</em> talk:</p>

<ul>
<li><a href="https://speakerdeck.com/freekmurze/an-introduction-to-snapshot-testing">Talk slides</a></li>
<li><a href="https://github.com/spatie/phpunit-snapshot-assertions">PHPUnit snapshot assertions package</a></li>
<li><a href="https://github.com/spatie/pest-plugin-snapshots">Pest snapshots plugin package</a></li>
</ul>

<h2>TailwindCSS</h2>

<ul>
<li><a href="https://www.youtube.com/watch?v=kuY9MehvHh4">CSS Grid tutorial with TailwindCSS</a> gathered from <a href="https://twitter.com/shrutibalasa">@shrutibalasa</a> 's <em>CSS Grid with TailwindCSS</em> talk</li>
</ul>

<h2>Security</h2>

<ul>
<li><a href="https://stephenreescarter.net/talks/hacking-laravel/">Laravel security talk resources</a> gathered from <a href="https://twitter.com/valorin">@valorin</a> 's <em>Think Like a Hacker</em> talk</li>
</ul>

<h2>Misc</h2>

<ul>
<li><a href="https://slipsum.com/">Samuel L Jackson Lorem Ipsum generator</a></li>
</ul>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/laravel-strava-webhook-solution</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/laravel-strava-webhook-solution" />
    <title>A possible Laravel-Strava webhook solution</title>
    <published>2021-07-11T00:00:00+00:00</published>
    <updated>2021-07-11T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">

When building an app around Strava&#039;s API, webhooks become critical, first to avoid unnecessarily polling the API, and second to enable automatic updates for activities and user profile.

The latter is particularly important in order to abide by......</summary>
    <content type="html"><![CDATA[
        <h2>The need for webhooks</h2>

<p>When building an app around <a href="https://developers.strava.com/">Strava's API</a>, webhooks become critical, first to avoid unnecessarily polling the API, and second to enable automatic updates for activities and user profile.</p>

<p>The latter is particularly important in order to abide by Strava's terms &amp; conditions. <a href="https://developers.strava.com/docs/getting-started/#webhooks">Quote</a>: <em>"Per our API terms, you need to implement webhooks to know when an athlete has deauthorized your API application"</em>.</p>

<h2>Preamble</h2>

<p>At the moment, the most popular Laravel Strava package is <a href="https://github.com/RichieMcMullen/laravel-strava">https://github.com/RichieMcMullen/laravel-strava</a>. I have contributed to it previously, in order to further development of my own app.</p>

<p>The package, however, does not have webhook support. I am considering contributing to that, but it's a double-edged sword. Between the design difficulties and the maintenance burden, I'm not sure I want to take on that responsibility.</p>

<p>So in the meantime I hacked together some fairly decent, but basic, webhook functionality directly inside my Laravel 8 app.</p>

<h2>Basic design considerations</h2>

<p>Parsing <a href="https://developers.strava.com/docs/webhooks/">Strava's webhook docs</a>, the basic idea is that an app can subscribe to Strava webhooks, and also unsubscribe from it later. While subscribed, any athlete or activity event triggers an event that gets pushed to the app. The app must be previously authorized from within the Strava web UI.</p>

<p>For example, I finish a bicycle ride and save it on my Garmin device, which pushes it to Strava, which in turn fires off a <code>create</code> event for a new <code>activity</code>.</p>

<p>Unfortunately, that's all it does - it doesn't send any activity data, so the developer would need to make an additional request. This additional request can be done with the <a href="https://github.com/RichieMcMullen/laravel-strava">laravel-strava</a> package.</p>

<p>Here's how the communication flow looks like:</p>

<ul>
<li>App ‚Üí Strava: subscribe</li>
<li>Strava ‚Üí App: verify (needs GET route)</li>
<li>App: subscribed</li>
<li>Strava ‚Üí App: event (needs POST route)</li>
<li>App: view subscription</li>
<li>App: unsubscribe</li>
</ul>

<p>I'll go over each in detail. For now, here's a top-level view of how I designed this feature. <em>Keep in mind that I am not overly concerned with best practices, testing, etc</em>. It's all experimental at this point, and made for my own needs, however you can use it as a starting point for your own projects.</p>

<p>I built this inside my existing Laravel 8 app in 4 main components:</p>

<ul>
<li>A webhook service (class) registered as a singleton in the <code>app</code> container.</li>
<li>A series of <code>artisan</code> commands that I can use to quickly subscribe/view/unsubscribe from the command line.</li>
<li>A couple of <code>GET/POST webhook</code> routes in <code>routes/web.php</code>.</li>
<li>A handful of configuration/environment keys.</li>
</ul>

<p>Let's dig into the details.</p>

<h2>The Strava webhook service</h2>

<p>The service class lives in <code>app/Services/StravaWebhookService.php</code>. It contains methods for making/processing outbound/incoming Strava HTTP requests.</p>

<p>Here's the skeleton (leaving out method implementation for later).</p>

<pre><code class="language-php">&lt;?php

namespace App\Services;

use Illuminate\Http\JsonResponse;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Http;

class StravaWebhookService
{
    private string $client_id;
    private string $client_secret;
    private string $url;
    private string $callback_url;
    private string $verify_token;

    public function __construct()
    {
        $this-&gt;client_id = config('ct_strava.client_id');
        $this-&gt;client_secret = config('ct_strava.client_secret');
        $this-&gt;url = config('services.strava.push_subscriptions_url');
        $this-&gt;callback_url = config('services.strava.webhook_callback_url');
        $this-&gt;verify_token = config('services.strava.webhook_verify_token');
    }

    public function subscribe(): int|null
    {
        //
    }

    public function unsubscribe(): bool
    {
        //
    }

    public function view(): int|null
    {
        //
    }

    public function validate(string $mode, string $token, string $challenge): Response|JsonResponse
    {
        //
    }
}
</code></pre>

<p><strong>Note</strong> If I had done this "by the book" (protip: there is no such thing in programming, don't let anyone tell you that), I might have implemented a more generic interface, say <code>WebhookServiceInterface</code>. Since I only care about a single webhook service for the foreseeable future - and since my app is all about Strava - I don't need the additional complexity at this point.</p>

<p>The constructor is pretty straightforward; it simply assigns a bunch of configuration options.</p>

<p>Config keys prefixed with <code>ct_strava</code> come from <code>config/ct_strava.php</code> which is the config for <a href="https://github.com/RichieMcMullen/laravel-strava">laravel-strava</a>. Read the docs to see how it works. <em>This package is pretty much a requirement for my implementation of Strava webhooks.</em></p>

<p>Keys prefixed with <code>services.strava.</code> are my own webhook-specific configuration. Here's how to configure them:</p>

<p><strong><code>config/services.php</code></strong> - webhook service config</p>

<pre><code class="language-php">return [
    // ...

    'strava' =&gt; [
       'push_subscriptions_url' =&gt; env('STRAVA_PUSH_SUBSCRIPTIONS_URL'),
       'webhook_callback_url' =&gt; env('STRAVA_WEBHOOK_CALLBACK_URL'),
       'webhook_verify_token' =&gt; env('STRAVA_WEBHOOK_VERIFY_TOKEN'),
    ],
];
</code></pre>

<p><strong><code>.env</code></strong> - application config</p>

<pre><code class="language-php">#...
STRAVA_PUSH_SUBSCRIPTIONS_URL="https://www.strava.com/api/v3/push_subscriptions"

# The app webhook callback URL that Strava uses to fire GET/POST events
STRAVA_WEBHOOK_CALLBACK_URL="https://www.yoursite.com/webhook"

# A random string generated by my app that Strava uses to verify the request
STRAVA_WEBHOOK_VERIFY_TOKEN=ABC123defXYZ4567
</code></pre>

<p>A word about the verify token. This is a string (preferably random) that you will have to generate somehow. There are many ways to do it. I chose to do it the lazy way, by running <code>Str::random();</code> once, and dumping the result in <code>.env</code>. It's probably worth regenerating this token every once in a while in case it gets leaked on Strava's side somehow. If your <code>.env</code> file gets hacked, you have bigger problems to worry about. I'm fine with the way it works now.</p>

<h2>Register the service as a singleton</h2>

<p>Now that the service skeleton is ready, let's take a detour and bind it to the Laravel app container as a singleton. Why a singleton? Because we want this to be instantiated only once throughout the app's lifecycle. Quoting from the <a href="https://developers.strava.com/docs/webhooks/">Strava webhook docs</a> <em>"Each application may only have one subscription"</em>.</p>

<p>To bind the service, open <code>app/Providers/AppServiceProvider.php</code> and add the following:</p>

<pre><code class="language-php">use App\Services\StravaWebhookService;

class AppServiceProvider extends ServiceProvider
{
    public function register()
    {
        $this-&gt;app-&gt;singleton(StravaWebhookService::class, function ($app) {
            return new StravaWebhookService();
        });
    }

    // ...
}
</code></pre>

<p>This allows us to call the methods on the singleton from anywhere on the app, without needing to instantiate it. For example:</p>

<pre><code class="language-php">$id = app(StravaWebhookService::class)-&gt;subscribe();
</code></pre>

<h2>The <code>subscribe()</code> method</h2>

<p>I'll preface this by saying that I don't like to return mixed types. Here I'm returning a subscription id as an integer, or null for any other reason. Ideally I would return an object with additional information, such as response status and errors. For what I need, this does the job.</p>

<p>To subscribe to Strava's webhooks, my app needs to <code>POST</code> the following data. If successful, Strava will respond with a JSON string in the form of <code>"{"id": 1234}"</code>. You can use this id to store it in the DB if you want to keep track of it, but I'm not doing that.</p>

<pre><code class="language-php">public function subscribe(): int|null
{
    $response = Http::post($this-&gt;url, [
        'client_id' =&gt; $this-&gt;client_id,
        'client_secret' =&gt; $this-&gt;client_secret,
        'callback_url' =&gt; $this-&gt;callback_url,
        'verify_token' =&gt; $this-&gt;verify_token,
    ]);

    if ($response-&gt;status() === Response::HTTP_CREATED) {
        return json_decode($response-&gt;body())-&gt;id;
    }

    return null;
}
</code></pre>

<h2>The <code>validate()</code> method</h2>

<p>This is translated to Laravel/PHP from the Node example in the <a href="https://developers.strava.com/docs/webhookexample/">docs webhook example</a>.</p>

<p>It runs when Strava makes a <code>GET</code> request to my app's webhook callback. For example: <code>GET https://www.yoursite.com/webhook?hub.verify_token=RANDOMSTRING&amp;hub.challenge=15f7d1a91c1f40f8a748fd134752feb3&amp;hub.mode=subscribe</code>.</p>

<p>If successful, this method responds with a JSON object containing the Strava challenge string. For example: <code>{"hub.challenge": "15f7d1a91c1f40f8a748fd134752feb3"}</code>. If it fails for any reason, it returns <code>403 Forbidden</code>.</p>

<pre><code class="language-php">public function validate(string $mode, string $token, string $challenge): Response|JsonResponse
{
    // Checks if a token and mode is in the query string of the request
    if ($mode &amp;&amp; $token) {
        // Verifies that the mode and token sent are valid
        if ($mode === 'subscribe' &amp;&amp; $token === $this-&gt;verify_token) {
            // Responds with the challenge token from the request
            return response()-&gt;json(['hub.challenge' =&gt; $challenge]);
        } else {
            // Responds with '403 Forbidden' if verify tokens do not match
            return response('', Response::HTTP_FORBIDDEN);
        }
    }

    return response('', Response::HTTP_FORBIDDEN);
}
</code></pre>

<h2>The <code>view()</code> method</h2>

<p>This utility method is useful to check the status of a subscription. Once again, it returns mixed types.</p>

<p>If there's a valid subscription, it returns an integer id. Otherwise, it returns null.</p>

<p>As with the <code>subscribe()</code> method, this could be improved by returning an object with more context. It's good enough for what I need.</p>

<pre><code class="language-php">public function view(): int|null
{
    $response = Http::get($this-&gt;url, [
        'client_id' =&gt; $this-&gt;client_id,
        'client_secret' =&gt; $this-&gt;client_secret,
    ]);

    if ($response-&gt;status() === Response::HTTP_OK) {
        $body = json_decode($response-&gt;body());

        if ($body) {
            return $body[0]-&gt;id; // each application can have only 1 subscription
        } else {
            return null; // no subscription found
        }
    }

    return null;
}
</code></pre>

<h2>The <code>unsubscribe()</code> method</h2>

<p>Unsubscribing from the Strava webhooks will delete the subscription, and disconnect the app from receiving additional push notifications.</p>

<p>It has 2 parts:</p>

<ul>
<li>first, it calls the <code>view()</code> method on the singleton to check if there's an active subscription. This will return the subscription id, with the advantage that we don't have to store it on the app side.</li>
<li>second, it sends a <code>DELETE</code> request with the id in the URL.</li>
</ul>

<p>This method has only 2 possible outcomes: either the entire operation succeeded, or it failed.</p>

<pre><code class="language-php">public function unsubscribe(): bool
{
    $id = app(StravaWebhookService::class)-&gt;view(); // use the singleton

    if (!$id) {
        return false;
    }

    $response = Http::delete("$this-&gt;url/$id", [
        'client_id' =&gt; $this-&gt;client_id,
        'client_secret' =&gt; $this-&gt;client_secret,
    ]);

    if ($response-&gt;status() === Response::HTTP_NO_CONTENT) {
        return true;
    }

    return false;
}
</code></pre>

<h2>The web routes</h2>

<p><strong><code>GET /webhook</code> callback</strong></p>

<p>This is the callback used by Strava to validate the subscription request. As explained earlier, Strava will send a <code>GET https://www.yoursite.com/webhook?hub.verify_token=RANDOMSTRING&amp;hub.challenge=15f7d1a91c1f40f8a748fd134752feb3&amp;hub.mode=subscribe</code> request that my app needs to handle.</p>

<p>All the work can be done directly in the route callback method by returning the singleton <code>validate</code> method with the request parameters.</p>

<p><strong>Note</strong> Query string parameters in the form of <code>hub.verify_token=RANDOMSTRING</code> are parsed by Laravel like this <code>$request-&gt;query('hub_verify_token')</code> (underscore replaces period).</p>

<pre><code class="language-php">Route::get('/webhook', function (Request $request) {
    $mode = $request-&gt;query('hub_mode'); // hub.mode
    $token = $request-&gt;query('hub_verify_token'); // hub.verify_token
    $challenge = $request-&gt;query('hub_challenge'); // hub.challenge

    return app(StravaWebhookService::class)-&gt;validate($mode, $token, $challenge);
});
</code></pre>

<p><strong><code>POST /webhook</code> callback</strong></p>

<p>Whenever there's an event, Strava will fire a <code>POST /webhook</code> request with the following data.</p>

<p>The app needs respond with <code>200 OK</code> within 2s, otherwise Strava will retry 3 more times before it stops.</p>

<pre><code class="language-php">Route::post('/webhook', function (Request $request) {
    $aspect_type = $request['aspect_type']; // "create" | "update" | "delete"
    $event_time = $request['event_time']; // time the event occurred
    $object_id = $request['object_id']; // activity ID | athlete ID
    $object_type = $request['object_type']; // "activity" | "athlete"
    $owner_id = $request['owner_id']; // athlete ID
    $subscription_id = $request['subscription_id']; // push subscription ID receiving the event
    $updates = $request['updates']; // activity update: {"title" | "type" | "private": true/false} ; app deauthorization: {"authorized": false}

    Log::channel('strava')-&gt;info(json_encode($request-&gt;all()));

    return response('EVENT_RECEIVED', Response::HTTP_OK);
})-&gt;withoutMiddleware(VerifyCsrfToken::class);
</code></pre>

<p>Notice that at this point I'm simply logging the payload, so that I can parse it later and figure out how to handle it.</p>

<p>Also notice the quick'n'lazy way of disabling CSRF token checking. By default, Laravel will require a CSRF token from any POST request, which is not needed in this situation. I could have created a separate middleware for webhooks, but it's a lot quicker to do it inline for the single endpoint.</p>

<h2>The artisan commands</h2>

<p>To make it easy to subscribe/view/unsubscribe, I created 3 very basic artisan commands as follows:</p>

<p><strong><code>app/Console/Commands/SubscribeToStravaWebhookCommand.php</code></strong></p>

<p>Run as: <code>php artisan strava:subscribe</code></p>

<pre><code class="language-php">&lt;?php

namespace App\Console\Commands;

use App\Services\StravaWebhookService;
use Illuminate\Console\Command;

class SubscribeToStravaWebhookCommand extends Command
{
    protected $signature = 'strava:subscribe';

    protected $description = 'Subscribes to a Strava webhook';

    public function __construct()
    {
        parent::__construct();
    }

    public function handle()
    {
        $id = app(StravaWebhookService::class)-&gt;subscribe();

        if ($id) {
            $this-&gt;info("Successfully subscribed ID: {$id}");
        } else {
            $this-&gt;warn('Unable to subscribe');
        }

        return 0;
    }
}
</code></pre>

<p><strong><code>app/Console/Commands/ViewStravaWebhookCommand.php</code></strong></p>

<p>Run as: <code>php artisan strava:view-subscription</code></p>

<pre><code class="language-php">&lt;?php

namespace App\Console\Commands;

use App\Services\StravaWebhookService;
use Illuminate\Console\Command;

class ViewStravaWebhookCommand extends Command
{
    protected $signature = 'strava:view-subscription';

    protected $description = 'Views a Strava webhook subscription';

    public function __construct()
    {
        parent::__construct();
    }

    public function handle()
    {
        $id = app(StravaWebhookService::class)-&gt;view();

        if ($id) {
            $this-&gt;info("Subscription ID: $id");
        } else {
            $this-&gt;warn('Error or no subscription found');
        }

        return 0;
    }
}
</code></pre>

<p><strong><code>app/Console/Commands/UnsubscribeStravaWebhookCommand.php</code></strong></p>

<p>Run as: <code>php artisan strava:unsubscribe</code></p>

<pre><code class="language-php">&lt;?php

namespace App\Console\Commands;

use App\Services\StravaWebhookService;
use Illuminate\Console\Command;

class UnsubscribeStravaWebhookCommand extends Command
{
    protected $signature = 'strava:unsubscribe';

    protected $description = 'Deletes a Strava webhook subscription';

    public function __construct()
    {
        parent::__construct();
    }

    public function handle()
    {
        if (app(StravaWebhookService::class)-&gt;unsubscribe()) {
            $this-&gt;info("Successfully unsubscribed");
        } else {
            $this-&gt;warn('Error or no subscription found');
        }

        return 0;
    }
}
</code></pre>

<h2>Putting it all together</h2>

<p>You can find all the pieces assembled in this <a href="https://gist.github.com/breadthe/2787c4f6d6ac805ef9eb698a91b6a750">Gist</a>. If you look closely, you'll notice some additional logging in the service methods, in lieu of returning explicit errors.</p>

<h2>Next steps</h2>

<p>The goal of this project was to complete the Strava webhook subscription flow, without overengineering it. I have achieved that successfully, with a little extra polish that I hadn't planned on initially. This code is now running in production, with an active webhook subscription that accepts Strava events, and logs them for analysis.</p>

<p>To actually make use of the event data I'm collecting, I need to do more work. Here are some of the things that I would like to eventually accomplish using the foundation I've established.</p>

<ul>
<li>use the webhook to make requests for activity &amp; athlete information</li>
<li>use the webhook to disconnect the app if the user de-authorizes it</li>
<li>improve some of the coding &amp; design shortcuts/liberties taken above</li>
<li>schedule a periodic check to see if the subscription is active, and renew it if not</li>
<li>integrate it into the <a href="https://github.com/RichieMcMullen/laravel-strava/">laravel-strava</a> package</li>
</ul>

<p>I consider the last point to be quite important for the Laravel-Strava dev community at large. It is a long term goal of mine to eventually have all the Laravel-Strava API+webhook functionality in one package. There are a few caveats, though.</p>

<p>For one thing, the author of the package is not very active - understandably so! It is a huge responsibility to maintain a popular package, and it can become a burden if you're not actively vested in. If I were to get this functionality merged in, it would become my responsibility, at least partly.</p>

<p>For another, I'm having constant doubts about the API for this kind of functionality. What works for me may not work for others, and I'm not keen on endless debates or covering every possible scenario/use-case.</p>

<p>I have the option of building it into my own fork <a href="https://github.com/breadthe/laravel-strava">breadthe/laravel-strava</a>, so keep an eye on that in case you're interested.</p>

<p>Hopefully this was a helpful explanation of how I implemented Strava webhooks in my Laravel app. Feel free to use the code in any way you see fit, and hit me up on <a href="https://twitter.com/brbcoding">Twitter</a> for ideas or suggestions.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/fix-php-environment-m1-mac</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/fix-php-environment-m1-mac" />
    <title>How to restore a corrupted PHP environment on M1 Mac</title>
    <published>2021-07-05T00:00:00+00:00</published>
    <updated>2021-07-05T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">

Recently the local PHP 8 + Composer 2 + Laravel Valet dev environment on my M1 Mac Air got trashed for no discernable reason.
This might well be an obscure problem that no one else but me encounters, but I&#039;m documenting it nonetheless.

The rough chain......</summary>
    <content type="html"><![CDATA[
        <h2>The problem</h2>

<p>Recently the local PHP 8 + Composer 2 + Laravel Valet dev environment on my M1 Mac Air got trashed for no discernable reason.
This might well be an obscure problem that no one else but me encounters, but I'm documenting it nonetheless.</p>

<p>The rough chain of events happened as follows (I don't remember the exact details):</p>

<ul>
<li>I left on vacation for 2 weeks</li>
<li>I turned off the Air using the Shut Down command</li>
<li>I must have lifted the lid at some point and closed it back up, which turned it on (?)... woke it from sleep (?). I can never tell.</li>
<li>I took it with me, but over the 2 weeks the entire battery was drained (I didn't have time to use it)</li>
<li>When I got back and turned it back on (had to recharge it fully), I noticed that <a href="https://laravel.com/docs/8.x/valet">Laravel Valet</a> was down</li>
<li>Attempting to run any <code>php</code> or <code>composer</code> command resulted in the process being automatically killed:</li>
</ul>

<pre><code class="language-bash">php -v
[1]    27499 killed     php -v

composer -v
[1]    27590 killed     composer -v
</code></pre>

<p>Check program location:</p>

<pre><code class="language-bash">which php
/opt/homebrew/bin/php

which composer
/opt/homebrew/bin/composer
</code></pre>

<p>This hinted it might be a <a href="https://brew.sh/">Homebrew</a> issue.</p>

<h1>The solution</h1>

<p><em>First</em> I uninstalled PHP (8) with <code>brew uninstall --force php</code>:</p>

<pre><code class="language-bash">php -v
WARNING: PHP is not recommended
PHP is included in macOS for compatibility with legacy software.
Future versions of macOS will not include PHP.
PHP 7.3.24-(to be removed in future macOS) (cli) (built: May  8 2021 09:40:34) ( NTS )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.3.24, Copyright (c) 1998-2018 Zend Technologies

which php
/usr/bin/php
</code></pre>

<p><strong>Note</strong> uninstalling PHP 8 might not be strictly necessary, since it will probably get overwritten later down the line when I reinstall, but might as well for good measure.</p>

<p><em>Next</em>, uninstall Homebrew:</p>

<pre><code class="language-bash">/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh)"
</code></pre>

<p><em>Finally</em>, install the whole Laravel Valet environment, including a new version of Homebrew following this <a href="https://austencam.com/posts/setting-up-an-m1-mac-for-laravel-development-with-homebrew-php-mysql-valet-and-redis">helpful M1-specific guide</a> exactly.</p>

<p>The key is to use the <code>arm</code> Rosetta prefix (as specified in the article), which is something I might have omitted when I first set up this environment many months ago.</p>

<p>Check program locations again:</p>

<pre><code class="language-bash">which php
/usr/local/bin/php

which composer
/usr/local/bin/composer
</code></pre>

<p>Locations look good, and the environment should be working at this point.</p>

<h2>Error installing yarn</h2>

<p>One more issue, turns out <a href="https://yarnpkg.com/">yarn</a> also got messed up somehow. Yeah, I could switch to <code>npm</code> for my Laravel projects but I don't feel like adding a <code>package.lock</code> file, so I prefer to stick with yarn.</p>

<p>Unfortunately, attempting to install yarn produced another obscure error that took a while to research:</p>

<pre><code class="language-bash">npm install -g yarn

npm ERR! code EACCES
npm ERR! syscall mkdir
npm ERR! path /usr/local/lib/node_modules/yarn
npm ERR! errno -13
npm ERR! Error: EACCES: permission denied, mkdir '/usr/local/lib/node_modules/yarn'
npm ERR!  [Error: EACCES: permission denied, mkdir '/usr/local/lib/node_modules/yarn'] {
npm ERR!   errno: -13,
npm ERR!   code: 'EACCES',
npm ERR!   syscall: 'mkdir',
npm ERR!   path: '/usr/local/lib/node_modules/yarn'
npm ERR! }
npm ERR!
npm ERR! The operation was rejected by your operating system.
npm ERR! It is likely you do not have the permissions to access this file as the current user
npm ERR!
npm ERR! If you believe this might be a permissions issue, please double-check the
npm ERR! permissions of the file and its containing directories, or try running
npm ERR! the command again as root/Administrator.
</code></pre>

<p>The solution involved changing ownership on a couple folders, and this allowed the installation to proceed.</p>

<pre><code class="language-bash">sudo chown -R $USER /usr/lib/node_modules
sudo chown -R $USER /usr/local/lib/node_modules
npm install -g yarn

yarn -v
1.22.10
</code></pre>

<h2>Conclusion + rant</h2>

<p>Post-mortem analysis of this leaves me puzzled. I have no idea why the Homebrew versions of PHP and Composer got messed up like that. Perhaps something to do with certain processes that were running at the time getting corrupted when the system was forcefully shut down due to the low power state.</p>

<p>As much as I love the Mac, there's one thing about Mac laptops that I hate, and that is the power management with the lid open/closed.</p>

<p>Expected behavior when using <em>Shut Down</em>:</p>

<ul>
<li>the computer turns off completely - not asleep, OFF!</li>
<li>I close the lid, then I open it, it stays OFF!</li>
<li>it should power on only by pressing the Power button once</li>
</ul>

<p>Instead, what I get - regardless if I use <em>Sleep</em> or <em>Shut Down</em> - is this:</p>

<ul>
<li>the computer turns off (?) - it actually goes to sleep</li>
<li>I close the lid</li>
<li>if I leave it connected to an external monitor (but not plugged in), it drains all the battery overnight</li>
<li>I close the lid, then I open it, it wakes up</li>
<li>the Power button seems like a decoration at this point, since the computer powers up regardless, every time I open the lid</li>
</ul>

<p>There doesn't seem to be any setting that I can tweak to make it work the way I want. Both x86 and ARM versions behave similarly. If you have suggestions, let me know on <a href="https://twitter.com/brbcoding">Twitter</a>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/php-forked-package-workflow</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/php-forked-package-workflow" />
    <title>My PHP Forked Package Workflow</title>
    <published>2021-05-26T00:00:00+00:00</published>
    <updated>2021-05-26T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Packages are great - they bring specific functionality out of the box, without the need to re-invent it yourself. The downside is that each additional package installed into an application creates one extra dependency. Eventually, one of these......</summary>
    <content type="html"><![CDATA[
        <p>Packages are great - they bring specific functionality out of the box, without the need to re-invent it yourself. The downside is that each additional package installed into an application creates one extra dependency. Eventually, one of these dependencies will lag behind, potentially causing your project to grind to a halt.</p>

<p>My personal preference is to keep dependencies at a minimum, for several reasons, but that's a rant for another time.</p>

<p>Here are a few ways in which 3rd party packages can cause headaches:</p>

<ul>
<li>the package stops being maintained</li>
<li>the author is slow to release new features or fix bugs</li>
<li>the package isn't updated in a timely manner for new language or framework versions</li>
</ul>

<p>When a dependency "breaks" for me, I typically do the following:</p>

<ul>
<li>fork the package</li>
<li>implement a fix</li>
<li>make a pull request to the original repository</li>
<li>while waiting for the PR to be merged (not always guaranteed), I'll switch to using the fork</li>
</ul>

<p>This will get me unstuck for the time being, but the ideal outcome is for my contribution to be accepted in the official package.</p>

<h2>Quick primer on PHP package management</h2>

<p>In PHP we use <code>composer</code> to manage packages (install, remove, update, etc). Dependencies are defined in the <code>composer.json</code> file.</p>

<p>To install a new package, we run the following command (actual example from one of my apps):</p>

<pre><code class="language-bash">composer require codetoad/strava
</code></pre>

<p>This creates an entry in <code>composer.json</code> like so:</p>

<pre><code class="language-json">...
    "require": {
        "php": "^8.0",
        "ext-json": "*",
        "codetoad/strava": "^1.0",
        ...
    },
...
</code></pre>

<p>Note that the official repository for this package is located at <a href="https://github.com/RichieMcMullen/laravel-strava">https://github.com/RichieMcMullen/laravel-strava</a>.</p>

<h2>Forking the original package</h2>

<p>Continuing on the previous example, I've been using the Laravel Strava package in one of my apps, and so far it's been great at pulling data <em>from</em> Strava's API. However, it does not have the ability to modify data.</p>

<p>I decided I wanted to update several parameters belonging to an Activity, such as name, description, and gear. Since I couldn't simply ask the author to implement this for me, I knew I had to do it myself.</p>

<p>The first step is to fork the package. In GitHub, simply click the Fork button in the top right corner, and it will create a copy of the repository under your own organization. For me, that would be <a href="https://github.com/breadthe/laravel-strava">https://github.com/breadthe/laravel-strava</a>.</p>

<h2>Clone the fork locally</h2>

<p>Now I want to work on the fork locally, so I simply clone it with <code>git clone https://github.com/breadthe/laravel-strava</code>, then implement the features I need.</p>

<h2>Linking the app to the local fork</h2>

<p>One of the cool things Composer lets you do is to link a package to a local directory. This can be done with a relative or absolute link.</p>

<p>I cloned the forked package in the following directory (Mac): <code>/Users/myuser/code/packages/php/laravel-strava</code>.</p>

<p>The app that requires the package is in <code>/Users/myuser/code/laravel/example-app</code>. Let's switch to it now, in the terminal. Then I'm going to remove the <code>codetoad/strava</code> package using Composer.</p>

<pre><code class="language-bash">cd /Users/myuser/code/laravel/example-app
composer remove codetoad/strava
</code></pre>

<p>Open up <code>composer.json</code> and add the following top-level key:</p>

<pre><code class="language-json">    "repositories": [
        {
            "type": "path",
            "url": "/Users/myuser/code/packages/php/laravel-strava"
        }
    ],
</code></pre>

<p>This tells Composer to install a package called <code>laravel-strava</code> from the local path. Alternatively, you can use a relative path such as <code>../../packages/php/laravel-strava</code>.</p>

<p>Finally install the package with a <code>@dev</code> constraint:</p>

<pre><code class="language-bash">composer require codetoad/strava @dev
</code></pre>

<p>You should see this in <code>composer.json</code>:</p>

<pre><code class="language-json">    "require": {
        "php": "^8.0",
        "ext-json": "*",
        "codetoad/strava": "@dev",
        ...
</code></pre>

<p>Now any changes made to the local fork will appear in the app.</p>

<h2>Linking the app to the remote fork</h2>

<p>Once local development on the fork is complete, I can push my changes to the remote fork. From there, I can create a pull request to the original package, and hope the changes will be accepted.</p>

<p>Meanwhile, there's no need to delay development, since I can simply link to my own fork.</p>

<p>To do this, once again remove the package:</p>

<pre><code class="language-bash">composer remove codetoad/strava
</code></pre>

<p>Then modify the <code>repositories</code> key in <code>composer.json</code> like so:</p>

<pre><code class="language-json">    "repositories": [
        {
            "type": "vcs",
            "url": "https://github.com/breadthe/laravel-strava"
        }
    ],
</code></pre>

<p>This tells Composer to install a package called <code>laravel-strava</code> from the Version Control System location specified in the URL (instead of the default repo for <code>codetoad/strava</code>).</p>

<p>Finally, install the package once more, with a <code>dev-master</code> constraint:</p>

<pre><code class="language-bash">composer require codetoad/strava dev-master
</code></pre>

<p>You should see this in <code>composer.json</code>:</p>

<pre><code class="language-json">    "require": {
        "php": "^8.0",
        "ext-json": "*",
        "codetoad/strava": "dev-master",
        ...
</code></pre>

<p>And that's it. The app can now be deployed to a production server, and running <code>composer install</code> will install the forked package.</p>

<h2>PR merged, now what?</h2>

<p>At the time of writing this, my PR hasn't yet been merged, but here's what I would do next:</p>

<ul>
<li>remove the package <code>composer remove codetoad/strava</code></li>
<li>remove the <code>repositories</code> key from <code>composer.json</code></li>
<li>(optional) delete the <code>vendor/</code> folder</li>
<li>run the original install command <code>composer require codetoad/strava</code></li>
</ul>

<h2>Conclusion</h2>

<p>This is simpler than it sounds, but I had to document it for my own benefit. I don't deal with forks often enough to have it committed to muscle memory, so writing it down will definitely help when I need it again. I hope it will be useful to you as well, and if I missed anything or you find any mistakes, let me know on <a href="https://twitter.com/brbcoding/">Twitter</a>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/dynamic-svelte-component-router-pattern</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/dynamic-svelte-component-router-pattern" />
    <title>The Dynamic Svelte Component Router Pattern</title>
    <published>2021-04-27T00:00:00+00:00</published>
    <updated>2021-04-27T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Svelte does not come with a built-in router, and there are good reasons for that. One is to keep the framework lean. Another might be to defer the choice of router to the individual developer. There are situation where you might need some form of......</summary>
    <content type="html"><![CDATA[
        <p><a href="https://svelte.dev/">Svelte</a> does not come with a built-in router, and there are good reasons for that. One is to keep the framework lean. Another might be to defer the choice of router to the individual developer. There are situation where you might need some form of routing, but may not want to deal with a third party library.</p>

<p>Electron apps built with Svelte are a common scenario for this. Since I haven't found any opinions on how one might handle navigation between different app sections (or pages), I created my own pattern. I call it the <strong>Dynamic Svelte Component Router Pattern</strong>. It sounds pretentious, and I'm sure others are using the exact same thing, but here it is nonetheless.</p>

<p>My interpretation of this assumes there won't be any URL or query parameters passed to the "route". There is no need for it - in the Electron apps (or any SPA) I build, I prefer to pass variables using props, events, or state.</p>

<h2>Dynamic components with &lt;svelte:component&gt;</h2>

<p>The basic premise behind this pattern is Svelte's built-in <a href="https://svelte.dev/docs#svelte_component">dynamic components</a> using this syntax:</p>

<pre><code class="language-html">&lt;svelte:component this={expression}/&gt;
</code></pre>

<p>To keep things simple, let's assume my app has 2 sections: a <em>Dashboard</em>, and a <em>Settings</em> page. There's also a menu with links to each. I will keep the current page in a very simple store.</p>

<p><strong>TL;DR</strong> You can see the final example in the <a href="https://svelte.dev/repl/340dac4861e8499ca4d4092214649c3c?version=3.37.0">Svelte REPL</a>. Keep reading for more details.</p>

<h2>Explainer</h2>

<!-- The 5 files in this example are: -->

<ul>
<li><code>App.svelte</code> - The "wrapper" which handles the dynamic component rendering.</li>
</ul>

<p>It imports the page store, the menu component, and the two page components.</p>

<p>Next, it defines an array of pages. I use this to get a reference to the component that should be loaded dynamically.
This part feels a bit messy, and I have a feeling there might be a better way to handle this, but this is what I came up with.</p>

<p>Finally, the dynamic component matches the store value (<code>$page</code>) with an id in the <code>pages</code> array, and then returns the <code>component</code> property which then gets loaded.</p>

<p>The issue here is that you can't just do <code>const pages = ['Dashboard', 'Settings'];</code>, and then <code>pages.find((p) =&gt; p === $page)</code>, because it will try to pass a string instead of the actual component object to <code>this={expression}</code>. In other words, it will do this <code>&lt;svelte:component this={"Dashboard"}/&gt;</code> instead of this <code>&lt;svelte:component this={Dashboard}/&gt;</code>, and that will throw an error.</p>

<p>Thus, the workaround is to use the array I just mentioned. It may not be pretty but it does the job.</p>

<pre><code class="language-html">&lt;script&gt;
  import { page } from "./store";
  import Menu from "./Menu.svelte";
  import Dashboard from "./Dashboard.svelte";
  import Settings from "./Settings.svelte";

  const pages = [
    { id: "Dashboard", component: Dashboard },
    { id: "Settings", component: Settings },
  ];
&lt;/script&gt;

&lt;main&gt;
    &lt;Menu /&gt;

    &lt;svelte:component this={pages.find((p) =&gt; p.id === $page).component} /&gt;
&lt;/main&gt;
</code></pre>

<ul>
<li><code>Menu.svelte</code> - Renders the menu links and saves the selected page to the store.</li>
</ul>

<p>Clicking a link saves a string value of the desired page to the store.</p>

<pre><code class="language-html">&lt;script&gt;
    import { page } from "./store";
&lt;/script&gt;

&lt;nav&gt;
    &lt;ul&gt;
        &lt;li&gt;
            &lt;a href="/" on:click|preventDefault={() =&gt; $page = 'Dashboard'}&gt;Dashboard&lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;a href="/" on:click|preventDefault={() =&gt; $page = 'Settings'}&gt;Settings&lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;a href="/" on:click|preventDefault={() =&gt; $page = 'Foo'}&gt;Foo&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/nav&gt;

&lt;style&gt;
    ul { margin:0; padding: 1rem; background-color: cornsilk; }
    li { display: inline; padding: 1rem; }
&lt;/style&gt;
</code></pre>

<ul>
<li><p><code>Dashboard.svelte</code> + <code>Settings.svelte</code> - The two pages that will ultimately hold whatever you need them to.</p></li>
<li><p><code>store.js</code> - Stores the current page.</p></li>
</ul>

<p>The simplest possible writable store is initialized with the <em>Dashboard</em> as default.</p>

<pre><code class="language-js">import { writable } from "svelte/store";

export const page = writable('Dashboard');
</code></pre>

<p>And that's it! Clicking the links loads the appropriate component.</p>

<h2>But wait, what about invalid pages?</h2>

<p>In my apps so far, all the pages/sections have been static and well defined, so I didn't bother checking if the clicked page actually exists.</p>

<p><code>&lt;svelte:component this={expression}/&gt;</code> will simple fail to render if <code>expression</code> is falsy. In this example, the result of <code>pages.find((p) =&gt; p.id === $page).component</code> is <em>undefined</em>, not <em>false</em>. So clicking a page that is not defined in the <code>pages</code> array (such as <em>Foo</em>) will throw an ugly error to the console and block the app.</p>

<p>To handle this more gracefully, I made some changes.</p>

<p>First, I wrapped the component finder in a try/catch, returning <em>false</em> if it's not found.</p>

<pre><code class="language-js">const getComponent = function () {
    try {
        return pages.find((p) =&gt; p.id === $page).component;
    } catch (e) {
        return false;
    }
}
</code></pre>

<p>Then the dynamic component tag becomes:</p>

<pre><code class="language-html">&lt;svelte:component this={getComponent()} /&gt;
</code></pre>

<p>Now, clicking the invalid <em>Foo</em> link will render empty content, but won't break the page anymore, so we can continue navigating to the other pages.</p>

<h2>Add a 404 page</h2>

<p>This last step is probably not needed, unless you are generating component names dynamically based on user input.</p>

<p>As a further enhancement, instead of returning <em>false</em>, it's trivial to return a custom 404 page.</p>

<p>So I created an error component called <code>404.svelte</code>, cloned from <code>Dashboard.svelte</code>. Here's how the final <code>App.svelte</code> looks, after importing the error component:</p>

<pre><code class="language-html">&lt;script&gt;
  import { page } from "./store";
  import Menu from "./Menu.svelte";
  import Dashboard from "./Dashboard.svelte";
  import Settings from "./Settings.svelte";
  import NotFound from "./404.svelte";

  const pages = [
    { id: "Dashboard", component: Dashboard },
    { id: "Settings", component: Settings },
  ];

    const getComponent = function () {
        try {
            return pages.find((p) =&gt; p.id === $page).component;
        } catch (e) {
            return NotFound;
        }
    }
&lt;/script&gt;

&lt;main&gt;
    &lt;Menu /&gt;

    &lt;svelte:component this={getComponent()} /&gt;
&lt;/main&gt;
</code></pre>

<p>And that's all there is to it!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/svelte-kit-tailwind</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/svelte-kit-tailwind" />
    <title>SvelteKit with TailwindCSS and JIT</title>
    <published>2021-04-12T00:00:00+00:00</published>
    <updated>2021-04-12T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Svelte is my all-time favorite JS framework. Fresh on its heels comes SvelteKit, a framework for generating static sites with Svelte. Just what the doctor ordered.

SvelteKit is currently in public beta, but it&#039;s caused a lot of chatter over the......</summary>
    <content type="html"><![CDATA[
        <p><a href="https://svelte.dev/">Svelte</a> is my all-time favorite JS framework. Fresh on its heels comes <a href="https://kit.svelte.dev/">SvelteKit</a>, a framework for generating static sites with Svelte. Just what the doctor ordered.</p>

<p>SvelteKit is currently in public beta, but it's caused a lot of chatter over the interwebs, and that made me give it a spin.</p>

<p>Here's a super simple setup to scaffold a SvelteKit static site. Since I also ‚ù§Ô∏è TailwindCSS, I have instructions for that as well. And to make it a complete package, it all runs on <a href="https://vitejs.dev/">Vite</a>, for a super fast ‚ö°Ô∏è development environment.</p>

<p>Check out my newer <a href="/blog/svelte-vite-tailwindcss3-template/">Svelte, Vite, TailwindCSS 3</a> article if all you need is the base Svelte framework.</p>

<pre><code class="language-bash"># 1. Create a new Svelte Kit site
# My choices: no TypeScript, ESLint, Prettier
npm init svelte@next my-app

cd my-app

# 2. Install packages
npm install

# 3. Add TailwindCSS
# @see https://github.com/svelte-add/tailwindcss
npx svelte-add@latest tailwindcss
</code></pre>

<p>Step 3 automates most of Tailwind's configuration, by creating pre-populated configs for <code>postcss.config.cjs</code>, <code>tailwind.config.cjs</code>, and filling in the required PostCSS config in <code>svelte.config.cjs</code>.</p>

<p>To finalize installing Tailwind, open <code>app.css</code> and add the base Tailwind styles right at the top:</p>

<pre><code class="language-scss">@tailwind base;

// Custom CSS goes here

@tailwind components;
@tailwind utilities;
...
</code></pre>

<p>Finally start it in dev mode, and open it in the browser.</p>

<pre><code class="language-bash"># Run in development mode, and open the site in the browser
npm run dev -- --open
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/verify-pgp-signature-windows-10</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/verify-pgp-signature-windows-10" />
    <title>How to Verify a PGP Signature on Windows 10</title>
    <published>2021-03-28T00:00:00+00:00</published>
    <updated>2021-03-28T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Downloading and executing an &lt;code&gt;exe&lt;/code&gt; file on Windows is safer when it comes with a PGP signature that you can verify.

How do you check a PGP signature though? I&#039;ve always avoided it until now, when I needed to make double-certain that a certain......</summary>
    <content type="html"><![CDATA[
        <p>Downloading and executing an <code>exe</code> file on Windows is safer when it comes with a <a href="https://en.wikipedia.org/wiki/Pretty_Good_Privacy">PGP signature</a> that you can verify.</p>

<p>How do you check a PGP signature though? I've always avoided it until now, when I needed to make double-certain that a certain installer was the real deal.</p>

<h2>Installing the Windows 10 SDK</h2>

<p>Unfortunately Windows 10 does not offer any tools out of the box, instead requiring installation of the <a href="https://developer.microsoft.com/en-US/windows/downloads/windows-10-sdk/">Windows 10 SDK</a>.</p>

<p>After downloading and installing from the link above, the <a href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/signtool">SignTool</a> utility should become available. This is what you'll be using to verify PGP signatures.</p>

<h2>Checking the PGP signature</h2>

<p>Let's assume you downloaded a file called <code>installer.exe</code> from whatever website. If the website provided a PGP signature, it will likely be named <code>installer.exe.asc</code>, so download it in the same folder as the <code>.exe</code>.</p>

<p>First, locate the exact path of <code>signtool.exe</code>. Mine ended up in a weirdly-named folder: <code>C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64</code>. You may have multiple folders named similar to <code>10.0.17763.0</code>. Browse all of them until you find the tool.</p>

<p>Next, open <em>Command Prompt</em> and navigate to the directory where the file (<code>.exe</code>) and its signature (<code>.exe.asc</code>) reside.</p>

<p>Then run this command:</p>

<pre><code class="language-bash"># simplified - when you have signtool in your path
signtool verify /pa installer.exe

# full
C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\signtool.exe verify /pa installer.exe
</code></pre>

<p>If the verification succeeded, you will see this message:</p>

<pre><code class="language-bash">Successfully verified: &lt;path&gt;\installer.exe
</code></pre>

<p>This guide is based on these <a href="https://www.ghacks.net/2018/04/16/how-to-verify-digital-signatures-programs-in-windows/">instructions</a>, and adapted for my own use-case.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/svelte-electron-store-settings</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/svelte-electron-store-settings" />
    <title>How to Permanently Store Settings in a Svelte + Electron App</title>
    <published>2021-03-24T00:00:00+00:00</published>
    <updated>2021-03-24T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">A very common scenario when building an Electron app is storing user settings/preferences permanently. This can be done in a number of ways, but one of the most robust is to store the settings on disk, usually as a JSON object.

I&#039;ve been using Svelte......</summary>
    <content type="html"><![CDATA[
        <p>A very common scenario when building an Electron app is storing user settings/preferences permanently. This can be done in a number of ways, but one of the most robust is to store the settings on disk, usually as a JSON object.</p>

<p>I've been using Svelte for my Electron apps, because it's a joy to work on, so this guide is focused on Svelte, but could be adapted for other frameworks.</p>

<p>I'll use a simple (and very common) example: storing the user's theme (dark/light) preference, and I'll show a few ways in which this can be accomplished using Svelte's store.</p>

<p>The end goal is to be able to style elements depending on how the theme changes. A button toggles the theme. Here's a snippet, using TailwindCSS to apply classes:</p>

<pre><code class="language-js">import { dark } from "./store";

&lt;header
  class="flex"
  class:bg-gray-100={!$dark}
  class:bg-gray-900={$dark}
  class:text-gray-900={!$dark}
  class:text-gray-100={$dark}
&gt;
&lt;/header&gt;

&lt;button
    on:click={() =&gt; ($dark = !$dark)}
&gt;
    Switch to { $dark ? 'light' : 'dark' }
&lt;/button&gt;
</code></pre>

<p>When the theme is <code>dark</code>, the background and text are <code>bg-gray-900</code> and <code>text-gray-100</code>, respectively. Basically light text on dark background. When the theme is not <code>dark</code> (i.e. light), the opposite is applied.</p>

<p>Let's implement a store in Svelte. Stores are used to persist application state.</p>

<h2>A basic store</h2>

<p>The most basic Svelte store will persist a setting only while the app is running, as long as it wasn't refreshed. Here's how it looks:</p>

<pre><code class="language-js">// store.js
import { writable } from "svelte/store";

export const dark = writable(false);
</code></pre>

<p>The default in this case is the light theme (not <code>dark</code>). The obvious problem is that our preference goes away if we close or refresh the app.</p>

<h2>Persistent store with localStorage</h2>

<p>A simple and native way to permanently store settings is using the browser's <code>localStorage</code> API. It's super simple, the only downside being that you can only store key-value pairs, meaning you can't have complex objects. Fortunately you can use <code>JSON.stringify()</code> when setting a key, and <code>JSON.parse()</code> when reading it. For this simple example, this won't be needed, as we're just storing the boolean value.</p>

<pre><code class="language-js">// store.js
import { writable } from "svelte/store";

const storedDark = localStorage.getItem("currentFolder") || false;
export const dark = writable(storedDark);
dark.subscribe(value =&gt; {
    localStorage.setItem('dark', value);
});
</code></pre>

<p>The code gets slightly longer, but it does its job of persisting our preferences between app sessions.</p>

<h2>Persistent store/settings on disk</h2>

<p>The next step up is to store the settings on disk. In general this is perceived as being more robust than <code>localStorage</code> (which can lose data in rare cases when there's an error), and you can also retrieve and/or backup the settings file if you need to.</p>

<p>We'll need a 3rd party library, and there are many to choose from. I used <a href="https://github.com/nathanbuchar/electron-settings">electron-settings</a>. This library offers a more powerful API, with the ability to store deeply nested objects, and retrieve specific keys using dot notation (<code>setting1.setting2.setting3</code>).</p>

<p>Find the full documentation <a href="https://electron-settings.js.org/index.html">here</a>.</p>

<p>Install it:</p>

<pre><code class="language-bash">npm install electron-settings
</code></pre>

<p>If using Electron 10+, and you need to use <code>electron-settings</code> in the browser window, configure Electron like so:</p>

<pre><code class="language-js">new BrowserWindow({
  webPreferences: {
    enableRemoteModule: true // &lt;-- Add me
  }
});
</code></pre>

<p>Implementing the store is easy. It looks just like the <code>localStorage</code> store, except we're swapping out some functions. I prefer to use the <code>*Sync</code> functions here, but there are async equivalents.</p>

<pre><code class="language-js">// store.js
import { writable } from "svelte/store";
const settings = require('electron-settings');

const storedDark = settings.getSync('dark') || false;
export const dark = writable(storedDark);
dark.subscribe(value =&gt; {
    settings.setSync('dark', value);
});
</code></pre>

<p>By default <code>electron-settings</code> will save the settings file under the <code>userData</code> folder. On Mac, this would be under <code>/Users/YourUser/Library/Application Support/YourApp/settings.json</code>.</p>

<h2>Conclusion</h2>

<p>That's it! I showed you 3 ways to store settings in a Svelte + Electron app, with two of them permanent.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/deploy-svelte-to-netlify</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/deploy-svelte-to-netlify" />
    <title>How to Deploy Svelte to Netlify</title>
    <published>2021-03-14T00:00:00+00:00</published>
    <updated>2021-03-14T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">In this guide I&#039;m going to explain how to deploy a static Svelte site to Netlify. Let&#039;s get started.

The goal of this exercise is to deploy a simple Todo app from GitHub to Netlify.

First, create a free account with Netlify. When you log in you should......</summary>
    <content type="html"><![CDATA[
        <p>In this guide I'm going to explain how to deploy a static Svelte site to Netlify. Let's get started.</p>

<p>The goal of this exercise is to deploy a simple <a href="https://github.com/breadthe/svelte-todo">Todo app</a> from GitHub to <a href="https://www.netlify.com/">Netlify</a>.</p>

<p>First, create a free account with Netlify. When you log in you should see your dashboard which shows your sites:</p>

<p><img src="/assets/img/2021-03-14-netlify-dashboard.jpg" alt="Netlify dashboard" title="Netlify dashboard" /></p>

<p>I have 4 sites currently (including this blog), all deployed from GitHub. Except for the blog, which uses a custom domain, the 3 remaining sites use Netlify's <code>netlify.app</code> domain. For example <a href="https://craftnautica.netlify.app/">Craftnautica</a>.</p>

<h2>Preamble</h2>

<p>A Svelte + Rollup static site typically serves the static portion from a <code>public/</code> folder, and generates a production bundle (minified CSS + JS) in a <code>public/build/</code> folder. It can certainly be configured otherwise, and different frameworks will serve their bundles from <code>dist/</code> or <code>out/</code> or similar. This guide is about Svelte because this is what I'm using, but it can just as well apply to any framework that generates a static build.</p>

<h2>Connect to GitHub</h2>

<p>Click <strong>New site from Git</strong>, then select <strong>GitHub</strong>. You can use the same process for GitLab or Bitbucket.</p>

<p>Next you'll be presented with a list of repos that you can deploy, however there's a good chance the repo you want is not in the list.</p>

<p><img src="/assets/img/2021-03-14-netlify-github-repo-list.jpg" alt="Netlify - Where is my GitHub repo?" title="Netlify - Where is my GitHub repo?" /></p>

<p>Using the search to filter out the repos will show zero results.</p>

<p><img src="/assets/img/2021-03-14-netlify-search-github-repo.jpg" alt="Netlify connect to GitHub" title="Netlify connect to GitHub" /></p>

<p>The reason you're not seeing the repo is that it's not yet visible to Netlify. Basically Netlify can't just reach into your GitHub and grab any repo it wants - it requires explicit permission first. The idea is to prevent someone other than the owner from deploying, even if it's a public repo.</p>

<p>So let's give Netlify access to the <code>breadthe/svelte-todo</code> repo by clicking the <strong>Configure Netlify on GitHub</strong> button, or the <strong>Configure the Netlify app on GitHub</strong> link.</p>

<p>You'll be presented with another window asking which GitHub user to connect. Select <strong>Configure</strong>. You will need to provide your GitHub credentials next.</p>

<p><img src="/assets/img/2021-03-14-netlify-configure.jpg" alt="Configure Netlify" title="Configure Netlify" /></p>

<p>After you've logged in, scroll down until you reach <strong>Repository access</strong>. Making sure <em>Only select repositories</em> is selected, filter the list to find your repo. In my case, that would be <code>svelte-todo</code>.</p>

<p><img src="/assets/img/2021-03-14-netlify-github-repo-access.jpg" alt="Netlify GitHub repository access" title="Netlify GitHub repository access" /></p>

<p>Select it and hit Save. It will take you back to Netlify and the repo will now appear in the list that Netlify can see.</p>

<h2>Site settings</h2>

<p>Once you've selected the repo, you'll get the deployment settings screen.</p>

<p><img src="/assets/img/2021-03-14-netlify-deploy-site-settings.jpg" alt="Netlify deploy site settings" title="Netlify deploy site settings" /></p>

<p>Assuming you want to deploy the <code>master</code> branch of your repo, as in my case, keep the defaults.</p>

<p>Pay attention to the <strong>Build command</strong> (the <code>npm</code> / <code>yarn</code> command that generates the production build, defined in <code>package.json</code>). Here, it is <code>yarn build</code>, which is what I want, so I'll keep it.</p>

<p>The <strong>Publish directory</strong> default is <code>dist/</code>, however, and this does not match my Svelte project structure. What I want here is <code>public/</code> instead, so I'll change that.</p>

<p>Finally, click <strong>Deploy site</strong>.</p>

<h2>Deployment in progress</h2>

<p>Netlify will take a few minutes to deploy the site. Notice the <em>agitated-volhard-e0ff6a</em> identifier. This is the random sub-domain assigned to the new site. Once deployed, the site can be accessed from <strong>agitated-volhard-e0ff6a.netlify.app</strong>. That's ugly, of course, so unless it's a throwaway site, I'll show you how to change it in the next step.</p>

<p><img src="/assets/img/2021-03-14-netlify-deploy-in-progress.jpg" alt="Netlify deploy in progress" title="Netlify deploy in progress" /></p>

<h2>Custom domain</h2>

<p>Now that the deployment is complete, we can change the domain name by clicking <strong>Set up a custom domain</strong></p>

<p><img src="/assets/img/2021-03-14-netlify-deploy-done.jpg" alt="Netlify deployment complete" title="Netlify deployment complete" /></p>

<p>While you can absolutely use your own domain (for free) if you wish, for simple side projects I like to go with Netlify's domain, and choose a custom sub-domain.</p>

<p><img src="/assets/img/2021-03-14-netlify-change-subdomain.jpg" alt="Netlify change subdomain" title="Netlify change subdomain" /></p>

<p>To change the random subdomain from  <strong>agitated-volhard-e0ff6a.netlify.app</strong> to something more palatable, go to <strong>Site settings</strong> > <strong>Domain management</strong> > <strong>Custom domains</strong> > <strong>Options</strong> > <strong>Edit site name</strong>.</p>

<p><img src="/assets/img/2021-03-14-netlify-change-site-name.jpg" alt="Netlify change site name" title="Netlify change site name" /></p>

<p>Well, turns out "svelte-todo" wasn't available, so I picked "svelte-todo3". Now I can serve my site from <strong>svelte-todo3.netlify.app</strong>, but since I created it just for this guide, I'll delete it, and it won't be accessible anymore, freeing the <em>svelte-todo3</em> subdomain for reuse.</p>

<h2>Deploying changes</h2>

<p>Netlify has a variety of deployment options under <strong>Site settings</strong> > <strong>Continuous Deployment</strong>, but depending on the size of your team and project, a complex workflow might not be needed.</p>

<p>By default, Netlify will deploy any changes that were pushed to the <code>master</code> (older) or <code>main</code> (more recently) branch. If you're like me, hosting simple static sites in a team of one, this setup is just right.</p>

<h2>Conclusion</h2>

<p>It's fairly straightforward to deploy static content to Netlify. Svelte apps require a single tweak to get Netlify to serve them correctly. If you need more control over deployments or domains, it's there too.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/upgrade-php-7-4-to-8-ubuntu</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/upgrade-php-7-4-to-8-ubuntu" />
    <title>Upgrade PHP 7.4 to 8.0 on Ubuntu</title>
    <published>2021-03-05T00:00:00+00:00</published>
    <updated>2021-03-05T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I host several websites on a Linode VPS, originally provisioned with Laravel Forge. I have long since canceled my Forge subscription, and I do my own maintenance, manually. I may not be the quickest to upgrade to the latest version of anything, but I......</summary>
    <content type="html"><![CDATA[
        <p>I host several websites on a Linode VPS, originally provisioned with Laravel Forge. I have long since canceled my Forge subscription, and I do my own maintenance, manually. I may not be the quickest to upgrade to the latest version of anything, but I will do it eventually.</p>

<p>As an indie maker with zero revenue from my side projects, it wasn't making financial sense to pay for Forge. The biggest value Forge brought me was the initial provisioning of the instance. Afterwards, I continued to deploy code manually (how hard can <code>git pull</code> be?), and do my own basic server maintenance. I've been doing this successfully for the better part of the last 2 years.</p>

<p>This guide is about upgrading from PHP 7.4 to 8.0 on Ubuntu 18.04. As of this writing, I have yet to upgrade to Ubuntu 20.04, but it will happen soon(ish).</p>

<p>The instructions are partly based on this excellent <a href="https://php.watch/articles/php-8.0-installation-update-guide-debian-ubuntu">article</a>, but I've added many specifics, details, and pitfalls I encountered in my own situation. It wasn't exactly smooth sailing, as you'll see.</p>

<h2>Prep</h2>

<p>SSH into the instance, then...</p>

<pre><code class="language-bash"># Check PHP version
php -v
PHP 7.4.15 (cli) (built: Feb 23 2021 15:12:05) ( NTS )
Copyright (c) The PHP Group
Zend Engine v3.4.0, Copyright (c) Zend Technologies
    with Zend OPcache v7.4.15, Copyright (c), by Zend Technologies

# List all PHP packages
dpkg -l | grep php | tee packages.txt

# List
ii  php-common                             2:81+ubuntu18.04.1+deb.sury.org+1                                  all          Common files for PHP packages
ii  php-igbinary                           3.2.1+2.0.8-6+ubuntu18.04.1+deb.sury.org+1                         amd64        igbinary PHP serializer
ii  php-memcached                          3.1.5+2.2.0-9+ubuntu18.04.1+deb.sury.org+1                         amd64        memcached extension module for PHP, uses libmemcached
ii  php-msgpack                            2.1.2+0.5.7-6+ubuntu18.04.1+deb.sury.org+1                         amd64        PHP extension for interfacing with MessagePack
ii  php-pear                               1:1.10.12+submodules+notgz+20210212-1+ubuntu18.04.1+deb.sury.org+1 all          PEAR Base System
ii  php7.4-bcmath                          7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        Bcmath module for PHP
ii  php7.4-cli                             7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        command-line interpreter for the PHP scripting language
ii  php7.4-common                          7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        documentation, examples and common module for PHP
ii  php7.4-curl                            7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        CURL module for PHP
ii  php7.4-dev                             7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        Files for PHP7.4 module development
ii  php7.4-fpm                             7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        server-side, HTML-embedded scripting language (FPM-CGI binary)
ii  php7.4-gd                              7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        GD module for PHP
ii  php7.4-igbinary                        3.2.1+2.0.8-6+ubuntu18.04.1+deb.sury.org+1                         amd64        igbinary PHP serializer
ii  php7.4-imap                            7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        IMAP module for PHP
ii  php7.4-intl                            7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        Internationalisation module for PHP
ii  php7.4-json                            7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        JSON module for PHP
ii  php7.4-mbstring                        7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        MBSTRING module for PHP
rc  php7.4-memcached                       3.1.5+2.2.0-9+ubuntu18.04.1+deb.sury.org+1                         amd64        memcached extension module for PHP, uses libmemcached
ii  php7.4-msgpack                         2.1.2+0.5.7-6+ubuntu18.04.1+deb.sury.org+1                         amd64        PHP extension for interfacing with MessagePack
ii  php7.4-mysql                           7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        MySQL module for PHP
ii  php7.4-opcache                         7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        Zend OpCache module for PHP
ii  php7.4-pgsql                           7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        PostgreSQL module for PHP
ii  php7.4-readline                        7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        readline module for PHP
ii  php7.4-soap                            7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        SOAP module for PHP
ii  php7.4-sqlite3                         7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        SQLite3 module for PHP
ii  php7.4-xml                             7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        DOM, SimpleXML, XML, and XSL module for PHP
ii  php7.4-zip                             7.4.15-7+ubuntu18.04.1+deb.sury.org+1                              amd64        Zip module for PHP
ii  php8.0-common                          8.0.2-7+ubuntu18.04.1+deb.sury.org+1                               amd64        documentation, examples and common module for PHP
ii  php8.0-igbinary                        3.2.1+2.0.8-6+ubuntu18.04.1+deb.sury.org+1                         amd64        igbinary PHP serializer
ii  php8.0-memcached                       3.1.5+2.2.0-9+ubuntu18.04.1+deb.sury.org+1                         amd64        memcached extension module for PHP, uses libmemcached
ii  php8.0-msgpack                         2.1.2+0.5.7-6+ubuntu18.04.1+deb.sury.org+1                         amd64        PHP extension for interfacing with MessagePack
ii  pkg-php-tools                          1.35ubuntu1                                                        all          various packaging tools and scripts for PHP packages
</code></pre>

<h2>Add PPAs</h2>

<pre><code class="language-bash"># Add ondrej/php PPA
sudo add-apt-repository ppa:ondrej/php # Press enter when prompted.
# CAVEATS:
# 1. If you are using php-gearman, you need to add ppa:ondrej/pkg-gearman
# 2. If you are using apache2, you are advised to add ppa:ondrej/apache2
# 3. If you are using nginx, you are advised to add ppa:ondrej/nginx-mainline or ppa:ondrej/nginx

sudo add-apt-repository ppa:ondrej/nginx

# Remove a repository (not needed here, listed for reference)
# sudo add-apt-repository --remove ppa:ondrej/nginx

# Check if PPA was added - should see a number of entries
grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* | grep ondrej/php
grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* | grep ondrej/nginx

sudo apt-get update
</code></pre>

<h2>Install PHP 8.0</h2>

<pre><code class="language-bash">sudo apt install php8.0-common php8.0-cli -y

# Check version
php -v
PHP 8.0.2 (cli) (built: Feb 23 2021 15:13:59) ( NTS )
Copyright (c) The PHP Group
Zend Engine v4.0.2, Copyright (c) Zend Technologies
    with Zend OPcache v8.0.2, Copyright (c), by Zend Technologies

# Check modules (each will appear on its own line, listed on a single line here for brevity)
php -m
[PHP Modules] calendar Core ctype date exif FFI fileinfo filter ftp gettext hash iconv igbinary json libxml memcached msgpack openssl pcntl pcre PDO Phar posix readline Reflection session shmop sockets sodium SPL standard sysvmsg sysvsem sysvshm tokenizer Zend OPcache zlib
[Zend Modules]
Zend OPcache

# Install additional extensions that were present in 7.4
# Note: no need to install php8.0-json; it's already provided by other packages  
sudo apt install php8.0-{bcmath,curl,dev,fpm,gd,igbinary,imap,intl,mbstring,memcached,msgpack,mysql,opcache,pgsql,readline,soap,sqlite3,xml,zip}
</code></pre>

<h2>Cleanup</h2>

<p>Since I won't be using old versions of PHP (&lt; 7.4), now is a good time to remove them.</p>

<pre><code class="language-bash"># Purge old packages, in my case from PHP 5.6 thru 7.3
sudo apt purge '^php5.6.*'
sudo apt purge '^php7.0.*'
sudo apt purge '^php7.1.*'
sudo apt purge '^php7.2.*'
sudo apt purge '^php7.3.*'
</code></pre>

<h2>Update Nginx config for each site</h2>

<p>This is for Nginx servers only. Sorry, I can't help you with Apache.</p>

<p>Repeat the procedure for each site. There's a way to automate it, probably with <code>sed</code> but I don't do this often enough to warrant the</p>

<pre><code class="language-bash">sudo vi /etc/nginx/sites-enabled/example.com

# Look for the following block
location ~ \.php$ {
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    fastcgi_pass unix:/var/run/php/php7.4-fpm.sock; # change to php8.0-fpm.sock or even better to php8.0-fpm.sock
    fastcgi_index index.php;
    include fastcgi_params;
}

# Test Nginx config
sudo nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful

# Restart PHP FPM &amp; Nginx
sudo service php8.0-fpm restart
sudo service nginx restart
</code></pre>

<p><strong>Note</strong> The reason I recommend using the generic <code>php-fpm.sock</code> instead of <code>php8.0-fpm.sock</code>  is because, on my server at least, <code>php-fpm.sock</code> is actually aliased to <code>php8.0-fpm.sock</code>. Run these commands to find out:</p>

<pre><code class="language-bash">ls -al /var/run/php/php-fpm.sock # /var/run/php/php-fpm.sock -&gt; /etc/alternatives/php-fpm.sock
ls -al /etc/alternatives/php-fpm.sock # /etc/alternatives/php-fpm.sock -&gt; /run/php/php8.0-fpm.sock
</code></pre>

<p>I don't know the specifics of why it is so, but I assume it was done as part of the PHP 8 upgrade, which works really well for me as I don't have to worry about changing the Nginx config the next time I upgrade PHP.</p>

<h2>Composer install errors?</h2>

<p>Let's say that, after upgrading PHP to the shiny new 8.0, you want to run <code>composer install --no-interaction --prefer-dist --optimize-autoloader</code> in your Laravel project, and see the following errors:</p>

<pre><code class="language-bash">Deprecation Notice: Required parameter $path follows optional parameter $schema in phar:///usr/local/bin/composer/vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/UndefinedConstraint.php:62
Deprecation Notice: Required parameter $path follows optional parameter $schema in phar:///usr/local/bin/composer/vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/UndefinedConstraint.php:108
Deprecation Notice: Method ReflectionParameter::getClass() is deprecated in phar:///usr/local/bin/composer/src/Composer/Repository/RepositoryManager.php:130
Deprecation Notice: Method ReflectionParameter::getClass() is deprecated in phar:///usr/local/bin/composer/src/Composer/Repository/RepositoryManager.php:130
Loading composer repositories with package information
Installing dependencies (including require-dev) from lock file
PHP Fatal error:  Uncaught ArgumentCountError: array_merge() does not accept unknown named parameters in phar:///usr/local/bin/composer/src/Composer/DependencyResolver/DefaultPolicy.php:84
Stack trace:
#0 [internal function]: array_merge()
#1 phar:///usr/local/bin/composer/src/Composer/DependencyResolver/DefaultPolicy.php(84): call_user_func_array()
#2 phar:///usr/local/bin/composer/src/Composer/DependencyResolver/Solver.php(387): Composer\DependencyResolver\DefaultPolicy-&gt;selectPreferredPackages()
#3 phar:///usr/local/bin/composer/src/Composer/DependencyResolver/Solver.php(740): Composer\DependencyResolver\Solver-&gt;selectAndInstall()
#4 phar:///usr/local/bin/composer/src/Composer/DependencyResolver/Solver.php(231): Composer\DependencyResolver\Solver-&gt;runSat()
#5 phar:///usr/local/bin/composer/src/Composer/Installer.php(489): Composer\DependencyResolver\Solver-&gt;solve()
#6 phar:///usr/local/bin/composer/src/Composer/Installer.php(232): Composer\Installer-&gt;doInstall()
#7 phar:///usr/local/bin/composer/src/Composer/Command/InstallCommand.php(122): Composer\Installer-&gt;run()
#8 phar:///usr/local/bin/composer/vendor/symfony/console/Command/Command.php(245): Composer\Command\InstallCommand-&gt;execute()
#9 phar:///usr/local/bin/composer/vendor/symfony/console/Application.php(835): Symfony\Component\Console\Command\Command-&gt;run()
#10 phar:///usr/local/bin/composer/vendor/symfony/console/Application.php(185): Symfony\Component\Console\Application-&gt;doRunCommand()
#11 phar:///usr/local/bin/composer/src/Composer/Console/Application.php(281): Symfony\Component\Console\Application-&gt;doRun()
#12 phar:///usr/local/bin/composer/vendor/symfony/console/Application.php(117): Composer\Console\Application-&gt;doRun()
#13 phar:///usr/local/bin/composer/src/Composer/Console/Application.php(113): Symfony\Component\Console\Application-&gt;run()
#14 phar:///usr/local/bin/composer/bin/composer(61): Composer\Console\Application-&gt;run()
#15 /usr/local/bin/composer(24): require('...')
#16 {main}
  thrown in phar:///usr/local/bin/composer/src/Composer/DependencyResolver/DefaultPolicy.php on line 84

Fatal error: Uncaught ArgumentCountError: array_merge() does not accept unknown named parameters in phar:///usr/local/bin/composer/src/Composer/DependencyResolver/DefaultPolicy.php:84
Stack trace:
#0 [internal function]: array_merge()
#1 phar:///usr/local/bin/composer/src/Composer/DependencyResolver/DefaultPolicy.php(84): call_user_func_array()
#2 phar:///usr/local/bin/composer/src/Composer/DependencyResolver/Solver.php(387): Composer\DependencyResolver\DefaultPolicy-&gt;selectPreferredPackages()
#3 phar:///usr/local/bin/composer/src/Composer/DependencyResolver/Solver.php(740): Composer\DependencyResolver\Solver-&gt;selectAndInstall()
#4 phar:///usr/local/bin/composer/src/Composer/DependencyResolver/Solver.php(231): Composer\DependencyResolver\Solver-&gt;runSat()
#5 phar:///usr/local/bin/composer/src/Composer/Installer.php(489): Composer\DependencyResolver\Solver-&gt;solve()
#6 phar:///usr/local/bin/composer/src/Composer/Installer.php(232): Composer\Installer-&gt;doInstall()
#7 phar:///usr/local/bin/composer/src/Composer/Command/InstallCommand.php(122): Composer\Installer-&gt;run()
#8 phar:///usr/local/bin/composer/vendor/symfony/console/Command/Command.php(245): Composer\Command\InstallCommand-&gt;execute()
#9 phar:///usr/local/bin/composer/vendor/symfony/console/Application.php(835): Symfony\Component\Console\Command\Command-&gt;run()
#10 phar:///usr/local/bin/composer/vendor/symfony/console/Application.php(185): Symfony\Component\Console\Application-&gt;doRunCommand()
#11 phar:///usr/local/bin/composer/src/Composer/Console/Application.php(281): Symfony\Component\Console\Application-&gt;doRun()
#12 phar:///usr/local/bin/composer/vendor/symfony/console/Application.php(117): Composer\Console\Application-&gt;doRun()
#13 phar:///usr/local/bin/composer/src/Composer/Console/Application.php(113): Symfony\Component\Console\Application-&gt;run()
#14 phar:///usr/local/bin/composer/bin/composer(61): Composer\Console\Application-&gt;run()
#15 /usr/local/bin/composer(24): require('...')
#16 {main}
  thrown in phar:///usr/local/bin/composer/src/Composer/DependencyResolver/DefaultPolicy.php on line 84
</code></pre>

<p>Oops, apparently I completely forgot that my server still runs Composer 1.0, while my local environment was upgraded to 2.0 a long time ago. Time to upgrade the server too.</p>

<h2>Upgrade Composer from 1.0 to 2.0</h2>

<p>This <a href="https://blog.laravel.com/upgrading-to-composer-v2">article</a> partially covers the procedure, but here are my own steps:</p>

<pre><code class="language-bash"># Check version
composer --version
Composer version 1.10.1 2020-03-13 20:34:27

# Upgrade Composer to 2.0
sudo composer self-update

# Downgrade Composer to 1.0 (in case you need it)
# sudo composer self-update --rollback # return to version 1.10.1

# Check version
composer --version
Composer version 2.0.11 2021-02-24 14:57:23
</code></pre>

<p><code>composer install</code> should once again work without issues.</p>

<h2>500 Internal Server Error</h2>

<p>Everything looks fine and dandy, right? Not so fast. There's always a final wrench in the proverbial gears. You may not encounter this specific issue, but it's absolutely worth documenting.</p>

<p>When I loaded one of my main Laravel sites in the browser, I was presented with a nice blank page (production client reporting is off as it should be), but with a <code>500 Internal Server Error</code> in the dev console. So let's tail the Nginx app log to see what is going on, using <code>tail -f /var/log/nginx/example.com-error.log</code>:</p>

<pre><code class="language-bash">2021/03/05 06:42:09 [error] 836#836: *1 FastCGI sent in stderr: "PHP message: PHP Fatal error:  Uncaught ErrorException: file_put_contents(/home/forge/example.com/storage/framework/views/2e31adb7dfd4e14cc6108d8b49272e43adaa7371.php): Failed to open stream: Permission denied in /home/forge/example.com/vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php:135
Stack trace:
#0 [internal function]: Illuminate\Foundation\Bootstrap\HandleExceptions-&gt;handleError()
#1 /home/forge/example.com/vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php(135): file_put_contents()
#2 /home/forge/example.com/vendor/laravel/framework/src/Illuminate/View/Compilers/BladeCompiler.php(150): Illuminate\Filesystem\Filesystem-&gt;put()
#3 /home/forge/example.com/vendor/laravel/framework/src/Illuminate/View/Engines/CompilerEngine.php(51): Illuminate\View\Compilers\BladeCompiler-&gt;compile()
#4 /home/forge/example.com/vendor/facade/ignition/src/Views/Engines/CompilerEngine.php(37): Illuminate\View\Engines\CompilerEngine-&gt;get()
#5 /home/forge/example.com/vendor/laravel/fram...PHP message: PHP Fatal error:  Uncaught ErrorException: file_put_contents(/home/forge/example.com/storage/framework/views/2e31adb7dfd4e14cc6108d8b49272e43adaa7371.php): Failed to open stream: Permission denied in /home/forge/example.com/vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php:135
Stack trace:
#0 [internal function]: Illuminate\Foundation\Bootstrap\HandleExceptions-&gt;handleError()
#1 /home/forge/example.com/vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php(135): file_put_contents()
#2 /home/forge/example.com/vendor/laravel/framework/src/Illuminate/View/Compilers/BladeCompiler.php(150): Illuminate\Filesystem\Filesystem-&gt;put()
#3 /home/forge/example.com/vendor/laravel/framework/src/Illuminate/View/Engines/CompilerEngine.php(51): Illuminate\View\Compilers\BladeCompiler-&gt;compile()
#4 /home/forge/example.com/vendor/facade/ignition/src/Views/Engines/CompilerEngine.php(37): Illuminate\View\Engines\CompilerEngine-&gt;get()
</code></pre>

<p>At first glance it looks like Laravel doesn't have permissions to write to the <code>storage/</code> folder.</p>

<p>After some digging, I realized that ownership and permissions for the <code>storage/</code> folder have changed for some reason. I seem to recall a similar situation from a couple of years back.</p>

<p>An easy way to find if permissions are out of whack is to compare with another site that still works. Right away I noticed that the sub-folders in <code>storage/</code> had <code>755</code> permissions instead of <code>775</code>.</p>

<pre><code class="language-bash"># Before 755
ls -al /home/forge/example.com/storage/framework/
total 76
drwxr-xr-x 6 forge forge  4096 Mar  5 07:00 .
drwxr-xr-x 6 forge forge  4096 Aug 23  2019 ..
drwxr-xr-x 3 forge forge  4096 Aug 23  2019 cache
-rwxr-xr-x 1 forge forge   103 Aug 23  2019 .gitignore
drwxr-xr-x 2 forge forge 40960 Mar  5 06:16 sessions
drwxr-xr-x 2 forge forge  4096 Aug 23  2019 testing
drwxr-xr-x 2 forge forge 12288 Mar  5 06:37 views

# Recursively fix ownership and permissions 
sudo chown -R forge:www-data storage
sudo chmod -R ug+w storage

# After 775
ls -al /home/forge/example.com/storage/framework/
total 48
drwxrwxr-x 6 forge forge  4096 Jan 19  2020 .
drwxrwxr-x 5 forge forge  4096 Jan 19  2020 ..
drwxrwxr-x 3 forge forge  4096 Jan 19  2020 cache
-rwxrwxr-x 1 forge forge   103 Jan 19  2020 .gitignore
drwxr-xr-x 2 forge forge 40960 Mar  5 06:16 sessions
drwxrwxr-x 2 forge forge  4096 Jan 19  2020 testing
drwxr-xr-x 2 forge forge 12288 Mar  5 06:37 views

php artisan cache:clear
composer dumpautoload
sudo service nginx restart
# OK
</code></pre>

<h2>The end</h2>

<p>This concludes the PHP 7.4 -> 8.0 upgrade. All systems are green. Lessons were learned.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/ode-to-the-mac</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/ode-to-the-mac" />
    <title>Ode to the Mac</title>
    <published>2021-02-20T00:00:00+00:00</published>
    <updated>2021-02-20T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Is it wrong to idolize an inanimate object produced by a soulless corporation? Depends on whom you ask. I, for one, feel warm and fuzzy every time I pick up my Mac. The joy it has brought me over the years is hard to express in words, but I&#039;ll try,......</summary>
    <content type="html"><![CDATA[
        <p>Is it wrong to idolize an inanimate object produced by a soulless corporation? Depends on whom you ask. I, for one, feel warm and fuzzy every time I pick up my Mac. The joy it has brought me over the years is hard to express in words, but I'll try, nonetheless, in this ode of sorts to the Mac.</p>

<h2>A born and raised PC user</h2>

<p>I started out as a Mac hater or, at the very least, contemptuous of the Mac culture I perceived to be borderline fanatical.</p>

<p>You see, I was born and partially raised in Romania. After the fall of communism and the onset of democracy, the computer industry - more precisely the PC - exploded. Everyone got access to cheap PC hardware and all the pirated software they could handle. For a while it seemed like there wasn't a single piece of legal software in the whole country. I only slightly exaggerate, but for a newly emerging democracy it was par for the course. From regular people, to companies, to public institutions and government agencies, software piracy was as natural as three meals a day.</p>

<p>I still remember the Microsoft anti-piracy campaigns from the 90s and early 2000s. The educational propaganda was especially hilarious because it assumed people could actually afford to pay for software at western rates, when the average monthly income was $100 or less. For reference, my first full time software developer job in the early 2000s paid $250 a month.</p>

<p>I stopped pirating software a very long time ago, after income grew, and it became more worthwhile to buy the licensed product. Whatever your feelings about piracy, it did help create a class of skilled software developers that has thrived up to this day. Often you'll hear of Romanian (and other Eastern European) hackers in the news. You'll also find Romanian developers across the world, as many of us have left the country for better pastures.</p>

<p>During those early days, the PC was seen as the cheapest way to get into computers. You could piece it together from used parts traded from your friends. The hardware could run not just (pirated) Windows, but also Linux.</p>

<p>As for Apple computers, I don't remember hearing of anyone owning one before the 2000s. The Mac was perceived as a luxury product that only high-end agencies or wealthy people used.</p>

<h2>Mac users are chumps</h2>

<p>After I moved to the US, the Mac became commonplace, but still not as ubiquitous as PCs. The companies I worked for were not fond of Macs, and they imprinted some of that disdain in me. At one point, a developer was hired, and they wanted a Mac. Needless to say, that person was scoffed at, and issued a PC.</p>

<p>I came out of this period with the utterly wrong and biased opinion that those who only wanted to use Macs were some kind of snob. Surely they were elitists who got a kick out of bragging about their overpriced hardware. I didn't get it until much later.</p>

<h2>Trying something new</h2>

<p>As the saying goes, "I'll try anything twice", or something like that. Fast-forward a few years, new company, new culture, most devs are using Macs by choice. I started out with a PC, but shortly made the fateful decision to inherit a Mac from a departing colleague.</p>

<p>It sounds dramatic, but that seemingly insignificant decision marked a turning point in my career. Getting used to a new OS and the associated philosophy took some time, but it was so worthwhile.</p>

<p>From that moment I became a true indie hacker. Don't get me wrong, I hacked before outside my day job, but it just wasn't as exciting. Simply having a Mac gave me an incentive to use it more.</p>

<h2>That thing you do, Mac</h2>

<p>I turned into the very type of person I used to mock. A Mac fanboi. There's something about the Mac that no other vendor has managed to replicate.</p>

<p>Mac fans often claim the reason why Macs are so good is that the hardware and software are perfectly integrated. That's definitely part of it.</p>

<p>The hardware is slick, solid, and has a premium feel. The Mac keyboard's shape and layout are consistent. Has Apple screwed up on the hardware side? Absolutely. We all know about the recent keyboard controversies, the removal of ports, the touch bar, and so on. There are encouraging signs that they have learned some lessons, if we are to believe rumors about the next gen M1X 14" and 16" MacBook Pros.</p>

<p>Speaking of the keyboard - let's ignore the failed experiment with butterfly switches - I consider the Mac keyboard to be one of the best I've ever used, particularly the Magic Keyboard 2. The scissor switches in this keyboard, as well as the recent generation of MacBooks, feel great, and make me a very efficient typist. This means fewer mistakes when I'm coding, so higher efficiency. Then again, keyboards are a very personal thing, and a lot of devs prefer long-travel mechanical keys. I'll admit I tried that, but it's not for me.</p>

<p>Even the keyboard layout is unmatched. The simplest thing, such as the location of the Cmd key, is an order of magnitude more ergonomic than other keyboards. It makes Cmd+C/Cmd+V second nature. How many times a day do you use that particular combo? Hundreds perhaps. It adds up over the course of years.</p>

<p>Moving on to the trackpad itself, it may sound like a banal feature, but I've never come across a better implementation than the glass MacBook trackpads post-2015 or so. What I love the most about it is that you can tap it <em>anywhere</em> (not just in the lower half like most Windows laptops), and it engages with a solid, distinct click. I like it so much that I got a wireless Magic Trackpad for my desk. I've never used a mouse with a Mac, just because I find the trackpad sublime.</p>

<p>MacOS itself is slick and quite beautiful, much more than Windows. I'm particularly fond of the thin, subtle window frames, buttons, and UI elements. Windows, by contrast, feels clunky and outdated. When I'm in Windows, I try to ignore the UI as much as possible, but on the Mac I'm always admiring the attention to detail. Big Sur has stepped it up another notch.</p>

<p>Tightly integrating hardware and software definitely has its advantages. Apple is able to precisely control and direct the experience. Everything works together efficiently, the downside being that it is not an open system. Hardware internals are limited to what Apple decides to offer in the current iteration. While you can transplant MacOS on unsupported hardware (Hackintosh), it doesn't make for a complete experience in my opinion.</p>

<p>I will admit that building a Hackintosh has crossed my mind a couple of times, to cut down on the number of machines, but be able to play games on powerful hardware like I can do on my PC.</p>

<p>A very important feature that makes it the ultimate dev machine for me, is the Unix/*NIX underpinnings. This makes it super easy to set up all the tools a web developer needs. Plus there's already a huge community and countless tools for the MacOS platform.</p>

<p>Windows is trying to catch up with WSL, but it's far from the streamlined Mac experience. I know that, because I worked professionally as a web dev in a Windows environment for several years and disliked many aspects of it.</p>

<p>It may sound shallow or extreme, but I decided I wasn't going to accept another position with a company that refused to issue the tool I need for maximum efficiency.</p>

<h2>The Mac changed my life and career</h2>

<p>Many workplaces do not provide enough career growth opportunities in your direction of choice. Very often, the only thing you can do to advance your skills is to hack on side projects outside of work.</p>

<p>The Mac gives me joy from the moment I pick it up, and it motivated me to learn new technologies and build small projects on a daily basis. I've kept at it over the years, and it has become one of my main hobbies. It's how I learned Laravel, Vue, Electron, Svelte, and other technologies that I would never have at the chance to use at my day job at the time.</p>

<p>I can confidently say that a PC would have never provided the same motivation, but perhaps that's also because the PC was always an entertainment device for playing games, watching movies, shows, and so on. On the other hand, I've never played a game on a Mac; it's always been my dedicated developer machine.</p>

<p>The stack I mentioned - Laravel, Vue, Svelte, Electron - is my absolute favorite. I've had the good fortune to use part of it professionally. Same as the Mac, it brings me joy when I build something in it. My career might have had a very different trajectory, had the Mac not nudged it in this direction.</p>

<h2>Mac 4 life</h2>

<p>Predicting the future is impossible, but I like to believe that the Mac will continue to improve in meaningful ways, until I retire and beyond. I don't see myself writing code on another platform, though I am fully aware that things can change. I suppose I could try developing on a Linux machine, but it would not be the same. Even assuming I found decent hardware, the integration is not there, not to mention all the dev tools that already exist on the Mac.</p>

<p>Fortunately there are signs that Apple has listened to some of the negative feedback from the recent past, and is acting upon it. Rumor has it that in 2021 a new generation of MacBook Pros will be released, in 14" and 16" screen sizes, with a new M1X ARM processor, no touch bar üò≥, plenty of ports, and MagSafe ü§Ø. That would be seriously impressive.</p>

<p>Even the first iteration of Apple silicon in the form of the M1 has been an excellent move. It once again differentiates the Mac from the rest of the market. Moreover, it introduces a new, powerful architecture that should provide a strong foundation for years to come.</p>

<h2>I just bought my first Mac</h2>

<p>It sounds backwards to end with "I just bought my first Mac", doesn't it? But it's true. The Macs I've used until now have been surplus hand-me-downs from places I worked at, and company machines. The one closest to my heart has been a 2015 MacBook Pro, the last of the "good" generation, with all the ports, physical function keys, and scissor switch keyboard.</p>

<p>Sadly this old workhorse has been getting on in years, and it was time to replace it. I've been watching the M1 with interest, and thought I should wait for the rumored 14" M1X. However, all reports and reviews indicated that the M1 Air was more than capable, and so...</p>

<p>After many years of using them, I finally bought my first Mac. It's a MacBook Air, with the 8-core GPU, 16GB RAM, and 512GB storage. I've had it for a week now, and I absolutely adore it. It's more performant than the old 15" (even my company-issued i9 16"), in a small package, with stellar battery life.</p>

<p>Here's to many joyful years hacking away on the M1 Air!</p>

<p>Goodbye old 15" friend! Hello new Air buddy!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/svgx-product-hunt-launch</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/svgx-product-hunt-launch" />
    <title>SVGX Launched on Product Hunt</title>
    <published>2021-02-16T00:00:00+00:00</published>
    <updated>2021-02-16T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">SVGX, the Electron-Svelte app I&#039;ve been working on for close to a year, is finally on Product Hunt.

To recap, SVGX is an offline desktop SVG icon &amp;amp; asset manager for designers and developers. I made it to make my life working with SVG graphics......</summary>
    <content type="html"><![CDATA[
        <p><a href="https://svgx.app/">SVGX</a>, the Electron-Svelte app I've been working on for close to a year, is finally on <a href="https://www.producthunt.com/posts/svgx">Product Hunt</a>.</p>

<p>To recap, <em>SVGX is an offline desktop SVG icon &amp; asset manager for designers and developers</em>. I made it to make my life working with SVG graphics easier.</p>

<p>SVGX is free to download and use, but I'm experimenting with monetization in the form of selling access to the source code. I call this model <a href="/blog/gitware-new-software-distribution-model">Gitware</a>.</p>

<p>Get the app from the link above, and please vote for it on <a href="https://www.producthunt.com/posts/svgx">Product Hunt</a>!</p>

<p>That is all! üéâ</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/electron-toggle-menu-item-dynamically</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/electron-toggle-menu-item-dynamically" />
    <title>How to Toggle a Menu Item Dynamically in Electron</title>
    <published>2021-02-12T00:00:00+00:00</published>
    <updated>2021-02-12T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Toggling an Electron menu item dynamically is quite simple, though not immediately clear from the official documentation.

In an Electron app, the application menu consists of items such as File, Edit, View, and so on. Beside the standard menus found in......</summary>
    <content type="html"><![CDATA[
        <p>Toggling an Electron menu item dynamically is quite simple, though not immediately clear from the official documentation.</p>

<p>In an Electron app, the application menu consists of items such as File, Edit, View, and so on. Beside the standard menus found in most applications, you can also create your own menu entries with custom functionality.</p>

<p>Sometimes you want these entries to be enabled or disabled dynamically based on data in the application state. Here's how to toggle menu item visibility programmatically, from the application code - or Renderer process.</p>

<h2>TL;DR</h2>

<p>If you want to skip the bla bla, here's a simplified version of the workflow, which assumes the menu is built in <code>index.js</code>.</p>

<pre><code class="language-js">// Main process (index.js)
const { Menu, ipcMain } = require('electron');

let mainWindow; // Main application window, created with new BrowserWindow({...}), code omitted for brevity 

// Build the application menu
const menu = Menu.buildFromTemplate([
    {
        label: 'Edit',
        submenu: [
            {
                id: 'revert-changes',
                label: 'Revert Changes',
                click: revertChanges,
                enabled: false
            }
        ]
    },
]);
Menu.setApplicationMenu(menu);

// Forward the 'revertChanges' event to the Renderer process
function revertChanges() {
    mainWindow.webContents.send('revertChanges'); // Discard the code changes
}

ipcMain
    // Listen for an event from the Renderer process, and toggle the menu item accordingly
    .on('originalFileModified', (events, args) =&gt; {
        Menu.getApplicationMenu().getMenuItemById('revert-changes').enabled = args.originalFileModified;
    });
</code></pre>

<h2>Case study</h2>

<p>I'm building <a href="https://svgx.app/">SVGX</a>, an Electron + Svelte app. I have a code area that I can edit. When the original code is modified, an üü† orange dot appears along with a revert icon. Clicking the icon reverts the code to the original state.</p>

<p><img src="/assets/img/2021-02-12-svgx-file-modified.jpg" alt="SVGX, file modified indicator" /></p>

<p>I wanted to have an option to Revert Changes under the Edit menu. As a UX improvement, I also wanted this entry to be disabled by default, until the code is modified, whereupon it would become enabled.</p>

<h2>Main vs Renderer process</h2>

<p>You can read more about the <a href="https://www.electronjs.org/docs/api/ipc-main">Main</a> and <a href="https://www.electronjs.org/docs/api/ipc-renderer">Renderer</a> processes in the official documentation, but here's how they fit into this scenario.</p>

<p><strong>Main</strong> is responsible for <em>creating the application menu</em> and <em>listening for events from the Renderer process</em>.</p>

<p><strong>Renderer</strong> <em>emits events</em> to the Main process.</p>

<h2>The logic flow</h2>

<p>I'm aiming for the following:</p>

<ul>
<li>Code is unmodified (initial state) - Edit > Revert Changes is <em>disabled</em></li>
<li>Code is modified - Edit > Revert Changes is <em>enabled</em></li>
<li>Edit > Revert Changes is clicked - it becomes <em>disabled</em>, and the code is reverted</li>
<li>Same happens if the revert icon is clicked</li>
</ul>

<h2>The solution</h2>

<p>For simplicity, I will show only 3 of the modules involved in this process: <code>index.js</code>, <code>menu.js</code>, <code>CodePane.svelte</code>, and will strip out most of the code, except for the relevant bits.</p>

<ul>
<li><code>index.js</code> (Main process) is the entry point to the Electron app, responsible for creating the <code>BrowserWindow</code> and the menu, among other things.</li>
<li><code>menu.js</code> (Main process) is the array of custom menu entries that could just as well have been part of <code>index.js</code> but I extracted here for readability</li>
<li><code>CodePane.svelte</code> (Renderer process) is the Svelte component that displays the code/markup, and allows editing</li>
</ul>

<p>The more fleshed-out solution is shown below, with comments for clarification.</p>

<p><strong>index.js</strong></p>

<pre><code class="language-js">const { app, Menu, ipcMain } = require('electron');
const { menuTemplate } = require('./lib/menu.js');

// ...
let mainWindow;
// ...

const createWindow = () =&gt; {
    // Create the browser window
    mainWindow = new BrowserWindow({
        // ...
    });
};

function createAppMenu() {
    const menu = Menu.buildFromTemplate(menuTemplate);
    Menu.setApplicationMenu(menu);
}

app.whenReady().then(() =&gt; {
    createWindow();
    createAppMenu();
});

ipcMain
    // Forward the 'revertChanges' event to the Renderer process
    .on('revertChanges', () =&gt; {
        mainWindow.webContents.send('revertChanges'); // Discard the code changes
    })

    // Toggle the Edit &gt; Revert menu option depending if the file was modified
    // The "originalFileModified" event is emitted from the Renderer process (the Svelte component)
    .on('originalFileModified', (events, args) =&gt; {
        Menu.getApplicationMenu().getMenuItemById('revert-changes').enabled = args.originalFileModified;
    });
</code></pre>

<p><strong>menu.js</strong></p>

<pre><code class="language-js">const { ipcMain } = require('electron')

module.exports = {
    menuTemplate: [
        // ...
        {
            label: 'Edit',
            submenu: [
                { role: 'undo' },
                { role: 'redo' },
                { type: 'separator' },
                {
                    id: 'revert-changes', // Needs an id so I can reference it easily
                    label: 'Revert Changes',
                    click: revertChanges,
                    enabled: false
                },
                { type: 'separator' },
                { role: 'cut' },
                { role: 'copy' },
                { role: 'paste' },
                // ...
        },
        // ...
    ]
}

// Emitting to index.js
function revertChanges() {
    ipcMain.emit('revertChanges');
}
</code></pre>

<p><strong>CodePane.svelte</strong></p>

<pre><code class="language-js">&lt;script&gt;
const ipcRenderer = require("electron").ipcRenderer;
import { onMount } from "svelte";
import { originalFileModified } from "../store/svg";

// Watch the originalFileModified store value for changes...
// ... and fire an event to the Main process when a change occurs
$: {
    ipcRenderer.send("originalFileModified", {
      originalFileModified: $originalFileModified
    });
}

onMount(() =&gt; {
    ipcRenderer.on("revertChanges", (event, args) =&gt; {
        // Logic for discarding the changes to the markup
        // ...
    });
});
&lt;/script&gt;
</code></pre>

<h2>Conclusion</h2>

<p>I was stumped initially by how to enable and disable an Electron menu dynamically, but was certain there had to be a way. Sure enough, the key to the solution is this piece of code <code>Menu.getApplicationMenu().getMenuItemById('revert-changes').enabled</code> in the Main process, which gets a reference to the menu item I'm targeting, then toggles it based on an event that was emitted from the Renderer process.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/reflecting-on-2020</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/reflecting-on-2020" />
    <title>Reflecting on 2020</title>
    <published>2020-12-31T00:00:00+00:00</published>
    <updated>2020-12-31T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">In 2019, I started the &quot;tradition&quot; of reflecting on the past year, mainly from a developer &amp;amp; geek point of view. I think it&#039;s a useful tool for summarizing how I&#039;ve grown as a developer, and what cool new things I&#039;ve done and accomplished.

2020 has......</summary>
    <content type="html"><![CDATA[
        <p>In 2019, I started the "tradition" of <a href="/blog/reflecting-on-2019/">reflecting on the past year</a>, mainly from a developer &amp; geek point of view. I think it's a useful tool for summarizing how I've grown as a developer, and what cool new things I've done and accomplished.</p>

<p>2020 has been a rollercoaster for most people, but despite a few lows I don't have reasons to complain, and for that I am grateful.</p>

<h2>Personal, work and career</h2>

<p>My personal life is... personal, and I don't see much point in bringing it into this tech-focused blog.</p>

<p>Career-wise, in 2020 I found new employment after programming in Laravel for 1.5 years for a company here in Illinois. The new company is actually one I had worked for before, and it felt good to return. Unfortunately the work is just plain PHP, and a lot more stressful, albeit compensated by the team and the company structure.</p>

<p>I'll admit that if it weren't for after-hours hacking in Laravel, Vue, Svelte, etc, I would go a little crazy if I couldn't find an outlet for my desire to code fun things.</p>

<h2>Working remotely</h2>

<p>Shortly after I joined the new/old company, the pandemic went into full force, and we went fully remote. I'll make no apologies about the fact that I consider WFH to be one of the best things about this train-wreck of a year. I strongly believe this is the way to go, especially in tech (or most office-type jobs for that matter). It saves so much time and energy commuting, reduces pollution and traffic congestion, and just saves resources in general.</p>

<p>The only downside for me is the lack of interaction with my co-workers. I'm talking about the water cooler type of interaction, not the work-related stuff which can be resolved quite easily over Slack or voice chat.</p>

<h2>This blog</h2>

<p>The blog is now just over 2 years old. In 2020, I've been posting a lot less, primarily because I started to exercise a lot more, which put a time crunch on my other activities outside work. My inspiration waned this year, but at the same time I preferred to use my time for coding rather than writing about it. When you have a full-time job, and a number of hobbies, you need to set priorities, and blogging suffered as a consequence.</p>

<p>I enjoy blogging, I really do. I get a lot of satisfaction out of crafting a good quality blog post, but there's the rub. <em>Crafting</em> an article, as opposed to writing it quickly, is a lengthy endeavor. It takes many hours to write the article itself, not to mention all the related research. I don't always have this time at my disposal, and usually I have to spread it out over several days.</p>

<h3>Traffic</h3>

<p>Unfortunately, I still use Google Analytics to track visits to the blog. I've been meaning to search for a better, more ethical solution, but I haven't found the bandwidth yet.</p>

<p>Google Analytics (or GA as it's colloquially known) is hard to interpret and use by someone who doesn't spend hours in it every day. I don't have the time and patience to fine-comb the data and extract meaningful information out of it. It does seem though that the traffic has increased by a lot. That's good.</p>

<p>I need to move away from GA in 2021, but this means I'll probably have to run the new solution in parallel with GA for the whole year, so I can have a way to compare the data. Other providers have different ways of tracking visits.</p>

<h3>Most popular posts</h3>

<p>Here are the most popular articles from the last 12 months, as determined by GA:</p>

<ul>
<li><a href="https://chasingcode.dev/blog/upgrade-php-74-cli-mac/">Upgrade the PHP CLI to 7.4 on Mac</a></li>
<li><a href="https://chasingcode.dev/blog/build-signup-form-with-alpinejs/">Build a Dynamic Sign Up Form With Alpine.js</a></li>
<li><a href="https://chasingcode.dev/blog/edit-in-place-component-livewire-alpinejs/">Build an edit in place component with Livewire &amp; Alpine.js</a></li>
<li><a href="https://chasingcode.dev/blog/fix-laravel-no-input-file-specified/">How to Fix Laravel's Dreaded "No input file specified" Error</a> <em>rerun</em></li>
<li><a href="https://chasingcode.dev/blog/laravel-global-url-helpers/">Laravel Add &amp; Remove URL Query Parameters Helpers</a> <em>rerun</em></li>
<li><a href="https://chasingcode.dev/blog/fix-curl-error-60-ssl-certificate-problem/">Fix cURL Error 60 SSL Certificate Problem</a></li>
<li><a href="https://chasingcode.dev/blog/fix-laravel-public-storage/">How to Fix Laravel Public Storage</a></li>
<li><a href="https://chasingcode.dev/blog/how-to-install-httpie-windows-10/">How to Install HTTPie in Windows 10</a> <em>rerun</em></li>
<li><a href="https://chasingcode.dev/blog/update-enum-column-doctrine-exception/">Update Enum Column Doctrine Exception in Laravel</a> <em>rerun</em></li>
<li><a href="https://chasingcode.dev/blog/build-svg-icon-component-laravel-7/">Build an SVG Icon Component with Laravel 7</a></li>
</ul>

<p>You'll notice several new popular articles around <a href="https://laravel-livewire.com/">Livewire</a> and <a href="https://github.com/alpinejs/alpine">Alpine.js</a>. This year I've been using these two frameworks a lot in my side projects, and there's been a lot of interest surrounding them.</p>

<h2>Personal projects</h2>

<h3>1Secret.app</h3>

<p><a href="https://1secret.app/">1Secret</a> is one of my oldest and most complete side projects. To quote:</p>

<blockquote>
  <p>1Secret is a service that allows you to share sensitive data (text of files) through unique URLs that expire after a set time. Once the URL (or secret) expires, the data is destroyed on the server permanently.</p>
</blockquote>

<p>The project has been stagnating for 2 years. Every year I keep telling myself "this is the year I will launch it officially", and then stuff happens, and I postpone it.</p>

<p>The truth is that I've been having internal debates about the direction of 1Secret. I strongly believe in the concept of transient secrets, and I use the service myself on a daily basis. I am not sure if it can provide enough value that people are willing to pay for it, and I am terrible at marketing which means I'm not confident I can make a good case for it.</p>

<p>One of the biggest hurdles to launching 1Secret is the pricing structure. I've been drafting up various price points, and I think I'm narrowing it down to a reasonable balance between affordability (for the user) and profitability (for me).</p>

<p>In 2021, I want to finally announce it to the public, in its current v1.x state. I will, however, end the free Premium sign-ups, meaning that whoever wants to use the more advanced features will have to subscribe.</p>

<p>I have a lot of ideas on how to improve the service, but that will require a v2.0, and likely a full re-write. Depending how v1.0 will be received, I'll choose a strategy when the time comes.</p>

<h3>SVGX.app</h3>

<p><a href="https://svgx.app/">SVGX</a> is a desktop app I started working on at the beginning of this year. It's an offline SVG icon library manager, and it came about from the way I use SVGs in my code. I like to download SVG icon libraries, then search for the ones I need. SVGX makes it super simple to search for icons, then copy the SVG markup so I can paste it in my code. No more manually searching, then opening it in a text editor, and so on.</p>

<p>There's a feature for previewing and generating  <code>background-image</code> CSS markup for repeating SVG backgrounds. Before I had SVGX, I was always hesitant to use repeating backgrounds in my designs due to how awkward it is to generate that code quickly.</p>

<p>An overarching feature is the live preview, and I recently expanded on that by allowing the markup to be edited and saved. Editing it will update the preview in real time, so you can quickly make some changes to an SVG file and see what the result is right away.</p>

<p>SVGX is almost ready to be released. I hoped to do it before the end of the year, but there are various tedious pre-launch tasks that need to be done, and this will take a while longer. I am releasing it under a new software distribution model that I coined up, called <a href="https://chasingcode.dev/blog/gitware-new-software-distribution-model/">gitware</a>. Basically pay $0 or more, depending on how useful you find it, but you can also buy <a href="https://gum.co/svgx-source">access to the source code</a>. The app is built in Electron + Svelte.</p>

<h3>Allmy.sh</h3>

<p>An expense tracker that I abandoned to focus on other projects. This year I let the domain lapse. Realistically I won't be returning to this one for a while.</p>

<h3>Other projects</h3>

<p>I built a local mountain bike trail conditions notifier, as well as a personalized interface for Strava cycling data. Both of these projects are cycling-related, but they are mostly for my own use, and I don't really plan on making them available to the public.</p>

<p>One repo that gained some traction as well as a little Twitter buzz is my <a href="https://github.com/breadthe/svelte-tailwind2-starter">Svelte + Tailwind 2 starter template</a>.</p>

<p>I also built this 1-page site to celebrate <a href="https://tailwind2-colors.netlify.app/">TailwindCSS' 2.0 new color palette</a>. The site is built in Svelte, and comes with an associated <a href="https://github.com/breadthe/tailwind2-colors">repo</a>.</p>

<h2>New dev tech</h2>

<p>In 2020 the Laravel ecosystem has continued to improve. I've been integrating Livewire and Alpine.js a lot more in my apps, but also writing less "pure" Laravel.</p>

<p>The biggest change has been my focus on <a href="https://svelte.dev/">Svelte</a> and Electron. I've built Electron apps in the past, but I leveled up my knowledge this time around. I enjoy the idea of making offline desktop apps that don't require sign-ups or an account.</p>

<h2>Health and fitness</h2>

<p>Weight lifting was my bread-and-butter for many years, but the pandemic finally put a stop to it. I closed my gym membership, and dug up my old weight set to continue lifting at home. Unfortunately, it wasn't the same. I tried to do it regularly, but an old shoulder injury flared up and prevented me from sticking to it consistently.</p>

<p>On the other hand, I picked up cycling this year, with a vengeance. I found a new passion for road cycling, but also improved my trail-riding skills. Between road and mountain, I rode 4000 miles (~6400 km) in 2020, starting in June. That's literally 10x more than 2019.</p>

<p>It helped that I made the decision to invest in a smart indoor trainer, which allowed me to continue riding once winter arrived in the Northern hemisphere. I've been <a href="https://www.zwift.com/">Zwifting</a> gleefully ever since. It has motivated me to ride even more than I was outdoors, for the simple reason that I can just hop on the bike anytime, and it's infinitely safer than outside on the streets.</p>

<p>The only downside to all this cycling is that I lost a lot of weight in the form of muscle mass, leading to the stereotypical "cyclist" physique. I also dropped down 2 shirt sizes, which doesn't make me very happy considering that most of my clothes don't fit anymore.</p>

<h2>Books</h2>

<p>In 2020, I read about 14 regular books, but none of them were particularly inspiring. Among those, <strong>Seveneves</strong> by Neil Stephenson, and <strong>Cibola Burn</strong> (book 4 of the Expanse series) stand out.</p>

<p>I also (re)read 5 comic book series. <strong>Watchmen</strong> by Alan Moore, <strong>Bone</strong> by Jeff Smith, and <strong>Transmetropolitan</strong> by Warren Ellis are some of my all-time favorites. I reread them every few years.</p>

<h2>Movies and TV</h2>

<p>I don't watch TV in the traditional sense, but I do watch a fair amount of movies and TV shows.</p>

<p>In 2020, some of the movies that stood out were <strong>Ford v Ferrari</strong> (2018), <strong>Terminator Dark Fate</strong> (2019), <strong>Zombieland Double Tap</strong> (2019), <strong>Jojo Rabbit</strong> (2019), <strong>1917</strong> (2019), <strong>The Lighthouse</strong> (2019), <strong>But I'm A Cheerleader</strong> (1999), <strong>Klaus</strong> (2019), and <strong>Just Mercy</strong> (2019). Notice there aren't any 2020 movies on the list, and that's because I don't feel anything that came out this year was particularly good.</p>

<p>I also watched individual seasons from various TV shows. Excellent ones include: <strong>Beforeigners S01</strong> (2019), <strong>Catch 22</strong> (2019), <strong>Star Trek Picard S01</strong> (2020), and <strong>The Mandalorian S01</strong> (2019). I have yet to watch season 2 of The Mandalorian.</p>

<h2>Gaming</h2>

<p>A PC gamer through and through, I've been playing less and less over the years. In 2020, however, I discovered a new gem, in the form of <a href="https://www.supergiantgames.com/games/hades/">Hades</a>. What a masterpiece! If you like action RPGs, amazing art, and superb sound and voice design, this game is a must. No wonder it has won so many awards.</p>

<p>Apart from that, I've been dabbling in various other games in my Steam/GoG/Epic libraries.</p>

<h2>Twitter and social media</h2>

<p><a href="https://twitter.com/brbcoding">Twitter</a> remains my primary social media outlet. Building a following is hard work, especially when you don't set out to do it intentionally (via heavy self-promoting, etc).</p>

<p>I am happy, and grateful, to have gained 130 new followers in 2020, for a total of 170 at the end of the year. While it doesn't sound like much, it's a huge relative increase, and more than I hoped for. To those who follow me, thank you! To those who don't, <em>please follow me</em> üòø</p>

<p>I operate 2 additional Twitter accounts:</p>

<ul>
<li><a href="https://twitter.com/svgxapp">SVGX</a> - 4 followers</li>
<li><a href="https://twitter.com/1secretapp">1Secret</a> - 9 followers</li>
</ul>

<p>I am also present on:</p>

<p><a href="https://www.producthunt.com/@brbcoding">Product Hunt</a> - 38 followers</p>

<p><a href="https://www.indiehackers.com/brbcoding/">Indie Hackers</a> - 8 followers
    - <a href="https://www.indiehackers.com/product/svgx">SVGX</a> - 7 followers</p>

<h2>Looking forward to 2021 (?)</h2>

<p>Well, this didn't age well: <em>"I don't expect things to change a lot in 2020"</em> (me, end of 2019).</p>

<p>On the dev tech side, I'm looking forward to new versions of <strong>Laravel</strong>, <strong>Livewire/Alpine</strong>, <strong>Inertia.js</strong>, as well as more mature versions of <strong>Vue 3</strong>, and <strong>Svelte</strong>.</p>

<p>I have my sights set on a couple new languages/frameworks that I'd like to try, given time. I'll talk about them when the time comes, no need to jinx it just yet.</p>

<p>I fervently hope that in 2021 I'll make my first dollar from selling software I created. This statement might seem strange, but it's true - I've never made a single cent off of any software product. It bears some explaining, but that's a topic for another time.</p>

<p>I definitely exceeded my cycling goals for 2020, and I'm hoping for a similar trend in 2021. At the same time, I need to be careful to avoid injury, as both mountain biking and road cycling can be very dangerous.</p>

<p>Finally, health has been of the utmost importance in 2020, and it must continue to be so in 2021 and beyond.</p>

<p>If you've made it so far, thank you - you are awesome! I'll skip predictions for the next year, but I'll end it on this lukewarm note: may 2021 be an improvement over 2020, for everyone.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/gitware-new-software-distribution-model</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/gitware-new-software-distribution-model" />
    <title>Gitware - A New Software Distribution Model</title>
    <published>2020-12-23T00:00:00+00:00</published>
    <updated>2020-12-23T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">As I approach the official release of SVGX, a desktop app I made in 2020, I&#039;m wrestling with the question of how to price it. It&#039;s never an easy question, especially for a first attempt at a commercial software product.

This is not about the merits of......</summary>
    <content type="html"><![CDATA[
        <p>As I approach the official release of <a href="https://svgx.app/">SVGX</a>, a desktop app I made in 2020, I'm wrestling with the question of how to price it. It's never an easy question, especially for a first attempt at a commercial software product.</p>

<p>This is not about the merits of SVGX. No, it's about the impostor syndrome that haunts many a developer, even after the product is done. I feel a little dirty and bothered by the idea of charging for something I made in my spare time, for my own use, that many would expect to be released as open source.</p>

<p>At the same time, I put lots of passion and many hours into building it. Surely it's worth <em>something</em>, right? Well, it might be worth a lot to a few people, and nothing to lots of people, but there's a good chance I'll never run into those few who find it valuable enough that they would pay for it.</p>

<p>Then there's also the psychological aspect of earning money from something I created. Knowing there are people who value my work to this extent, does a lot for my self-esteem.</p>

<p>The danger with any kind of software that you build for yourself, and then want to sell, is the possibility that you're the only one with that problem. Or, granted, part of a tiny minority. Which means the market for your thing might as well not exist. So why even bother charging for it?</p>

<p>Another school of thought says you should charge a lot more than you were going to initially. I tend to agree with some of the reasons, but this strategy works best when you already have a large audience, or when your product is already awaited with anticipation. None of this applies to me.</p>

<p>My audience, though growing, is still tiny, and mostly restricted to Twitter. So how do I grow an audience? I know some theory, but frankly I'm not a marketer, and self-promotion is somewhat distasteful to me. I dislike heavy marketing tactics, so I'm growing my "brand" the only way I know how: article by article, tweet by tweet.</p>

<p>From previous experience, the highest quality audience is built organically, albeit slowly. That's why I try to post good quality content, and refrain from noise and non-developer related stuff. If you're following my work, you're probably a developer like me, facing similar problems, and searching for similar solutions.</p>

<p>All this to say that I've decided to offer SVGX for the price of <strong>pay what you want</strong>, starting at $0. You can try it for free, for as long as you want, but if you find it useful, I wouldn't mind a "buy me a beer" kind of tip.</p>

<p>At the same time, I'm selling <a href="https://gumroad.com/l/svgx-source">access to the SVGX source code on GitHub</a> for a reasonable amount ($20 at the time of writing). For those interested in how a fairly complex Electron + Svelte app is built, I'm sure this will provide good value.</p>

<p>In summary:</p>

<ul>
<li>Offer the product for free/tips</li>
<li>Sell access to the source code</li>
</ul>

<p>I call this new software distribution model <strong>Gitware</strong>. Not the most inspiring term, but that's what I could come up with on short notice.</p>

<p>While <strong>Gitware</strong> may seem antithetical to the idea of open source, that's because it's not open source. It's not traditional closed source commercial software either. If you can imagine the Mercedes-Benz logo, with open source and closed source forming two of the points, then Gitware would be the third point.</p>

<div class="flex justify-center text-center">
    <svg width="100px" height="100px" role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><title>Mercedes icon</title><path d="M12.005 0c6.623 0 12 5.377 12 12s-5.377 12-12 12-12-5.377-12-12 5.377-12 12-12zM3.25 17.539a10.357 10.357 0 0 0 8.755 4.821c3.681 0 6.917-1.924 8.755-4.821l-8.755-3.336-8.755 3.336zm10.663-6.641l7.267 5.915A10.306 10.306 0 0 0 22.365 12c0-5.577-4.417-10.131-9.94-10.352l1.488 9.25zm-2.328-9.25C6.062 1.869 1.645 6.423 1.645 12c0 1.737.428 3.374 1.185 4.813l7.267-5.915 1.488-9.25z"/></svg>
</div>

<p><strong>Intermission</strong></p>

<p>See the Mercedes logo above? It's plain SVG code that I pasted into the markdown of this article.</p>

<p>Incidentally, this is one of the things SVGX does really well. It can search across all your offline SVG icon libraries and quickly find what you're looking for. For this example, I searched for "mercedes", not even knowing if I had an icon for it. Sure enough, there's 1 result coming from a free library called <a href="https://simpleicons.org/">Simpleicons</a>, which I've downloaded to my local icon archive.</p>

<p><img src="/assets/img/2020-12-23-svgx-mercedes-logo.png" alt="Mercedes logo discovered with SVGX" /></p>

<p><strong>Now back to our regular programming</strong></p>

<p><strong>Gitware</strong> is my way of creating exposure and shining a light on my work. It may very well prove to be a flop. In fact, I suspect it's a very naive (to say the least) way to sell software. And that's ok, because building an audience is a lot more important for me at this stage than a few bucks.</p>

<p>Generating goodwill requires a lot of consistent work creating great software products, some of it free or open source, some paid. But there's a long windy road to get to the point where people are clamoring to give you their money, and trust is earned the hard way. Thankfully, I can gladly give SVGX - the app - away for free. I want it to be one of many more to come, as my repository of ideas is perpetually growing.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/my-first-side-project</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/my-first-side-project" />
    <title>My First Side Project - BankAlt.com</title>
    <published>2020-11-03T00:00:00+00:00</published>
    <updated>2020-11-03T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I found myself strolling down memory lane recently when I recalled my first big side project from over 10 years ago, and dug it up on the Wayback Machine. The nostalgia hit hard, and I decided to write this piece as a tribute to my past self for making......</summary>
    <content type="html"><![CDATA[
        <p>I found myself strolling down memory lane recently when I recalled my first big side project from over 10 years ago, and dug it up on the <a href="http://web.archive.org/">Wayback Machine</a>. The nostalgia hit hard, and I decided to write this piece as a tribute to my past self for making it, and the fun times that were had in the process.</p>

<h2>What ~~is~~ was BankAlt?</h2>

<p>BankAlt was a website hosted at <strong>bankalt.com</strong>, and its primary raison d'√™tre was to facilitate the crafting process in World of Warcraft. 10+ years ago I used to be very involved in the game, and one of my trademarks was making lots of gold from gathering, crafting, and trading.</p>

<p>BankAlt is beautifully (but not entirely, for reasons I'll mention below) <a href="http://web.archive.org/web/20130716130923/http://bankalt.com/">preserved</a> at the Web Archive (aka Wayback Machine).</p>

<h2>The tech behind BankAlt</h2>

<p>I have always been a PHP dev, so it stands to reason that the LAMP stack would power my first big side project.</p>

<ul>
<li>vanilla PHP 5.x (no framework)</li>
<li>MySQL</li>
<li><a href="https://www.datatables.net/">jQuery datatables</a> with server-side fetching</li>
<li>vanilla CSS (no framework)</li>
</ul>

<h2>Analysis and thoughts</h2>

<p>First, a quick word on BankAlt's state of preservation at the Wayback Machine. The static pages are all there, but the dynamic parts are not. The back-end powering the dynamic data tables is now defunct.</p>

<h3>Purpose &amp; motivation</h3>

<p>My initial purpose of BankAlt was - as it often is - to scratch an itch, and make my life in WoW easier. WoW had, and most likely still does, a complex crafting tree. To craft a high-end item you would have to craft a lot of intermediary items, parts, and materials. But in order to juggle trading, the auction house, crafting, gathering, and make lots of profit in the process, I needed a tool that could automatically calculate the raw materials for any recipe or pattern, as well as the cost of those materials.</p>

<p>I could then use this information to find the best source of raw materials, and then sell the finished product for a hefty profit.</p>

<p>I can't pinpoint what made me build an actual site for this tool, but it must have been a love for World of Warcraft, combined with the desire to create, coupled with the excitement for solving a problem. By that point I had been a web developer for several years, but I had never attempted something of this magnitude.</p>

<h3>Business model</h3>

<p>Making money with BankAlt was definitely not the driving factor, nor was it a big priority later. Back at the time, banner ads were popular, and I thought I could fund the site with ads. That might have worked, had I spent time marketing it and spreading the word. Marketing has always been distasteful to me, so I kept sweeping it under the rug until the very end.</p>

<p>To me, ads are not the most ethical way to monetize a site, but if the product is useful and popular, and enough people are using it, ads can be worthwhile. A very good example is <a href="https://www.photopea.com/">Photopea</a>, which generates impressive revenue for its sole creator.</p>

<p>If I were to do it again today, I would probably use a mix of ads and ad-free premium subscription (with extra perks, of course). I would hold off on ads, though, until the trafic and usage were high enough. Putting ads on an emerging service helps only to drive away potential users.</p>

<h3>RIP BankAlt.com (2010-2013)</h3>

<p>The site ran for approximately 3 years, 2010 - 2013. I'm not even sure if I terminated it in 2013 or 2014. As my interest in WoW waned, I decided to shut it down, since I was barely covering my hosting costs with the small amount of advertising revenue that was coming in.</p>

<h3>Was it worth it?</h3>

<p>BankAlt made very little money, certainly not enough to offset the amount of work I put into it. I don't have any regrets - in fact I'm glad to have stuck with the project for so long. But to me, money is not the driving factor behind a side project, and maybe that's failure on my part. On the other hand, a revenue-generating project could ensure its long term viability, as well as providing motivation to keep hacking on it.</p>

<p>The true worth of this project comes from the fact that it allowed me to sharpen skills on a fun endeavor outside of work. A project like this boosts your confidence as a developer to an immeasurable degree. As BankAlt traffic and active users grew, I would get lots of warm fuzzies inside. This feeling persists even today to an extent.</p>

<p>Looking back, I am very proud to have built BankAlt. Frankly, I am impressed at past me for crafting it to such a high level of care and detail.</p>

<p>Sometimes I regret shutting it down, and I can't help wondering what might have been if I had continued to maintain the project. Realistically, my motivation collapsed soon after I stopped playing WoW, and I don't think I could have forced myself to run a tool I had very little interest in.</p>

<h2>A resurrection?</h2>

<p>While browsing the Web Archive under the influence of nostalgia, a wild thought occurred. Wouldn't it be cool if I could resurrect the site for fun? It would be virtually useless to myself or current World of Warcraft players, but I would be proud to feature it under my portfolio.</p>

<p>The <strong>bankalt.com</strong> domain has long expired, and I do not plan on buying it back. For curiosity, I checked to see if it's available, and I was a little dismayed to find out that it is currently listed for $2900.</p>

<p><img src="/assets/img/2020-11-03-bankalt-com-domain.png" alt="Cost of the bankalt.com domain" /></p>

<p>Consequently, buying the original domain is out of the question. If I do manage to restore the site to a working state, I will host it on one of my other domains. But if you, dear reader, have money burning a hole in your pocket, feel free to buy it back for me ü§ë.</p>

<p>So, resurrection. How feasible is it? Until I dig deeper, I would say chances are pretty good. When I shuttered the site, I had the foresight to make multiple backups of the source code and the database.</p>

<p>All I have to do is to restore the database, put the source code in a folder on one of my VPS instances, and point Nginx to <code>index.php</code>. The old site ran on an Apache server, but that shouldn't matter. Hopefully backward compatibility will handle most of the issues.</p>

<p><em>But wait, there's more!</em> I had another wild idea. What if, in addition to resurrecting the original site, I were to rebuild it separately as a modern Laravel app? I think that would be pretty awesome too, just for the learning experience of porting such an old codebase.</p>

<p>This mini-project entails 2 phases:</p>

<ul>
<li><strong>phase 1</strong> - restore the original site to its former glory; host it on a vanity sub-domain</li>
<li><strong>phase 2</strong> - rebuild it in Laravel + Livewire or Inertia</li>
</ul>

<p>Both phases are great candidates for how-to articles: "How to revive a legacy PHP application", and "How to rebuild a legacy PHP application in Laravel". Actual titles TBD.</p>

<p>Before I start any of this, I need to work through my side-project backlog and clear a couple of higher priority tasks. Expect phase 1 to commence in the first half of 2021, so stay tuned!</p>

<h2>Screenshots</h2>

<p>While the Wayback Machine keeps archives of all the pages, I wanted to capture those as screenshots and bring them closer to my heart, until - and if - I am able to resurrect BankAlt.</p>

<div class="grid grid-cols-2 sm:grid-cols-4 gap-4">
    <div class="space-y-2">
        <a href="/assets/img/2020-11-03-bankalt-home.jpg" title="bankalt.com - Landing page" target="blank">
            <img src="/assets/img/2020-11-03-bankalt-home-thumb.jpg" alt="bankalt.com - Landing page"/>
        </a>    
        <div class="text-sm">
            <strong>Landing page</strong>
            <br>
            Cute, in a late-2000s kinda way.
        </div>
    </div>
    <div class="space-y-2">
        <a href="/assets/img/2020-11-03-bankalt-news.jpg" title="bankalt.com - News page" target="blank">
            <img src="/assets/img/2020-11-03-bankalt-news-thumb.jpg" alt="bankalt.com - News page"/>
        </a>    
        <div class="text-sm">
            <strong>News page</strong>
            <br>
            Not talking international news here, just BankAlt-related updates.
        </div>
    </div>
    <div class="space-y-2">
        <a href="/assets/img/2020-11-03-bankalt-about.jpg" title="bankalt.com - About page" target="blank">
            <img src="/assets/img/2020-11-03-bankalt-about-thumb.jpg" alt="bankalt.com - About page"/>
        </a>    
        <div class="text-sm">
            <strong>About page</strong>
            <br>
            Yada yada TLDR
        </div>
    </div>
    <div class="space-y-2">
        <a href="/assets/img/2020-11-03-bankalt-contact.jpg" title="bankalt.com - Contact page" target="blank">
            <img src="/assets/img/2020-11-03-bankalt-contact-thumb.jpg" alt="bankalt.com - Contact page"/>
        </a>    
        <div class="text-sm">
            <strong>Contact page</strong>
            <br>
            Old-shool captcha...
        </div>
    </div>
    <div class="space-y-2">
        <a href="/assets/img/2020-11-03-bankalt-help.jpg" title="bankalt.com - Help page" target="blank">
            <img src="/assets/img/2020-11-03-bankalt-help-thumb.jpg" alt="bankalt.com - Help page"/>
        </a>    
        <div class="text-sm">
            <strong>Help page</strong>
            <br>
            I'm astounded at the amount of work I put in creating the graphics. Also, wtf did I mean by "Rapture day"?
        </div>
    </div>
    <div class="space-y-2">
        <a href="/assets/img/2020-11-03-bankalt-faq.jpg" title="bankalt.com - FAQ page" target="blank">
            <img src="/assets/img/2020-11-03-bankalt-faq-thumb.jpg" alt="bankalt.com - FAQ page"/>
        </a>    
        <div class="text-sm">
            <strong>FAQ page</strong>
            <br>
            Funny how a lot of FAQs are not actually questions most people would ask.
        </div>
    </div>
    <div class="space-y-2">
        <a href="/assets/img/2020-11-03-bankalt-profession.jpg" title="bankalt.com - Profession page" target="blank">
            <img src="/assets/img/2020-11-03-bankalt-profession-thumb.jpg" alt="bankalt.com - Profession page"/>
        </a>    
        <div class="text-sm">
            <strong>Profession page</strong>
            <br>
            The back-end has long since gone away, so WebArchive preserved only the loading state.
        </div>
    </div>
</div>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/laravel-livewire-dynamic-charts-apexcharts</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/laravel-livewire-dynamic-charts-apexcharts" />
    <title>How to Create Dynamic Charts with Laravel Livewire and ApexCharts</title>
    <published>2020-10-20T00:00:00+00:00</published>
    <updated>2020-10-20T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Cycling has become one of my most cherished hobbies in 2020, and I did what every developer does when they love a hobby: built an app for it.

I&#039;m using Strava&#039;s API to pull my rides into a Laravel 8 app. I use this data to create statistics for various......</summary>
    <content type="html"><![CDATA[
        <p>Cycling has become one of my most cherished hobbies in 2020, and I did what every developer does when they love a hobby: built an app for it.</p>

<p>I'm using <a href="https://developers.strava.com/">Strava's API</a> to pull my rides into a Laravel 8 app. I use this data to create statistics for various metrics that are important to me.</p>

<p>I want to display the data in 2 forms: tabular and charts. I also want to be able to filter it dynamically, without page loads, and I chose <a href="https://laravel-livewire.com/">Livewire</a> 2.x for this. As an avid cyclist, I ride both road and trail/singletrack. I have 2 bikes (road + mountain), and I want to track total stats, as well as individual stats for each bike.</p>

<p>For charting, I decided to use <a href="https://apexcharts.com/">ApexCharts</a>, a JavaScript charting library that meets my modest needs.</p>

<p>Now that I have these building blocks, how do I put them together? One of my requirements is to be able to <strong>update the charts dynamically</strong> with Livewire. It took me a while to figure out how to do this, but here it is.</p>

<p><strong>Note</strong> During the time it took me to write this article, <a href="https://twitter.com/asantibanez">Andr√©s Santib√°√±ez</a> released a <a href="https://github.com/asantibanez/livewire-charts">Livewire package</a> for ApexCharts that should be more flexible for the general population. I think there is value in my own solution, not just for the learning aspect, but also because it's customized to my very specific requirements.</p>

<h2>What I'm making</h2>

<p>The first chart I wanted is a total of riding miles per year (as tracked by Strava). In addition, I also wanted to be able to filter the chart by bike, using a dropdown. So when I select a specific bike, the chart should update to display only the yearly distances for that bike.</p>

<p>Here's a gif of the final chart.</p>

<p><img src="https://media.giphy.com/media/UJ497lGjwE5EIGkki2/giphy.gif" alt="Dynamic chart filtering with Livewire" /></p>

<h2>The components</h2>

<p>A Laravel app can be structured in many ways, but I ‚ô•Ô∏è the Blade component system that was introduced in v7, so that's what I'm using. First, I started out by creating a regular view (<code>resources/views/stats.blade.php</code>) where I can display my chart(s).</p>

<p>Then there are 2 components that do the heavy lifting:</p>

<ul>
<li>a Livewire component which retrieves the chart data from the database and filters it when needed</li>
<li>a regular Laravel component acting as a wrapper for ApexCharts</li>
</ul>

<p>Each generated component comes with a controller and a view.  Here's a <a href="https://gist.github.com/breadthe/1ed8eec0b464d511877b06a04898bbef">gist</a> for the 2 controllers + 2 views, also embedded below:</p>

<script src="https://gist.github.com/breadthe/1ed8eec0b464d511877b06a04898bbef.js"></script>

<p><strong>Note</strong> File paths in the gist appear as <code>app%Http%Livewire%Stats%DistanceByYear.php</code> instead of <code>app/Http/Livewire/Stats/DistanceByYear.php</code> due to GitHub's inability to use slashes in the file name.</p>

<h2>Livewire tricks and gotchas</h2>

<p>üëâ The <code>stats.blade.php</code> view is where I render multiple Livewire chart components. This also contains a bit of code which links the ApexCharts script from the official CDN and pushes it to the top of my JS scripts stack. For context, in my <code>app.blade.php</code> I have a corresponding <code>@stack('scripts')</code> right before the closing <code>&lt;/body&gt;</code> tag.</p>

<p>üëâ The chart wrapper <code>ApexCharts.php</code> must have a unique id <code>$chartId</code>, to allow multiple chart instances on the same page. I experimented with passing a UUID but settled on a static identifier like "distance-by-year".</p>

<p>üëâ To refresh the chart data when a filter is applied, I need to emit an event. Notice this part <code>$this-&gt;emit("refreshChartData-{$this-&gt;chartId}", [...])</code> in <code>DistanceByYear.php</code>. The event has a dynamic identifier which ensures that only a specific chart gets updated (in situations where multiple charts are on the same page). In this case, the event id resolves to <code>refreshChartData-distance-by-year</code>. But on the same page I have another chart which is identified as <code>distance-by-month</code>, and the corresponding event is <code>refreshChartData-distance-by-month</code>. The second argument of the event emitter is the (optional) data payload. If you've used events in <a href="/blog/tags/vue/">Vue</a>, this pattern should look familiar.</p>

<p>üëâ Emitting an event is only half the equation. To actually get the chart to update, I need to listen for the event, then call a couple of ApexCharts methods responsible for updating the chart data.</p>

<p>üëâ Listening and reacting to a Livewire event turned out to be the hardest part to figure out. It's just not very clearly explained in the <a href="https://laravel-livewire.com/docs/2.x/events">official documentation</a>, or at least not in a way that makes sense to me. So after much experimentation and web searches, I arrived at the following ugly-duckling-yet-functional solution (see <code>apex-charts-blade.php</code>):</p>

<pre><code class="language-js">document.addEventListener('livewire:load', () =&gt; {
    @this.on('refreshChartData-{!! $chartId !!}', (chartData) =&gt; {
        chart.updateOptions({
            xaxis: {
                categories: chartData.categories
            }
        });
        chart.updateSeries([{
            data: chartData.seriesData,
            name: chartData.seriesName,
        }]);
    });
});
</code></pre>

<p>üëâ The key part to listening in JavaScript to an event emitted in PHP/Livewire, seems to be wrapping everything in this:</p>

<pre><code class="language-js">document.addEventListener('livewire:load', () =&gt; {
    @this.on('refreshChartData-{!! $chartId !!}', (chartData) =&gt; {
        // do JavaScripty stuff with chartData
    });
});
</code></pre>

<p>üëâ Notice that I'm wrapping the entire JavaScript logic in a auto-executing function call <code>(function () {...}())</code>. Tangentially, here's a good explainer for <a href="https://coolaj86.com/articles/how-and-why-auto-executing-function.html">auto-executing functions in JavaScript</a>. The reason I'm doing this is to isolate the scope of the <code>chart</code> object to each individual instance. This allows me to refresh the chart data without re-instantiating the ApexCharts object, and prevents weird behavior with multiple globally defined <code>chart</code> objects.</p>

<h2>Conclusion</h2>

<p>I hope this shed some light on how you might create a Livewire wrapper for the ApexCharts library.</p>

<p>There are several caveats to my approach:</p>

<ul>
<li>It is not the most elegant solution, but <em>it works</em> for what I'm building. If you have a better solution, hit me up on <a href="https://twitter.com/brbcoding">Twitter</a>.</li>
<li>It's not very reusable either, but thankfully there's the package I mentioned at the top of the article for those who prefer that</li>
<li>I'm using just a tiny fraction of ApexCharts' capabilities and options, and I'm exposing very little of that to Livewire. And I'm fine with that for now, because I can always add more later as the need arises.</li>
</ul>

<p>Having said that, I'm happy with the way this turned out, especially with the learning process figuring out the intricacies of integrating Livewire and ApexCharts.</p>

<p>Finally, here's how two independently filtering charts behave on the same page.</p>

<p><img src="https://media.giphy.com/media/H2xHUVXlbTjZJFLzpC/giphy.gif" alt="Multiple independently filtering charts with Livewire" /></p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/electron-generate-mac-windows-app-icons</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/electron-generate-mac-windows-app-icons" />
    <title>How to Generate Mac and Windows Icons for an Electron Forge App</title>
    <published>2020-10-09T00:00:00+00:00</published>
    <updated>2020-10-09T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">As I&#039;m wrapping things up on SVGX.app, a desktop app for managing SVG icon libraries, I find myself slogging through the most tedious 10% of the work. Part of that is building platform-specific executables.

The application icon may seem like a minor......</summary>
    <content type="html"><![CDATA[
        <p>As I'm wrapping things up on <a href="https://svgx.app/">SVGX.app</a>, a desktop app for managing SVG icon libraries, I find myself slogging through the most tedious 10% of the work. Part of that is building platform-specific executables.</p>

<p>The application icon may seem like a minor detail, yet I consider it very important, not just for branding, but also as a sign that the app is complete.</p>

<p>Unfortunately there don't seem to be a lot of resources out there for how to actually create proper Mac and Windows (and Linux) icons for the final build. It took me a while to figure out, but eventually I got it.</p>

<p>SVGX is an Electron app built with <a href="https://svelte.dev/">Svelte</a>, as well as <a href="https://www.electronforge.io/">Forge</a> which is a helpful tool for creating and publishing such apps. I'm also using <a href="https://github.com/breadthe/electron-forge-svelte">this template</a> as a starter.</p>

<h2>Step 1</h2>

<p>First, install the <a href="https://github.com/safu9/electron-icon-builder">electron-icon-builder</a> utility which generates the icons for you. Follow the instructions in the repo.</p>

<h2>Step 2</h2>

<p>Next you'll run the command to generate a set of Mac/Windows/Linux icons from a single <code>png</code> image. The source image should be at least 1024x1024 in size.</p>

<p>In my case, I ran this in the folder where my source image <code>svgx-logo-v3-1024.png</code> is located, and outputted it to another folder called <code>appicons</code>.</p>

<pre><code class="language-bash">electron-icon-maker --input=svgx-logo-v3-1024.png --output=./appicons
</code></pre>

<h2>Step 3</h2>

<p>Back in the Electron app directory, add the appropriate icon path to <code>package.json</code>, before running the build command.</p>

<ul>
<li>Mac: <code>./src/icons/mac/icon.icns</code></li>
<li>Windows: <code>./src/icons/win/icon.ico</code></li>
<li>Linux: <code>./src/icons/png/1024x1024.png</code></li>
</ul>

<pre><code class="language-json">{
  "name": "...",
  "productName": "...",
  "version": "...",
  "description": "...",
  "main": "...",
  "scripts": {
    ...
  },
  "keywords": [],
  "author": "...",
  "license": "MIT",
  "config": {
    "forge": {
      "packagerConfig": {
        "icon": "./src/icons/mac/icon.icns"
      },
      "makers": [
        ...
      ]
    }
  },
  "dependencies": {
    ...
  },
  "devDependencies": {
    ...
  }
}
</code></pre>

<p>I haven't figured out if there's a way to do this across platforms without modifying <code>package.json</code> manually before building, but this works well enough and barely adds any overhead.</p>

<h2>Step 4</h2>

<p>Run the command to generate the appropriate build for your OS. For Electron Forge, the command is <code>npm run make</code> or <code>yarn make</code>.</p>

<h2>Step 5</h2>

<p>Profit!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/electron-export-env-vars-mac-windows</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/electron-export-env-vars-mac-windows" />
    <title>How to Export Environment Variables on Mac and Windows</title>
    <published>2020-09-25T00:00:00+00:00</published>
    <updated>2020-09-25T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I&#039;m building a desktop app for managing SVG icon libraries called SVGX.app.

It uses Electron and Svelte, as well as Forge which is a helpful tool for creating and publishing such apps. I&#039;m also using this template as a starter.

My plan was to offer two......</summary>
    <content type="html"><![CDATA[
        <p>I'm building a desktop app for managing SVG icon libraries called <a href="https://svgx.app/">SVGX.app</a>.</p>

<p>It uses Electron and Svelte, as well as <a href="https://www.electronforge.io/">Forge</a> which is a helpful tool for creating and publishing such apps. I'm also using <a href="https://github.com/breadthe/electron-forge-svelte">this template</a> as a starter.</p>

<p>My plan was to offer two versions of the app: <em>paid</em> and <em>demo</em>. Notice I said "was" - I'm still debating the details. Anyway, I thought the demo would be a stripped edition of the full app, lacking certain features.</p>

<p>I decided that one way to accomplish this in an Electron app would be to create a couple of extra build tasks in <code>package.json</code>, and then run the commands like so:</p>

<ul>
<li><code>npm run start</code> or <code>yarn start</code> - builds the full Mac version</li>
<li><code>npm run start-demo</code> or <code>yarn start-demo</code> - builds the demo Mac version</li>
<li><code>npm run start-win</code> or <code>yarn start-win</code> - builds the full Windows version</li>
<li><code>npm run start-win-demo</code> or <code>yarn start-win-demo</code> - builds the demo Windows version</li>
</ul>

<p>Each of these tasks would export a <code>DEMO</code> flag as an environment variable, that my app could use to conditionally "guard" features when the flag is <code>false</code>.</p>

<p>Well, on Mac it's simple: just add <code>export \"DEMO=yes\"</code> in the script (notice the escaped quotes), and call it a day. The Electron app would read the <code>DEMO</code> variable with <code>process.env.DEMO</code>. Simple, right?</p>

<p>Not so fast. It turns out you can't use this syntax to export environment variables in Windows (I use Git Bash for my terminal). The build process will fail with an error:</p>

<pre><code class="language-bash">'export' is not recognized as an internal or external command, operable program or batch file.
</code></pre>

<p>I feel I should have known this, but I code almost exclusively on a Mac, so I never ran into this situation before. What does work is to use <code>set \"DEMO=yes\"</code> instead.</p>

<p>So my script becomes what you see below:</p>

<pre><code class="language-json">{
  "name": "...",
  "productName": "...",
  "version": "...",
  "description": "...",
  "main": "...",
  "scripts": {
    "start": "export \"DEMO=no\" &amp;&amp; concurrently \"npm:svelte-dev\" \"electron-forge start\"",
    "start-demo": "export \"DEMO=yes\" &amp;&amp; concurrently \"npm:svelte-dev\" \"electron-forge start\"",
    "start-win": "set \"DEMO=no\" &amp;&amp; concurrently \"npm:svelte-dev\" \"electron-forge start\"",
    "start-win-demo": "set \"DEMO=yes\" &amp;&amp; concurrently \"npm:svelte-dev\" \"electron-forge start\"",
  },
  ...
}
</code></pre>

<p>In summary:</p>

<ul>
<li>use <code>export</code> on Mac</li>
<li>use <code>set</code> on Windows</li>
</ul>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/2020-developer-review-macbook-pro-2015-vs-2019</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/2020-developer-review-macbook-pro-2015-vs-2019" />
    <title>Developer review - 2015 15&quot; MacBook Pro vs 2019 16&quot; MacBook Pro</title>
    <published>2020-07-31T00:00:00+00:00</published>
    <updated>2020-07-31T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">If you&#039;re a Mac user, and especially a developer or IT professional, it&#039;s highly likely you hold the 2015 MacBook Pro in high regard. In many aspects, the 2015 generation was considered Apple&#039;s pinnacle of laptop design. From there, things went downhill,......</summary>
    <content type="html"><![CDATA[
        <p>If you're a Mac user, and especially a developer or IT professional, it's highly likely you hold the 2015 MacBook Pro in high regard. In many aspects, the 2015 generation was considered Apple's pinnacle of laptop design. From there, things went downhill, and the MacBook Pro suffered several iterations of poor design, most notably the infamous fragile keyboard, but also the lack of ports and controversial Touch Bar.</p>

<p>In 2019, Apple redeemed itself in the eyes of many developers, by releasing a new, much improved 16" model. This new laptop flagship represents a coy admission of past failure and an attempt at redemption. Luckily, I own both the 2015 15" and the 2019 16", and I use them on an almost-daily basis, so I am in a position to compare them from the <strong>point of view of a developer</strong>.</p>

<h2>TL;DR</h2>

<p>To cut right to the chase, my personal, <em>biased</em> opinion is that the 2015 15" MacBook Pro is <em>overall</em> a better machine than the 2019 16", <em>for a developer</em>, when cost is an issue. The things that I dislike the most (there are more, keep reading) about the 16" are: lack of ports, weight, Touch Bar.</p>

<p>After a brief spec comparison, I will dive into various features and components and square them off against each other. Keep in mind that this is a biased, subjective review, and your opinion may be the opposite. Let's proceed.</p>

<h2>Specs</h2>

<p>Quick disclosure: the 2015 MacBook is my personal machine that I've been using for ~4 years, while the 2019 16" was issued by my employer, and I'm using it for ~5 months.</p>

<table>
<thead>
<tr>
  <th>&nbsp;</th>
  <th>2015 (mid)</th>
  <th>2019</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Model</td>
  <td>15" MacBook Pro</td>
  <td>16" MacBook Pro</td>
</tr>
<tr>
  <td>CPU</td>
  <td>4-core i7 (2.5 GHz / 3.7 GHz Turbo)</td>
  <td>8-core i9 (2.4 GHz / 5.0 GHz Turbo)</td>
</tr>
<tr>
  <td>RAM</td>
  <td>16GB 1600MHz DDR3</td>
  <td>32GB 2667MHz DDR4</td>
</tr>
<tr>
  <td>SSD</td>
  <td>512GB</td>
  <td>1TB</td>
</tr>
<tr>
  <td>GPU</td>
  <td>AMD Radeon R9 M370X 2 GB</td>
  <td>AMD Radeon Pro 5300M 4 GB</td>
</tr>
<tr>
  <td>Display</td>
  <td>2880 x 1800 (220 ppi)</td>
  <td>3072 x 1920 (226 ppi)</td>
</tr>
</tbody>
</table>

<p>You'll notice that the new machine is approximately twice as "better" (2x!!!) on paper, in most categories. But is it really that more powerful? Debatable, and highly dependent on your use-case.</p>

<h2>Keyboard</h2>

<p><strong>Winner:</strong> 16" 2019</p>

<p><strong>2015 15"</strong> 3/5 ‚≠ê‚≠ê‚≠êÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è</p>

<p><strong>2019 16"</strong> 4/5 ‚≠ê‚≠ê‚≠ê‚≠ê</p>

<p>Let's tackle the elephant in the room first. After 2015, the keyboard on subsequent generations has been widely reviled as one of the worst regressions to ever afflict a Mac. Apple changed the classic design from scissor to butterfly switches (mostly for aesthetics and a misguided desire to make everything slimmer), but in doing so it introduced two major problems: a lot of people were put off by the new tactile feel, and, more importantly, the new keyboards tended to break in record numbers (due to gunk getting stuck inside the much narrower confines).</p>

<p>Personally I know quite a few people with post-2015 MacBooks, and all but one have had various keys break, stop working, or had to be replaced entirely.</p>

<p>Keyboard feel is a... touchy subject (forgive the pun) and, having never used the butterfly generation, I can't really comment on it.</p>

<p>I am happy to report that the 2019 keyboard (which has reverted to the scissor design) is quite pleasurable to type on. I would put it above the 2015, for several reasons:</p>

<ul>
<li>it feels less <em>rubbery</em>, hence more tactile</li>
<li>the travel is smaller by a very tiny fraction less, which I prefer</li>
<li>keys have increased surface area, making them easier to hit</li>
</ul>

<p>Yet, it's still not quite up there with the Apple Magic Keyboard 2, which I consider to be the best keyboard ever for coding/development.</p>

<p>My personal keyboard hierarchy is: Magic Keyboard 2 > 2019 16" MacBook Pro > 2015 15"/13" MacBook Pro. Keep in mind that the differences are very small, and I will just as happily use the 2015 keyboard vs the MK2.</p>

<p>It seems that Apple has finally solved the keyboard-go-bad issue with this generation, despite never acknowledging the flaws in the butterfly design.</p>

<h2>Touchpad</h2>

<p><strong>Winner:</strong> 15" 2015</p>

<p><strong>2015 15"</strong> 5/5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠êÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è</p>

<p><strong>2019 16"</strong> 3/5 ‚≠ê‚≠ê‚≠ê</p>

<p>The post-2015 touchpad has grown to a ludicrous size. It can be argued that the bigger surface area helps artists and designers (does it though?) but as a programmer I find it annoyingly and uselessly large, and it occasionally gets in the way as I type.</p>

<p>There was nothing wrong with the size of the 2015 touchpad - they could've added a couple mm on each side and called it a day.</p>

<p>In operation, I can't find any difference between the 2015 and the 2019 touchpads but I'll take points off of the 2019 just because I'm put off by the size.</p>

<h2>Ports &amp; connectivity</h2>

<p><strong>Winner:</strong> 15" 2015</p>

<p><strong>2015 15"</strong> 5/5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠êÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è</p>

<p><strong>2019 16"</strong> 1/5 ‚≠ê</p>

<p>To its credit, the 2019 16" MacBook Pro does have 4 USB-C ports (count them - 4!!!) but this pales in comparison to the old 2015's plethora of connection options: USB 3? Check! HDMI? Check! Thunderbolt? Check! SD card slot? Check!</p>

<p><img src="/assets/img/2020-07-31-2019-macbook-pro-dongle.jpg" alt="2019 16&quot; MacBook Pro dongle" title="2019 16-inch MacBook Pro dongle" /></p>

<p>I can't convey enough how annoyed I am that I have to use a stupid dongle to connect an external monitor. I'll admit that perhaps in a few more years there will be a lot more USB-C peripherals but for the time being I don't own a single USB-C device that can connect directly to my Mac.</p>

<p>Apple could have easily added an HDMI port and a couple USB 3 ports because the 16" is chunky enough to accommodate them. But hey, form over function üòé.</p>

<h2>MagSafe</h2>

<p><strong>Winner:</strong> 15" 2015</p>

<p><strong>2015 15"</strong> 5/5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠êÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è</p>

<p><strong>2019 16"</strong> 1/5 ‚≠ê</p>

<p>Though the MagSafe connector is technically a... connector, I wanted to discuss it in its own category because I'm deeply offended that they removed it. MagSafe is one of those brilliant-yet-simple innovations that brought so much utility and elegance to the Mac.</p>

<p>MagSafe was, naturally, replaced by one of the 4 generic USB-C ports, but if you think you can use <em>any</em> of them to charge your Mac, you'll be in for a treat. Thanks to another design flaw, it turns out that <a href="https://www.tomsguide.com/news/macbook-pro-charging-bug-kernel_task">you should probably plug in your charging cable only on the right side</a>, otherwise your computer may overheat.</p>

<h2>Touch Bar</h2>

<p><strong>Winner:</strong> 15" 2015</p>

<p><strong>2015 15"</strong> 5/5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠êÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è</p>

<p><strong>2019 16"</strong> 2/5 ‚≠ê‚≠ê</p>

<p>I really, really (really) wish the Touch Bar was optional. Subjectively, I find it not just useless, but actively annoying, as a programmer.</p>

<p>I tried to love it, I did. For a couple of months I gave it the benefit of the doubt and tried to integrate it into my workflow (whatever that means), but I found myself reaching out for the F-keys a lot more often than I needed the "context-aware" functions of the Touch Bar. In the end I flipped it in Preferences so that it acts as F-keys by default.</p>

<p>So now I'm left with a smooth, non-tactile strip of function keys that are worse in functionality, overall, than a regular keyboard, AND I have to pay extra for the privilege (well, not in this case because it's a work machine, but you get the point). Thanks, Apple!</p>

<h2>Display</h2>

<p><strong>Winner:</strong> 16" 2019 - barely</p>

<p><strong>2015 15"</strong> 4/5 ‚≠ê‚≠ê‚≠ê‚≠êÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è</p>

<p><strong>2019 16"</strong> 5/5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</p>

<p>The 2019 model adds a tiny amount of real estate (16" vs 15.4") and more pixels, but the resulting PPI is very close (226 vs 220). The differentiators, however, are the higher brightness (500 nits vs 300), higher contrast (unspecified vs 900:1), and wider color gamut (P3 + True Tone vs sRGB).</p>

<p>In daily use, the 16" display does pop, but the difference is not as big as the specs might suggest. Now, if you're any kind of artist (and not merely a programmer), your bias will be stronger in favor of the display, and I can't fault you for that. For me, the 15" screen is good enough, and switching to the 16" is just the cherry on the cake.</p>

<h2>Performance</h2>

<p><strong>Winner:</strong> 16" 2019 - barely</p>

<p><strong>2015 15"</strong> 3/5 ‚≠ê‚≠ê‚≠êÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è</p>

<p><strong>2019 16"</strong> 5/5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</p>

<p>On paper, the 2019 with the i9 CPU blows the i7 2015 out of the water. In real life usage, however, I can't tell the difference.</p>

<p>My work consists of web programming in PHP/Laravel/JS, with a couple VMs running in the background, and an occasional Docker container. My main IDE is PHPStorm, but I usually run VSCode in parallel. Firefox and Chrome are both running with a few dozen tabs open. I've also got various other apps running in the background, such as Slack, Spotify, etc. Rarely, I fire up Pixelmator Pro, Figma, or Gravit. Both machines work impeccably but neither feels faster than the other.</p>

<p>If you're just a programmer like me, and not involved in heavy video/image processing, it's very likely that the i9 CPU is massive overkill for 99% of cases. I will, however, give the 2019 a slight edge, just because it <em>is</em> objectively faster.</p>

<p>Finally, if I had to pay for the 16" out of my own pocket, I would get the i7 with 32GB of RAM, since the extra memory will make a bigger difference in my line of work than the additional cores.</p>

<h2>Power usage</h2>

<p><strong>Winner:</strong> 15" 2015</p>

<p><strong>2015 15"</strong> 3/5 ‚≠ê‚≠ê‚≠êÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è</p>

<p><strong>2019 16"</strong> 2/5 ‚≠ê‚≠ê</p>

<p>It's probably the i9 CPU's fault, but my 16" likes to run hot, despite not putting a lot of strain on it, aside from VirtualBox and the VMs I mentioned earlier. As a result, power tends to drain quickly when unplugged, even under light load. This is likely due to the fact that many apps aren't optimized for multi-core usage, overloading the one core instead.</p>

<p>Yet another reason to skip the i9 if you don't need the extra cores.</p>

<h2>Speakers</h2>

<p><strong>Winner:</strong> 16" 2019</p>

<p><strong>2015 15"</strong> 2/5 ‚≠ê‚≠êÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è</p>

<p><strong>2019 16"</strong> 5/5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</p>

<p>Finally, a category where the 2019 MacBook Pro shines! The built-in speakers are the best I've ever used in any kind of portable machine. To quote Apple, "<em>High‚Äëfidelity six‚Äëspeaker system with force‚Äëcancelling woofers</em>".</p>

<p>I'm not in the least an audiophile but even I can appreciate the quality of these speakers. The sound is clear and crisp without distortion, as well as loud to the extent that I can't crank it up more than 50%.</p>

<p>In contrast, the speakers on the 2015 generation are plain ol' stereo, and rather muffled sounding, though still serviceable.</p>

<p>As such, the 2019 16" MacBook Pro is the clear winner in the audio category.</p>

<h2>Touch ID</h2>

<p><strong>Winner:</strong> 16" 2019</p>

<p><strong>2015 15"</strong> 1/5 ‚≠êÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è</p>

<p><strong>2019 16"</strong> 5/5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</p>

<p>I love Touch ID. It makes authentication so much easier. 1Password integrates very well with Touch ID, too. You still need to use your master password occasionally to unlock the machine, for example after waking it from a long sleep, but that's actually a good security feature.</p>

<h2>Webcam</h2>

<p><strong>Winner:</strong> 16" 2019 - barely</p>

<p><strong>2015 15"</strong> 2/5 ‚≠ê‚≠êÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è</p>

<p><strong>2019 16"</strong> 3/5 ‚≠ê‚≠ê‚≠ê</p>

<p>I'll spare you the raw camera specs, but the 2016 does have a slightly improved webcam. Disappointingly, it could have been so much better for the price. As a result, it barely edges out the 2015 model.</p>

<h2>Size &amp; weight</h2>

<p><strong>Winner:</strong> 15" 2015</p>

<p><strong>2015 15"</strong> 3/5 ‚≠ê‚≠ê‚≠êÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è</p>

<p><strong>2019 16"</strong> 2/5 ‚≠ê‚≠ê</p>

<p>The 16" machine is big and heavy, despite lacking actual "Pro" features such as the various ports a power user might need. While sporting only a few mm more in length and width than the 2015 15", it feels like a dumbbell, making me afraid of holding it by the edge, in case it bends.</p>

<p>In truth, the build is very solid and there's nary a wiggle, creak, or flex. Yet, the 2015 is slimmer, lighter, and easier to hold in your lap.</p>

<h2>Other considerations</h2>

<p>As a bonus, here are a few more observations on the 2019 16" MacBook Pro.</p>

<p><strong>Random crashes</strong></p>

<p>Sometimes the machine crashes randomly for no apparent reason. The temperature rises, which causes the fan to spin fast. Meanwhile, both the image and controls freeze, and the only way to restore it is to power it off and on again. One time it froze during a video conference, but the sound was still going, so I could hear my team talking but I couldn't interact.</p>

<p>Luckily this doesn't happen very often, but it's unpredictable, and it doesn't look like the like macOS 10.15.6 (latest version as of this writing) fixed the problem.</p>

<p><strong>Lifting the lid</strong></p>

<p>It may sound like such a small detail, but I don't feel as confident lifting the lid of the 16" one-handed as I do with the 2015 15". There's a little too much "stickiness" (read tension) in the lid mechanism. I know, I know, it's nitpicking, but still...</p>

<p><strong>Hinge smoothness</strong></p>

<p>The 2015 15" has more of a linear feel to the lid mechanism, in that the tension feels constant throughout its travel. Not a good or bad thing, just different.</p>

<p><strong>Power button crispness</strong></p>

<p>I rather like how crisp the power button on the 16" is. You know, the same button that houses the Touch ID. It's very firm and clicky, with zero wobble, which is definitely not the case with the 2015 generation. But then again, we are talking about a one off, purposely designed button, vs a regular function-like key.</p>

<h2>Conclusion</h2>

<p>Adding up my purely subjective category scores...</p>

<p><strong>2015 15"</strong> 41/60</p>

<p><strong>2019 16"</strong> 38/60</p>

<p>That makes the 2015 15" MacBook Pro the winner by a small margin. Now, this was a foregone conclusion, a rigged comparison from the very start, considering my inherent biases.</p>

<p>Make no mistake, the 16" is an excellent machine, and a redemption of sorts for the poor hardware Apple put out during the "dark age" between 2015 and 2019. On the other hand, the 16" is what the immediate successor to the 2015 MacBook Pro should have been. Instead, it took 3 years for Apple to stumble around drunkenly, despite masses of developers telling them exactly what they wanted.</p>

<p>If it were up to me - and countless others, based on numerous discussions over the years - I would take the 2015 chassis, then transplant the keyboard, display, speakers, and CPU/RAM/GPU from the 2019 16", and call it a day. I would even keep the same 15" form factor. Oh fine, I'd add a couple USB-C ports.</p>

<p>All this to say that, for a developer, a fully decked-out 2019 16" MacBook Pro is probably overkill. You will likely not need the i9, although more RAM is always nice to have. For video or image processing, or <em>gasp</em> gaming, you'll certainly make use of the more powerful CPU in combo with the best GPU available.</p>

<p>As tested, my 2019 16" is $3300 retail - an eye-watering amount of money. Crazily enough, this is actually middle of the road. If you have unlimited funds, also a need for additional power and storage, you can spec it all the way to $6700.</p>

<p>I am fortunate and grateful that my employer has spent the money to equip our developers with top-notch ma99chines, but not everyone has this opportunity. So if you're considering a MacBook Pro from one of the "best generations" (i.e. 2015 or 2019), and you need to spend your own money, here's what I recommend.</p>

<p>The cheapest solution (and the one I'd probably choose if I had to buy another MacBook Pro) is to buy a <strong>used</strong> 2015 15" model from eBay or elsewhere. Expect to pay $1000 - $1300 for a well-equipped model (i7, 16 GB RAM, 512 GB / 1 TB SSD). There are signs that Apple will continue to support this hardware for a few more years so this should see you through quite a few projects.</p>

<p>One caveat to watch out for in used Macs is that this particular generation is susceptible to battery swelling. I know 3 different people (me included) who've suffered from this issue. Certain serial numbers are (or were) covered by Apple's <a href="https://support.apple.com/15-inch-macbook-pro-battery-recall">battery recall</a>, but others (like mine) aren't. However, if you've not shy about repairing your own stuff, the battery is relatively easy to replace on your own, and it only costs $40-60.</p>

<p>Another thing to watch out for, when buying used from 3rd parties, is the amount of wear and tear on the machine, although that's harder to judge by looking at some pictures. Just do your due diligence in vetting the seller and the product.</p>

<p>There's a good argument for holding off on buying a new Mac for the time being. Later this year, Apple is <a href="https://www.macrumors.com/guide/apple-silicon/">slated to release a new generation of Macs</a> containing their own CPU design (Arm). By all accounts, this is a good thing, and I'm quite looking forward to it, even though I am not planning to buy a new Mac in the next few years.</p>

<p>Now, if you're absolutely dead-set on buying a new MacBook Pro <em>right now</em>, I think you'll do very well with the entry-level i7, 16 GB RAM, 512 GB SSD model. At $2400, that's anything but cheap. If you need more storage (32 GB RAM, 1 TB SSD), bump that up to $3000. And then you might as well get the i9 CPU and you'll end up at $3300. See how that works?</p>

<p>Luckily, there are frequent sales and deals on the base 16" model ($200-300 off), at Amazon, Bestbuy, Costco, etc. It's possible there'll be heavier discounts when the next generation hits.</p>

<p>Should you upgrade from the 2015 15" to a 2019 16"? If your 2015 Mac still works fine, no. Apart from some nice-to-haves like better speakers and Touch ID, you won't feel the difference. Even if your old machine is failing, I would still recommend buying a used one to hold you off until the next generation of Arm Macs.</p>

<p>That's it for my comparison review of the 2015 15" MacBook Pro vs 2019 16". If you own either of these machines - and they are in working order - pat yourself on the back because they are excellent and will take you a long way in your developer career!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/2020-more-physical-less-cerebral</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/2020-more-physical-less-cerebral" />
    <title>More of the Physical, Less of the Cerebral</title>
    <published>2020-06-30T00:00:00+00:00</published>
    <updated>2020-06-30T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">It has been over a month since I posted anything on the blog and I feel that I must come clean - not for my non-existent fanbase, but rather to hold myself accountable. You see, I just haven&#039;t been doing a lot of coding outside of work lately, and......</summary>
    <content type="html"><![CDATA[
        <p>It has been over a month since I posted anything on the blog and I feel that I must come clean - not for my non-existent fanbase, but rather to hold myself accountable. You see, I just haven't been doing a lot of coding outside of work lately, and there's less to blog about as a consequence. So how did this come about?</p>

<h2>A brief history of coding as a hobby</h2>

<p>For about 3 years I found myself immersed in a variety of situations and environments that really made me want to code 24/7. Hence this blog and my Twitter handle <a href="https://twitter.com/brbcoding">@brbcoding</a>, both harbingers of my personality. It has been a fun period during which I learned a ton of stuff, and hopefully I was able to spread some of it around.</p>

<p>During this time I was anticipating a moment when I would burn out and take a break from all the coding. This moment has come, and it coincides with the COVID-19 crysis.</p>

<h2>A new job, a new pandemic</h2>

<p>While history undoubtedly will record a few extra volumes for 2020, one thing that changed in my professional life was my day job. I had worked as a Laravel dev for the past 2+ years but earlier this year I changed it for something more... sustainable. I am still a full-stack dev - I continue working with PHP and JavaScript - but the stack has no relation to Laravel, Vue, or any of the stuff I've been talking about here and on Twitter.</p>

<p>In other words, work is more intense and not as fun as working with Laravel. At the end of the day I am drained mentally, and it has become harder to make myself code as a hobby.</p>

<p>While the pandemic has transformed certain people into super-makers, whereby they've been cranking out one software product after another, I suspect some of those people were also part of the large amount of layoffs during this period. I would love for my side projects to be my day-job but thankfully I am still employed full time and none of my side projects have generated any money. Until that changes significantly, the day job is my main priority.</p>

<p>## Social distancing in the great outdoors</p>

<p>I will admit that quarantine and social distancing haven't changed my life a great deal. In fact, strictly on a personal level, it has been mostly improvements.</p>

<p>In the US, things haven't been locked down to the extent of other countries, for better or worse. This means that going outdoors remains an option, as long as distancing procedures are observed.</p>

<p>As summer rolls in, I'm feeling the call of the outdoors. There's something very cathartic about being alone on a trail, with nothing on my mind.</p>

<h2>Lots of cycling</h2>

<p>While trail riding is my main passion during the summer, it is highly dependent on trail conditions. To compensate, I've renewed my passion for road cycling, and I've been doing a lot of both.</p>

<p>As I write this, I've exercised for 10 days straight - a mix of trail/road cycling, and weightlifting. I entered a rhythm where I feel bored if I stop even for a day. Ironically - well, not really - I eat a lot more, but I'm getting leaner. So it's a win-win: I get fitter and healthier while eating anything I want in large enough quantities.</p>

<p>In July, I plan to step it up even more. I even signed up for a 600 mile/month cycling challenge, but realistically I don't know if I can pull that off. It's all in good fun though.</p>

<p>I don't plan to take part in any competition, but I'm a firm believer in self-improvement, so training for me is a way to get progressively better at a thing.</p>

<h2>A little reading</h2>

<p>One of my favorite ways to unwind after a hard training session is to read a book. The latest is Dune, which I am revisiting after 25 years, in anticipation of the 2020 movie. Reading it as an adult makes me appreciate this timeless classic a lot more.</p>

<h2>A little gaming</h2>

<p>I think of myself as a gamer but that is only one aspect of what I like. The past month I've indulged in the final installment of Terraria v1.4, Journey's End. Terraria holds a spot in my top 5 games of all time, and the v1.4 content update does it great justice. For the fans, I completed a full run-through and even managed to craft Zenith, the most powerful weapon in the game.</p>

<h2>A little coding</h2>

<p>I still code outside of work, but no more than ~30 minutes a day. My desire is to release <a href="https://svgx.app/">SVGX</a> to the public sooner rather than later, despite not being jam-packed with all the possible features. The problem, however, is that preparing for a launch is such an overwhelming task that I keep postponing it. Truthfully, I cannot say when the product launch will occur, but if you are interested you can sign up with your email to be notified.</p>

<h2>More tweeting, less blogging</h2>

<p>Blogging is very time-consuming, and with my changing priorities and mental state, I've been very inconsistent about posting. As such, I'm shifting more towards a micro-blogging sort of approach, by tweeting developer-related stuff that I find interesting, rather than spending hours crafting a blog post. I rarely tweet non-developer things, so if you like your dev content focused, give me a follow üëâ <a href="https://twitter.com/brbcoding">@brbcoding</a>.</p>

<h2>It's all good</h2>

<p>Life ebs and flows, and so do our interests and priorities. I will go where it takes me. See you around!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/2020-developer-podcasts</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/2020-developer-podcasts" />
    <title>2020 Developer Podcasts</title>
    <published>2020-05-26T00:00:00+00:00</published>
    <updated>2020-05-26T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">

New for 2020:


Building Livewire or from Apple Podcasts
Twenty Percent Time
BaseCode or from Apple Podcasts
Ladybug Podcast or from Apple Podcasts
Happy Dev or from Apple Podcasts


Rolled over from 2019:


Full Stack Radio
Syntax.fm
Laravel News......</summary>
    <content type="html"><![CDATA[
        <h2>TL;DR list</h2>

<p>New for 2020:</p>

<ul>
<li><a href="https://laravel-livewire.com/podcast/">Building Livewire</a> or from <a href="https://podcasts.apple.com/us/podcast/building-livewire/id1480884324">Apple Podcasts</a></li>
<li><a href="https://podcasts.apple.com/us/podcast/twenty-percent-time/id1231652815">Twenty Percent Time</a></li>
<li><a href="https://basecodefieldguide.com/podcast/">BaseCode</a> or from <a href="https://podcasts.apple.com/us/podcast/the-basecode-podcast/id1466110887">Apple Podcasts</a></li>
<li><a href="https://ladybug.dev/">Ladybug Podcast</a> or from <a href="https://podcasts.apple.com/us/podcast/ladybug-podcast/id1469229625">Apple Podcasts</a></li>
<li><a href="https://www.happydev.fm/">Happy Dev</a> or from <a href="https://podcasts.apple.com/us/podcast/happy-dev/id1485626298">Apple Podcasts</a></li>
</ul>

<p>Rolled over from <a href="/blog/developer-podcasts/">2019</a>:</p>

<ul>
<li><a href="http://www.fullstackradio.com/">Full Stack Radio</a></li>
<li><a href="https://syntax.fm/">Syntax.fm</a></li>
<li><a href="https://laravel-news.com/podcast/">Laravel News Podcast</a></li>
<li><a href="https://noplanstomerge.simplecast.com/">No Plans to Merge</a> or from <a href="https://podcasts.apple.com/us/podcast/no-plans-to-merge/id1455034944">Apple Podcasts</a></li>
<li><a href="https://rework.fm/">Rework</a> or from <a href="https://podcasts.apple.com/us/podcast/rework/id1264193508">Apple Podcasts</a></li>
<li><a href="https://podcasts.apple.com/us/podcast/the-laravel-snippet/id1451072164">The Laravel Snippet</a></li>
<li><a href="https://laracasts.com/podcast">The Laracasts Snippet</a> or from <a href="https://laracasts.simplecast.fm/">Simplecast</a></li>
</ul>

<h2>How I listen to podcasts</h2>

<p><strong>Pre-COVID</strong> 95% of my listening happened in the car, while commuting to work.</p>

<p><strong>Post-COVID</strong>, since I've been working from home, you would think there are less to listen, but no. I get more listening time than ever, for virtue of the fact that now I can listen while exercising, and I do that on a strict day-on/day-off schedule. In addition, I've taken to listening while doing various tasks around the place, like preparing meals and other chores.</p>

<p>Well, ok, I still drive a little. Not driving a car for months is really bad for it, so I "exercise" it once a week, to keep the battery running, the fluids circulating, the brakes from rusting, and prevent the tires from fusing into the ground. And this makes another opportunity for listening.</p>

<p>I can't listen to any form of talk radio while I'm doing actual, creative work, although music is fine. A podcast requires my attention, and it only works for me while I'm performing mindless, physical tasks like driving and exercising.</p>

<p>Another aspect is that, over time, I've been slowly increasing the playback speed in my podcast app. It's a great technique for cramming more time into a limited listening schedule. So far I'm up to 1.4x, but I aim to raise it higher. I need time to get acclimated to each 0.1x increase, so I do it slowly, over a period of months.</p>

<h2>The great Spotify debacle, and an alternate podcatcher</h2>

<p>In the latter half of 2019 a controversy brewed around Spotify and their podcasting practices. I was - and still am - a subscriber. I use it mainly as my music library, but I was very happy it also had all the podcasts I could ever want. Well, most great products/services/companies will screw up sooner or later, as revenue and hubris grow hand-in-hand, and unfortunately Spotify wasn't about to curb the trend.</p>

<p>When Spotify announced they would be inserting their own ads into podcasts (even for Premium users, and in addition to the ones embedded by the creators), it made subscribers understandably mad. There followed an exodus from the platform, and the race was on to discover new podcast providers.</p>

<p>This proved to be a good thing, for me at least, because I decided to give <a href="https://www.pocketcasts.com/">Pocket Casts</a> a try. And boy, was it a huge improvement over Spotify! For context, I use the Android app on my phone. Not only is the app free (though I would buy it in a heartbeat if it still cost money), but it has an amazing workflow for listening to and managing podcasts. The queueing system and play controls (just to name a couple) are marvelous. Of course, it has all the podcasts I need.</p>

<p>If you haven't tried Pocket Casts yet, I highly recommend it. It is head and shoulders above Spotify's player in terms of features, stability, ease of use and so much more. It may very well make your life easier, and that's no exaggeration.</p>

<h2>2020 podcasts in depth</h2>

<p>I am not going to rehash everything I said about the original list I posted last year so just read the <a href="/blog/developer-podcasts/">2019 article</a> for more details.</p>

<h3><a href="https://laravel-livewire.com/podcast/">Building Livewire</a></h3>

<p><img src="https://laravel-livewire.com/img/podcast-artwork.svg" alt="Building Livewire podcast" title="Building Livewire podcast" width=200></p>

<p><strong>Twitter</strong> N/A</p>

<p><strong>Hosted by</strong> <a href="https://calebporzio.com/">Caleb Porzio</a></p>

<p><strong>Length</strong> 10m</p>

<p><strong>What is it about?</strong> Caleb shares short, 10 minute thoughts and snippets from his experience building <a href="https://laravel-livewire.com/">Livewire</a> for the past 1+ year. I love these insightful, quick-fire episodes that don't require a big mental commitment, but at the same time manage to condense essential ideas in an easily-digestible format.</p>

<h3><a href="https://podcasts.apple.com/us/podcast/twenty-percent-time/id1231652815">Twenty Percent Time</a></h3>

<p><img src="https://is3-ssl.mzstatic.com/image/thumb/Podcasts123/v4/08/7e/b6/087eb6e8-1f74-5b22-7c91-58d59bd9b0a9/mza_11443053232891169981.jpg/313x0w.jpg" alt="Twenty Percent Time podcast" title="Twenty Percent Time podcast" width=200></p>

<p><strong>Twitter</strong> <a href="https://twitter.com/twentypercentfm">TwentyPercentTime</a></p>

<p><strong>Hosted by</strong> <a href="https://tighten.co/">the folks at Tighten</a></p>

<p><strong>Length</strong> ~20-30m</p>

<p><strong>What is it about?</strong> Tighten is a prominent company in the Laravel community, and I've had a soft-spot for them for a long time. This is not a new podcast, but after a hiatus, they are back with new content. New episodes focus on discussions with company employees on various developer-related topics, from code techniques to ops to procedures. Very insightful stuff that sheds light on the inner workings of a successful software consultancy.</p>

<h3><a href="https://basecodefieldguide.com/podcast/">BaseCode</a></h3>

<p><img src="https://basecodefieldguide.com/podcast/assets/img/logo.png" alt="BaseCode podcast" title="[BaseCode] podcast" width=200></p>

<p><strong>Twitter</strong> N/A</p>

<p><strong>Hosted by</strong> <a href="https://twitter.com/gonedark">Jason McCreary</a> and <a href="https://twitter.com/jessarchercodes">Jess Archer</a></p>

<p><strong>Length</strong> ~20-30m</p>

<p><strong>What is it about?</strong> Hosted by two prominent members of the Laravel community, the show discusses various programming techniques and challenges, testing and patterns. The technical discussion is slightly more in depth than other podcasts, but it's straight to the point and very easy to follow.</p>

<h3><a href="https://ladybug.dev/">Ladybug Podcast</a></h3>

<div class="inline-block p-2" style="background-color: #f15457">
    <img src="https://ladybug.dev/static/logo-white-fe624874875ee4d9e63a755f542be760.svg" alt="Ladybug Podcast podcast" title="Ladybug Podcast podcast" width=200>
</div>

<p><strong>Twitter</strong> <a href="https://twitter.com/LadybugPodcast">Ladybug Podcast</a></p>

<p><strong>Hosted by</strong> <a href="https://twitter.com/kvlly">Kelly Vaughn</a>, <a href="https://twitter.com/emmabostian">Emma Bostian</a>, and <a href="https://twitter.com/ASpittel">Ali Spittel</a></p>

<p><strong>Length</strong> ~40m-1h+</p>

<p><strong>What is it about?</strong> A podcast by lady developers with topics ranging from personal development to technical discussions and design, to soft skills and beginner-friendly advice.</p>

<h3><a href="https://www.happydev.fm/">Happy Dev</a></h3>

<p><img src="https://images.transistor.fm/file/transistor/images/logos/site/2128/medium_happydev-transistor-logo.png" alt="Happy Dev podcast" title="Happy Dev podcast" width=200></p>

<p><strong>Twitter</strong> <a href="https://twitter.com/HappyDevFM">Happy Dev</a></p>

<p><strong>Hosted by</strong> <a href="https://twitter.com/jbrooksuk">James Brooks</a></p>

<p><strong>Length</strong> ~40m-1h</p>

<p><strong>What is it about?</strong> James is a core member of the Laravel team, and his show takes a different tack than other podcasts. Each episode is an interview with a prominent person from the Laravel community, discussing problems related to mental health that are well-known to affect developers.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/getting-started-with-cloudinary</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/getting-started-with-cloudinary" />
    <title>Getting Started with Cloudinary</title>
    <published>2020-05-03T00:00:00+00:00</published>
    <updated>2020-05-03T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Cloudinary is a cloud hosted, managed CDN (Content Delivery Network) that I&#039;ve been meaning to try for a long time but never got the chance, since I&#039;m always playing catch-up with all the projects that I&#039;m involved in.

The cool thing about Cloudinary is......</summary>
    <content type="html"><![CDATA[
        <p><a href="https://cloudinary.com/">Cloudinary</a> is a cloud hosted, managed CDN (Content Delivery Network) that I've been meaning to try for a long time but never got the chance, since I'm always playing catch-up with all the projects that I'm involved in.</p>

<p>The cool thing about Cloudinary is that you only need to upload one version of an image (or video), typically in the largest and best quality possible, and it will handle all the resizing and compression for you, on the fly. They also offer a very generous free tier that is perfect for smaller projects.</p>

<p>Recently I launched a one-page static site to promote a new app I'm working on, <a href="https://svgx.app/">SVGX.app</a>. The site is hosted on <a href="https://www.netlify.com/">Netlify</a> and so are the images.</p>

<p>Dealing with static images - manually - is pretty annoying to me. For the first iteration of this site I decided to save all images as JPGs to take advantage of the compression. I also made specific sizes to avoid loading full-size images.</p>

<p>The problem, however, is that my best attempts at doing this pale in comparison to what a specialized tool can do. Worse, Chrome's Lighthouse audits complained about the inefficient way I served images. Additionally, it's hard to maintain different sizes and formats of the same image.</p>

<p>So I decided to roll up my sleeves and move those images to Cloudinary in the hope that it will improve the performance of the site. I wasn't wrong.</p>

<p>My Lighthouse scores went up from this:</p>

<p><img src="/assets/img/2020-05-03-svgxapp-perf-before.png" alt="Lighthouse score, before, self-hosted" /></p>

<p>To this:</p>

<p><img src="/assets/img/2020-05-03-svgxapp-perf-after.png" alt="Lighthouse score, after, Cloudinary" /></p>

<p>To be clear, for the handful of images I'm working with, it made the most sense to upload and link them manually, and I didn't employ any of Cloudinary's automation tools or the API.</p>

<h2>Saving the original images</h2>

<p>When working with Cloudinary, it is a good practice to upload the original images at the best possible resolution, in a lossless format such as PNG. This means that on your local machine you only need to store the master copy in the highest quality available.</p>

<h2>Uploading to Cloudinary</h2>

<p>Once you've signed up for an account and logged in, you can go to <em>Media Library</em> and hit the big <em>Upload</em> button to select the images you want. You may also organize your images into sub-folders if you wish, though I opted out of that.</p>

<h2>Real-time transformations</h2>

<p>In Cloudinary there's a <em>Transformations</em> menu that I wasted time in, but it turns out I didn't need to create any specific transformations beforehand. Those are mostly for automation, which I didn't require since I did all the linking manually.</p>

<p>All I had to do was to get the link for an image (the üîó icon when you hover over an image), and then apply the transformation parameters directly to the URL in my code.</p>

<p>The basic URL for the main (and largest) image on <a href="https://svgx.app/">SVGX.app</a> is given by Cloudinary as:</p>

<pre><code class="language-html">https://res.cloudinary.com/svgxapp/image/upload/v1588298610/svgx-app_tnkpa3.png
</code></pre>

<p>This will get the image in its original format. In my code, however, I've applied a few transformations in order to serve a more efficient version:</p>

<pre><code class="language-html">https://res.cloudinary.com/svgxapp/image/upload/f_auto,q_auto:good,w_600/v1588298610/svgx-app_tnkpa3
</code></pre>

<p><img src="https://res.cloudinary.com/svgxapp/image/upload/f_auto,q_auto:good,w_600/v1588298610/svgx-app_tnkpa3" alt="600px wide" /></p>

<h2>The anatomy of a Cloudinary URL</h2>

<ul>
<li><code>svgxapp</code> refers to the account that the image belongs to. Officially this is called the "Cloudinary cloud name".</li>
<li><code>v1588298610</code> seems to be a "folder" identifier, i.e all the images in the same folder share the same identifier. However, there's also an actual <em>folder</em> hierarchy as well, for example this image <code>https://res.cloudinary.com/svgxapp/image/upload/v1588298149/samples/sample.jpg</code> resides in the <code>samples</code> folder.</li>
<li>Finally, there's the actual file name <code>svgx-app_tnkpa3.png</code>. Note that the original name of the image is <code>svgx-app.png</code>, but Cloudinary adds a random string at the end <code>_tnkpa3</code>.</li>
<li>The eagle-eyed might notice that my example containing the transformations is missing the file extension at the end: <code>svgx-app_tnkpa3</code>. The simple reason for that is the auto format that I will discuss in more detail below.</li>
</ul>

<h2>Explaining the transformations</h2>

<p>Transformations can be added after the <code>upload/</code> section of the URL. I've only used a tiny fraction of the available ones here, but you can read about them in more detail in the <a href="https://cloudinary.com/documentation/image_transformations">official docs</a>. For my needs, these are more than enough.</p>

<ul>
<li><code>f_auto</code> means "fetch format auto", and it allows me to leave out the file extension. This transformation tells Cloudinary to serve the most efficient image format supported by the client's browser. Ideally, this would be <code>.webp</code>. More details <a href="https://cloudinary.com/documentation/image_transformations#automatic_format_selection">here</a>.</li>
<li><code>q_auto:good</code> works with <code>f_auto</code> to an extent, although I haven't dived too deep into that. Suffice to say that these two transformations, in concert, will ensure the browser receives the absolute best quality of the image in an ideal format.</li>
<li><code>w_600</code> constrains the image to a maximum width of 600px while preserving proportions. For the image I linked above, this results in a 600px width and 450px height, starting from a 1600x1200 original.</li>
</ul>

<h2>How it works under the hood</h2>

<p>When an image is served with a new set of URL transformations, Cloudinary will generate a new version of the master image and apply those transformations to it. The new version will persist alongside the master. If you pay attention you'll notice that an image with a fresh URL transformation (that was never requested before) will take a second or so to load the first time, but going forward it will load practically instantly. Pretty neat!</p>

<h2>Examples</h2>

<p>First, check out the hero image for this article, as well as the thumbnail in the <a href="/blog">blog</a> index. The URLs that generate them are:</p>

<pre><code class="language-html">&lt;!-- hero --&gt;
https://res.cloudinary.com/svgxapp/image/upload/f_auto,q_auto:good,e_vectorize,w_848/sample
&lt;!-- thumbnail --&gt;
https://res.cloudinary.com/svgxapp/image/upload/f_auto,q_auto:good,e_vectorize,w_343/sample
</code></pre>

<p>Thumbnail - 100px wide:</p>

<pre><code class="language-html">https://res.cloudinary.com/svgxapp/image/upload/f_auto,q_auto:good,w_100/v1588298610/svgx-app_tnkpa3
</code></pre>

<p><img src="https://res.cloudinary.com/svgxapp/image/upload/f_auto,q_auto:good,w_100/v1588298610/svgx-app_tnkpa3" alt="60px wide" /></p>

<p>Thumbnail - 100px tall:</p>

<pre><code class="language-html">https://res.cloudinary.com/svgxapp/image/upload/f_auto,q_auto:good,h_100/v1588298610/svgx-app_tnkpa3
</code></pre>

<p><img src="https://res.cloudinary.com/svgxapp/image/upload/f_auto,q_auto:good,h_100/v1588298610/svgx-app_tnkpa3" alt="100px tall" /></p>

<p>Thumbnail - 250px wide with a sepia filter:</p>

<pre><code class="language-html">https://res.cloudinary.com/svgxapp/image/upload/f_auto,q_auto:good,w_250,e_sepia:80/v1588298610/svgx-app_tnkpa3
</code></pre>

<p><img src="https://res.cloudinary.com/svgxapp/image/upload/f_auto,q_auto:good,w_250,e_sepia:80/v1588298610/svgx-app_tnkpa3" alt="250px wide with a sepia filter" /></p>

<p>There are numerous ways you can manipulate images through the Cloudinary URL transformations that are outside the scope of this article, so I will end it here. The takeaway is that, depending on your use case, you might get a big performance boost should you decide to host your static images and videos with a service like Cloudinary. More importantly, it removes most of the friction in having to deal with multiple image sizes, resolutions and so on.</p>

<p>Full disclosure: Cloudinary did NOT sponsor this article.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/svelte-persist-state-to-localstorage</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/svelte-persist-state-to-localstorage" />
    <title>Svelte - Persist State to localStorage</title>
    <published>2020-04-19T00:00:00+00:00</published>
    <updated>2020-04-19T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Svelte has quickly become my favorite framework for building SPAs, even surpassing Vue.

Recently I&#039;ve been working on a new desktop app using Svelte and Electron.

Electron uses Chromium as the browser engine, which means modern APIs are fully......</summary>
    <content type="html"><![CDATA[
        <p><a href="https://svelte.dev/">Svelte</a> has quickly become my favorite framework for building SPAs, even surpassing <a href="/blog/tags/vue/">Vue</a>.</p>

<p>Recently I've been working on a new desktop app using Svelte and <a href="https://www.electronjs.org/">Electron</a>.</p>

<p>Electron uses Chromium as the browser engine, which means modern APIs are fully supported. In turn, this allows developers to build cross-platform apps with consistent and predictable behavior.</p>

<p>I made a <a href="https://github.com/breadthe/electron-forge-svelte">Svelte-Electron-TailwindCSS starter template</a> which should provide some insight into how a typical Svelte project is structured.</p>

<h2>The Svelte store</h2>

<p>Application state can be kept in a store that looks like this. Mine consists of a single file named <code>src/store.js</code>.</p>

<p>For this example, I'll store the state for the current theme (light/dark).</p>

<pre><code class="language-js">import { writable } from "svelte/store";

export const theme = writable('light');
</code></pre>

<p>The above translates to:</p>

<p>"Create a writeable (there are also read-only stores, not subject of this discussion) store called <code>theme</code>, and initialize it with a default value of <code>light</code>."</p>

<p>To use the store data, import the store in a component such as <code>App.svelte</code>:</p>

<pre><code class="language-html">&lt;script&gt;
    import {theme} from './store.js';
&lt;/script&gt;

&lt;h1&gt;Theme: {$theme}&lt;/h1&gt;

&lt;button on:click={() =&gt; theme.set('light')}&gt;
    light
&lt;/button&gt;
&lt;button on:click={() =&gt; theme.set('dark')}&gt;
    dark
&lt;/button&gt;
</code></pre>

<p>Initially, the app loads with a heading of "Theme: light". Additionally, there are two buttons that, when clicked, will change the stored <code>theme</code> to either "light" or "dark".</p>

<p>You'll access the value of the <code>theme</code> store using the <code>$</code> symbol. You can change the value with <code>.set(value)</code>.</p>

<p>Try out the example in the <a href="https://svelte.dev/repl/90a36296ae784d87adc820b64f10d33c?version=3.20.1">Svelte REPL</a></p>

<h2>Persisting to localStorage</h2>

<p>The above is cool, and it works well for cross-component communication, but refreshing the page will reset the state to the default 'light'.</p>

<p>For the app I'm building, I need to persist certain store values across refreshes and restarts. A simple solution is to save these variables to the underlying browser's <code>localStorage</code>.</p>

<p>Let's modify the store to retrieve the default value from <code>localStorage</code>.</p>

<pre><code class="language-js">import { writable } from "svelte/store";

const storedTheme = localStorage.getItem("theme");
export const theme = writable(storedTheme);
</code></pre>

<p>This alone won't work, because <code>storedTheme</code> will evaluate to <code>null</code> when there's nothing yet  in <code>localStorage</code> (for example when the app is first initialized).</p>

<p>Let's fix this by registering a subscriber:</p>

<pre><code class="language-js">import { writable } from "svelte/store";

const storedTheme = localStorage.getItem("theme");
export const theme = writable(storedTheme);
theme.subscribe(value =&gt; {
    localStorage.setItem("theme", value === 'dark' ? 'dark' : 'light');
});
</code></pre>

<p>It took me a while to wrap by brain around this but essentially it creates a watcher of sorts that updates the value of <code>layout</code> in the store, when it changes.</p>

<p>The cool thing is that it also saves the default value <code>light</code> to <code>localStorage</code> when it doesn't exist. You can test this by going into the browser's dev tools, deleting the key and refreshing the page. You'll notice that they key gets recreated and set to <code>light</code>.</p>

<p>Now when you call <code>theme.set('dark')</code> in your app, the subscriber will get triggered and set the value of <code>theme</code> to <code>dark</code> in <code>localStorage</code>.</p>

<p>From now on, refreshing the page, or closing and opening it will persist whatever value got saved last.</p>

<h2>A side-note on <code>localStorage</code> and security</h2>

<p>The <a href="https://svelte.dev/repl/329d9ab4b27543afaf735acfbc6bbec7?version=3.20.1">complete example</a> does not work in the Svelte REPL unfortunately, due to security issues related to <code>localStorage</code>.</p>

<p>The problem with <code>localStorage</code> is that it relies on the <em>client's browser</em> to handle values used by the web app. You can imagine how this could cause issues if the developer uses those values without validation or other measures to ensure the integrity of the data. So, for example, if the front-end passes some values from <code>localStorage</code> to the back-end for processing and storing to a database, that data needs to be sanitized and validated properly, and definitely <em>not trusted implicitly</em>.</p>

<p>Then again, these problems <em>should not</em> be relevant, as long as the app runs strictly on the client side. For this example, <code>theme</code> is used only for presentation purposes. Even if the client decides to "hack" the value of localStorage, what this will accomplish at most is to scramble the UI colors a bit.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/install-windows-10-vm-on-mac</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/install-windows-10-vm-on-mac" />
    <title>How to Install a Windows 10 VM on a Mac</title>
    <published>2020-04-12T00:00:00+00:00</published>
    <updated>2020-04-12T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">When building desktop or mobile cross-platform apps it is very important to test across devices. However, operating separate hardware for each platform can be daunting or cost-prohibitive. Virtual machines to the rescue!

In this guide I&#039;ll explain how......</summary>
    <content type="html"><![CDATA[
        <p>When building desktop or mobile cross-platform apps it is very important to test across devices. However, operating separate hardware for each platform can be daunting or cost-prohibitive. Virtual machines to the rescue!</p>

<p>In this guide I'll explain how Mac developers can install a Windows 10 Virtual Machine on their Apple computer, using <strong>VirtualBox</strong>.</p>

<p>A VM for a different platform than you are building on can be invaluable in testing:</p>

<ul>
<li>websites or web apps in Internet Explorer 11 or Microsoft Edge</li>
<li>desktop software such as Electron apps</li>
<li>file system differences (paths, directory structure, etc)</li>
<li>device drivers</li>
<li>and many more</li>
</ul>

<h2>Prerequisites</h2>

<p>Microsoft is kindly provinding a free Windows 10 virtual machine that you can <a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/">download here</a> and use for 90 days. Do so, after picking your VM platform of choice.</p>

<p>Since my Mac environment is setup mainly for Laravel development, and since I prefer Vagrant instead of Valet, that means I have both Vagrant and VirtualBox already installed.</p>

<p>My personal preference for the Windows 10 VM is to use <strong>VirtualBox</strong>, since I am partial to the GUI.</p>

<p><a href="https://www.virtualbox.org/">Download VirtualBox</a></p>

<p><a href="https://www.vagrantup.com/">Download Vagrant</a></p>

<p><strong>Make sure you have ~ 30 GB of space on your computer initially</strong> The VM comes in a ZIP file that is pretty substantial at > 7 GB and you'll have to unzip it as well. When you import the VM into VirtualBox, another ~14 GB will be created. You may delete the original download after importing, however.</p>

<h2>Install the VM</h2>

<p>For VirtualBox, you will have downloaded a file called <code>MSEdge.Win10.VirtualBox.zip</code>.</p>

<p>After the download completes, extract the archive.</p>

<h2>Import the VM into VirtualBox</h2>

<p>Go to the folder that was just extracted (it should be called <code>MSEdge - Win10</code>). If VirtualBox is already installed, you can double-click the <code>MSEdge - Win10.ovf</code> file to import it into VirtualBox. A settings window will appear. Accept the defaults and hit <em>Import</em>.</p>

<p><img src="/assets/img/2020-04-12-import-windows-10-vm-virtualbox.jpg" alt="VirtualBox VM appliance settings" /></p>

<p>‚è± wait a few minutes for the import to finish. You should see something like the following.</p>

<p><img src="/assets/img/2020-04-12-windows-10-vm-virtualbox-start.jpg" alt="New Windows 10 VM" /></p>

<p>Select the Win10 VM and click <em>Start</em>.</p>

<p>There will be a security prompt asking you go give VirtualBox access to your keyboard. Go to <em>System Preferences</em> > <em>Security &amp; Privacy</em> > <em>Privacy</em> > <em>Input Monitoring</em> and check VirtualBox after unlocking the settings with your root password. This will require VirtualBox to restart, so if the VM has already booted, shut it down, then open VirtualBox and start the VM once again.</p>

<p>If everything worked correctly, you should see the following screen.</p>

<p><img src="/assets/img/2020-04-12-windows-10-vm-login.jpg" alt="Windows 10 VM login" /></p>

<h2>Login</h2>

<p>User: <strong>IEUser</strong><br />
Password: <strong>Passw0rd!</strong></p>

<p>Boom, you're in!</p>

<p><img src="/assets/img/2020-04-12-windows-10-vm-initial-state.jpg" alt="Windows 10 VM initial state" /></p>

<h2>Take a snapshot of the VM</h2>

<p>Before starting any actual work, it's <strong>a very good idea to take a snapshot of the initial state</strong>. Why? Because this will allow you to use the VM even after the original 90 days have expired. Once it stops working you can restore it to this point and use it for another 90 days. Don't worry, this is not illegal, even Microsoft suggests this on the page you've just downloaded the VM from.</p>

<p>To take the snapshot, once the VM has booted and with the VM window active, in the <em>VirtualBox VM</em> application menu, select <em>Machine</em> > <em>Take Snapshot...</em> then give it a name and optional description when prompted, and click OK.</p>

<h2>Restoring a snapshot</h2>

<p>With the VM powered off, click the menu next to the name of the VM.</p>

<p>Then select the snapshot you wish to restore and click Start (for the latest), or Restore (for older snapshots).</p>

<p><strong>Restore the latest (current) state of the VM</strong></p>

<p><img src="/assets/img/2020-04-12-windows-10-vm-start-latest.jpg" alt="Windows 10 VM login" /></p>

<p><strong>Restore a previous snapshot</strong></p>

<p><img src="/assets/img/2020-04-12-windows-10-vm-restore-snapshot.jpg" alt="Windows 10 VM login" /></p>

<h2>Snapshot backups</h2>

<p>You can back up the snapshots individually if you wish. The files are located in <code>/Users/YourUser/VirtualBox VMs/MSEdge - Win10/Snapshots</code>.</p>

<p>Keep in mind that snapshots require additional storage space, and that can be a pretty steep price to pay. In my case, 3 snapshots take 26.7 GB. Ouch!</p>

<p><img src="/assets/img/2020-04-12-windows-10-vm-snapshot-storage-space.jpg" alt="Windows 10 VM login" /></p>

<h2>Transferring files &amp; shared clipboard</h2>

<p>To transfer files back and forth between your computer and the VM, while the VM is running, in the VirtualBox application menu select <em>Devices</em> > <em>Drag and Drop</em> > <em>Bidirectional</em>.</p>

<p>Now you should be able to open a File Explorer window in the VM, then drag a file over from your Mac.</p>

<p>Similarly, you'll likely want to be able to copy/paste between your computer and the VM, so make sure to check  <em>Devices</em> > <em>Shared Clipboard</em> > <em>Bidirectional</em>.</p>

<h2>A note on keyboard shortcuts</h2>

<p>You'll find that some of the keyboard shortcuts you're used to on the Mac behave differently in the Windows VM. Here are a couple of the mappings I've discovered so far (as a general rule, use Control where you would use CMD):</p>

<ul>
<li>CMD+C/V/X ‚Üí Control+C/V/X</li>
<li>Delete ‚Üí Fn+Delete</li>
<li>CMD+Tab ‚Üí Control+Tab</li>
</ul>

<h2>Where to next?</h2>

<p>If you are using this VM for development, I would highly recommend setting up the environment to your exact specs, then <strong>taking another snapshot</strong>. Do this at the beginning, so that you can still take advantage of the full 90 day activation period.</p>

<p>Some of the tools I installed on my fresh installation, for example, include:</p>

<ul>
<li>Chrome &amp; Firefox</li>
<li><a href="https://gitforwindows.org/">Git Bash</a></li>
<li>create/configure Bash aliases</li>
<li><a href="https://nodejs.org/en/">generate an SSH key</a> and add the key to the Github (or equivalent) account</li>
<li><a href="https://nodejs.org/en/">Node</a></li>
<li>Yarn <a href="https://classic.yarnpkg.com/lang/en/">classic (V1)</a> or <a href="https://yarnpkg.com/">V2</a></li>
<li><a href="https://code.visualstudio.com/">Visual Studio Code</a></li>
</ul>

<p>I'll leave you with a screenshot of a new Svelte + Electron cross-platform app I'm working on, and how it looks on the Windows VM. Pretty nifty!</p>

<p><img src="/assets/img/2020-04-12-windows-10-vm-electron-app.jpg" alt="Windows 10 VM login" /></p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/build-svg-icon-component-laravel-7</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/build-svg-icon-component-laravel-7" />
    <title>Build an SVG Icon Component with Laravel 7</title>
    <published>2020-03-28T00:00:00+00:00</published>
    <updated>2020-03-28T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I don&#039;t know about you, but working with SVGs icons or images has always been a hassle. That&#039;s why I&#039;ve been iterating on easy ways to reuse SVG icons in my Laravel projects.

Today I&#039;m going to explain how to build a reusable SVG icon component using......</summary>
    <content type="html"><![CDATA[
        <p>I don't know about you, but working with SVGs icons or images has always been a hassle. That's why I've been iterating on easy ways to reuse SVG icons in my Laravel projects.</p>

<p>Today I'm going to explain how to build a reusable SVG icon component using Laravel 7's new <a href="https://laravel.com/docs/7.x/blade#components">Blade components</a>. For this, I'm going to use one of my favorite free SVG icon libraries, <a href="https://feathericons.com/">Feather</a>.</p>

<h2>The SVG icon</h2>

<p>First, let's take a look at the SVG markup behind a typical Feather icon, for example <code>chevron-left.svg</code>.</p>

<pre><code class="language-html">&lt;svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    class="feather feather-chevron-left"
&gt;
    &lt;polyline points="15 18 9 12 15 6"&gt;&lt;/polyline&gt;
&lt;/svg&gt;
</code></pre>

<p>So how should our reusable component be structured? One way would be to extract the  <code>svg</code> element as the actual component, along with sensible defaults that are already provided for us. The definition of the vector (everything that's wrapped by the <code>svg</code> tags) can live in its own Blade partial that can be slotted or included into the main component.</p>

<h2>Laravel 7's Blade components</h2>

<p>The documentation I linked above is pretty consistent but if you want something more visual, there's a <a href="https://laracasts.com/series/whats-new-in-laravel-7/episodes/1">free video on Laracasts</a> that explains these new features very nicely.</p>

<p>To start, Laravel 7 introduced a new command to scaffold a component.</p>

<pre><code class="language-bash">php artisan make:component Icon
</code></pre>

<p>This will generate 2 files: <code>app/View/Components/Icon.php</code> and <code>resources/views/components/icon.blade.php</code>, a class and the associated view respectively. You may use the <code>--inline</code> switch to make an inline component (meaning no view), but I'm not going to do that here.</p>

<p>I like to call the component class the "component controller" for what it's worth, because it does act like a controller, in a sense.</p>

<blockquote>
  <p>Note that I called my reusable component <code>Icon</code>. I could have just as well called it <code>Svg</code>, <code>Feather</code>, or any number of things. I kind of like the idea of naming it <code>Feather</code>, as a way to distinguish it from other, potential, SVG images or libraries. That way, I could keep a set of tight defaults very specific to each library or similar group of SVGs.</p>
</blockquote>

<h2>The component class</h2>

<p>The freshly-generated class looks like this:</p>

<pre><code class="language-php">namespace App\View\Components;

use Illuminate\View\Component;

class Icon extends Component
{
    public function __construct()
    {
        //
    }

    public function render()
    {
        return view('components.icon');
    }
}
</code></pre>

<p>Let's populate it with some defaults.</p>

<pre><code class="language-php">namespace App\View\Components;

use Illuminate\View\Component;

class Icon extends Component
{
    public $icon;
    public $width;
    public $height;
    public $viewBox;
    public $fill;
    public $strokeWidth;
    public $id;
    public $class;

    public function __construct(
        $icon = null,
        $width = 24,
        $height = 24,
        $viewBox = '24 24',
        $fill = 'currentColor', // currentColor, none
        $strokeWidth = 2,
        $id = null,
        $class = null
    )
    {
        $this-&gt;icon = $icon;
        $this-&gt;width = $width;
        $this-&gt;height = $height;
        $this-&gt;viewBox = $viewBox;
        $this-&gt;fill = $fill;
        $this-&gt;strokeWidth = $strokeWidth;
        $this-&gt;id = $id ?? '';
        $this-&gt;class = $class ?? '';
    }

    public function render()
    {
        return view('components.icon');
    }
}
</code></pre>

<p>All we're doing here is taking all the attributes from the <code>svg</code> element and injecting them into the constructor. We maintain the same defaults from the original SVG and save the attributes to <code>public</code> properties.</p>

<p>There is no need to pass any data to the view, since all the public properties defined in this class are available to it.</p>

<h2>The component view</h2>

<p>The new <code>icon.blade.php</code> view is very plain, containing only a div with a thoughtful quote.</p>

<pre><code class="language-html">&lt;div&gt;
    &lt;!-- Waste no more time arguing what a good man should be, be one. - Marcus Aurelius --&gt;
&lt;/div&gt;
</code></pre>

<p>Let's replace all of that with our <code>svg</code> wrapper.</p>

<pre><code class="language-html">&lt;svg
    xmlns="http://www.w3.org/2000/svg"
    width="{{ $width }}"
    height="{{ $height }}"
    viewBox="0 0 {{ $viewBox }}"
    fill="{{ $fill }}"
    stroke="currentColor"
    stroke-width="{{ $strokeWidth }}"
    stroke-linecap="round"
    stroke-linejoin="round"
    id="{{ $id }}"
    {{ $attributes-&gt;merge(['class' =&gt; "feather feather-$icon $class"]) }}
&gt;
    @includeIf("icons.$icon")
&lt;/svg&gt;
</code></pre>

<p>We are now referencing all those public properties that we assigned earlier in the class.</p>

<p>I chose to use an include rather than a slot, for convenience and to reduce duplication.</p>

<p>Two things are worth paying special attention to here.</p>

<p>First, there's <code>$attributes-&gt;merge(['class' =&gt; "feather feather-$icon $class"])</code>, which this tells Laravel to merge some default attribute values with new ones that may be passed by the user. In this case, the <code>svg</code> element will have a class of "feather feather-chevron-left" as default, but will also merge in additional classes provided by <code>$class</code>. This should become more apparent farther down, with actual examples.</p>

<p>Second, <code>@includeIf("icons.$icon")</code> is super-useful to prevent Laravel from blowing up if an invalid icon is requested and the include file can't be resolved.</p>

<h2>The vector definition</h2>

<p>The actual vector definitions for each icon live in tiny individual Blade templates. I keep mine in <code>resources/views/icons/</code>. Each file is named <code>feathericon-name.blade.php</code>. In our example, <code>chevron-left.blade.php</code> will contain:</p>

<pre><code class="language-html">&lt;path d="M7.05 9.293L6.343 10 12 15.657l1.414-1.414L9.172 10l4.242-4.243L12 4.343z"&gt;&lt;/path&gt;
</code></pre>

<p>When the icon component is rendered, this snippet will be wrapped by the <code>svg</code> stuff from earlier.</p>

<h2>The component tag</h2>

<p>Finally we get to the "how to use it" part. I really like what Laravel 7 has done here. They've adopted a Vue-like syntax for what has essentially become a dynamic pseudo-HTML tag. You invoke a component with <code>&lt;x-component-name /&gt;</code>, so <code>CoolIcon.php</code> + <code>cool-icon.blade.php</code> will correspond to a <code>&lt;x-cool-icon /&gt;</code> tag.</p>

<pre><code class="language-html">&lt;x-icon icon="chevron-left" width=32 height=32 viewBox="20 20" strokeWidth=0 /&gt;
</code></pre>

<p>Here, I'm overwriting some of the defaults: bigger icon, smaller viewBox, etc.</p>

<p>Had I decided to use a slot instead, here's how it might have looked (not as clean, methinks):</p>

<pre><code class="language-html">&lt;x-icon width=32 height=32 viewBox="20 20" strokeWidth=0&gt;
    @includeIf("icons.chevron-left")
&lt;/x-icon&gt;
</code></pre>

<p>One thing that I don't really like but I don't have a solution for, is the fact that the IDE (PHPStorm in my case) doesn't know what to make of this new tag. I can add it to its list of accepted tags to prevent it from marking it as "Unknown html tag" but I still can't click through to the component definition.</p>

<p>This makes the API (the available props) opaque. For someone less experienced with the project and/or Laravel 7, it might be a bit of a hassle to find out what's going on. Overall though, I think the benefits of this new pattern far outweigh the drawbacks.</p>

<h2>A few examples</h2>

<p>Here are just a few ways in which to use this component. For Feather Icons in particular, some icons have fill but no stroke, others have the opposite. Some icons look cleaner with varying stroke thicknesses, while others fit better if you tweak the viewBox independent of the size. All these SVG parameters are supported here, and of course you can add your own.</p>

<p>But what's even cooler is how seamlessly classes work. In these examples, I'm changing the appearance with TailwindCSS.</p>

<pre><code class="language-html">&lt;x-icon icon="chevron-left" width=32 height=32 strokeWidth=0 /&gt;

&lt;x-icon icon="external-link" width=32 height=32 fill="none" strokeWidth="2" class="text-blue-500" /&gt;

&lt;x-icon icon="x" width=32 height=32 class="bg-red-500 text-white p-2 rounded-full" /&gt;
</code></pre>

<p><img src="/assets/img/2020-03-28-component-examples.png" alt="Reusable SVG component examples" /></p>

<h2>Conclusion</h2>

<p>The hype around Laravel 7 was perfectly justified, as it has indeed brought a whole lot of cool features. The new components help propel the Blade templating engine to new heights, further strengthening an already rock-solid platform.</p>

<p>I always have some doubts whether a pattern is the best (hint: there's always something better), and this is no exception. While this new method of building reusable SVG components works well for me at this time, it is very possible that I will find a better way later. I will no doubt share that here if it happens but until then componentize away!.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/edit-in-place-component-livewire-alpinejs</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/edit-in-place-component-livewire-alpinejs" />
    <title>Build an edit in place component with Livewire &amp; Alpine.js</title>
    <published>2020-03-19T00:00:00+00:00</published>
    <updated>2020-03-19T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I recently implemented an &quot;edit in place&quot; feature on my SaaS 1Secret, following the addition of labels for secrets. In 1Secret, you can see all the ongoing secrets on the dashboard, and they are identified by the unique short URL. This, however, is......</summary>
    <content type="html"><![CDATA[
        <p>I recently implemented an "edit in place" feature on my SaaS <a href="https://1secret.app/">1Secret</a>, following the addition of labels for secrets. In 1Secret, you can see all the ongoing secrets on the dashboard, and they are identified by the unique short URL. This, however, is tedious to remember. While it is a minor feature, the addition of optional labels - to more clearly identify the contents of secret without opening it - was something that had been bothering me for a while.</p>

<p>A label is a short text description, and it can be initially created with the secret. I also wanted the ability to edit it later, directly from the dashboard. Hence the idea of "in place or inline editing".</p>

<p>What follows is a complete guide on how I built this feature using <a href="https://laravel-livewire.com/">Livewire</a> and <a href="https://github.com/alpinejs/alpine/">AlpineJS</a>, a deadly combo on top of Laravel, that makes a lot of SPA-like behavior possible without writing complex JavaScript. Livewire brings the back-end reactivity while Alpine handles the UI interactions. So if you're a fan of PHP and Laravel in particular, give this a üëÄ.</p>

<p><strong>TLDR</strong> Don't feel like reading through the entire thing? No problem, here's the <a href="https://github.com/breadthe/laravel-livewire-demo">repo</a> so you can dive right in.</p>

<blockquote>
  <p><strong>Update</strong> Additional tinkering revealed some quirks with nested Livewire components in combination with AlpineJS. Instead of rewriting the entire guide (for the 3rd time), I'll show you my solution at the end. The repo has already been updated to reflect the changes.<br />
  <a href="#update-2020-03-21">Jump to the update ‚Üí</a></p>
</blockquote>

<h2>Installation</h2>

<blockquote>
  <p>You'll find the code for this demo <a href="https://github.com/breadthe/laravel-livewire-demo">here</a>. Currently it contains an additional Livewire component that handles real-time tag &amp; text search filtering.</p>
</blockquote>

<p>In your Laravel project (preferably Laravel 7.x), you'll need to install Livewire and AlpineJS.</p>

<h3>Livewire</h3>

<p>Follow the official <a href="https://laravel-livewire.com/docs/installation">installation instructions</a>. I skipped the config &amp; vendor assets publishing part and did only the bare minimum:</p>

<pre><code class="language-bash">composer require livewire/livewire
</code></pre>

<p>In <code>resources/views/layouts/app.blade.php</code> import the Livewire assets (css + js):</p>

<pre><code class="language-html">    ...
    &lt;!-- Laravel &lt;= 7 --&gt;
    @livewireStyles

    &lt;!-- optional for Laravel &gt;= 7 --&gt;
    &lt;livewire:styles/&gt;
&lt;/head&gt;
...
    &lt;!-- Laravel &lt;= 7 --&gt;
    @livewireScripts

    &lt;!-- optional for Laravel &gt;= 7 --&gt;
    &lt;livewire:scripts/&gt;
&lt;/body&gt;
</code></pre>

<p>Notice the 2 ways of importing the assets, depending on your Laravel version. The first method works in all versions.</p>

<h3>AlpineJS</h3>

<p>AlpineJS can be loaded from the CDN, which works just fine for me. Add it to <code>app.blade.php</code> right above <code>@livewireScripts</code>:</p>

<pre><code class="language-html">...
    &lt;script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.1.2/dist/alpine.js" defer&gt;&lt;/script&gt;

    @livewireScripts
&lt;/body&gt;
</code></pre>

<h2>Finding a use-case for editing in place</h2>

<p>Luckily the <a href="https://github.com/breadthe/laravel-livewire-demo">demo project</a> I created is already setup with data that can be reused. We're talking a list of "widgets" (random sentences), to which I randomly assigned a variable number of tags. The tags are color names.</p>

<p>Not shown is a column belonging to <code>widgets</code> called <code>short_id</code>, which mimics the short URL on 1Secret. Its purpose here is simply presentational - I want to display it as a default when the widget name is empty. This is what I'm starting from:</p>

<p><img src="/assets/img/2020-03-19-starting-point.png" alt="Starting point" /></p>

<p>For this guide, I want to be able to edit the widget names in place. I won't be showing exactly what I did in 1Secret, to avoid exposing the internals, but the idea is similar.</p>

<h2>Specifications</h2>

<p>Let's whip up a few simple requirements for this feature.</p>

<p><strong>Data</strong></p>

<ul>
<li>Limit the length of the string to 100 characters without explicit validation</li>
<li>Trim whitespace</li>
<li>Empty values are saved as <code>NULL</code> in the database</li>
</ul>

<p><strong>UI</strong></p>

<ul>
<li>Click the widget name to edit it</li>
<li>ESC cancels editing and preserves the original value</li>
<li>ENTER saves it</li>
<li>Buttons that mirror the 2 functions above</li>
<li>You may save an empty widget, whereby the <code>short_id</code> will be displayed instead</li>
<li>Just to get a little fancy, let's make an actual widget name bold, while keeping the short_id placeholder normal</li>
</ul>

<h2>Locating the view</h2>

<p>The view we're aiming to enhance is <code>resources/views/livewire/widgets.blade.php</code>. The code that displays the widget name:</p>

<pre><code class="language-html">...
@foreach($widgets as $widget)
    &lt;div class="flex items-center justify-between p-2 -mx-2 hover:bg-gray-100"&gt;
        {{ $widget-&gt;name }}
...
</code></pre>

<p>The first task is to replace the static widget name with a Livewire component.</p>

<h2>Generating the Livewire component</h2>

<p>This guide requires a single Livewire component that can be generated at the command line (I use <code>a</code> as an alias for <code>php artisan</code>).</p>

<pre><code class="language-bash">php artisan livewire:make EditName
</code></pre>

<p><img src="/assets/img/2020-03-19-generate-livewire-component.png" alt="Generate a Livewire component" /></p>

<p>Two files will be generated: a view and a controller class.</p>

<p>The public properties in the controller are accessible from the view. Data flows back and forth as if by magic, no JS required. Of course, <em>there is</em> JS behind the scenes but the developer need not know about it. To achieve the desired interactivity, a little something extra is needed, and that's where AlpineJS comes in.</p>

<h2>Replacing the static part of the view with Livewire</h2>

<p>Back in  <code>resources/views/livewire/widgets.blade.php</code>, let's perform a simple swap with the newly created Livewire view component. Replace <code>{{ $widget-&gt;name }}</code> with a Livewire directive:</p>

<pre><code class="language-html">...
@foreach($widgets as $widget)
    &lt;div class="flex items-center justify-between p-2 -mx-2 hover:bg-gray-100"&gt;
        @livewire('edit-name', compact('widget'), key($widget-&gt;id))
...
</code></pre>

<p>Notice that the syntax is identical to Laravel's <code>@include</code> directive. In addition, I'm passing the <code>$widget</code> object to the Livewire component. For nested Livewire components (which is the case here, but may not be for you) it is strongly recommended to pass a unique value to <code>key()</code>, just like in Vue. This will help Livewire identify the child item when the parent is updated.</p>

<p>In the newly created Livewire view:</p>

<pre><code class="language-html">&lt;div class="p-2"&gt;
    {{ $origName }}
&lt;/div&gt;
</code></pre>

<p><strong>CAUTION</strong> The Blade view must have <strong>one, and only one</strong> root element, in this case the <code>div</code>. If you omit it and just use <code>{{ $origName }}</code>, you'll get a <code>ErrorException Undefined offset: 1</code> error, then spend half an hour like a doofus trying to figure out what you did wrong.</p>

<p>Before this can work, there's additional work to be done in <code>EditName</code>, so let's open it up and add the following:</p>

<pre><code class="language-php">class EditName extends Component
{
    public $origName; // initial widget name state

    public function mount(Widget $widget)
    {
        $this-&gt;origName = $widget-&gt;name;
    }

    public function render()
    {
        return view('livewire.edit-name');
    }
}
</code></pre>

<p><code>mount</code> essentially acts like <code>__construct</code> and we can use it to initialize certain properties, such as the widget that I passed from the view. Here, <code>$origName</code> will automatically become available to the view - just remember that it must be declared public.</p>

<p><strong>CAUTION</strong> Though you may be tempted to do this...</p>

<pre><code class="language-php">public $widget;

public function mount(Widget $widget)
{
    $this-&gt;widget = $widget;
}
</code></pre>

<p>... don't. Any public property will be exposed to the front-end via JavaScript, so if your widget object contains sensitive info (not the case here), you'll want to extract only the properties you actually need.</p>

<p>Now if we reload the page, everything should have been "rewired" but still look the same.</p>

<h2>UI interactions - make each widget name editable</h2>

<p>So I want the widget name to change into a text input when I click it. I suspect this might be doable with pure Livewire, but the additional server requests aren't justified especially since we're not passing data, but merely toggling the UI. That's where AlpineJS comes in. We've already installed it earlier so we're good to go.</p>

<p>First I'll show you the complete code for the UI interactions, then I'll explain it.</p>

<p>resources/views/livewire/<strong>edit-name.blade.php</strong></p>

<pre><code class="language-html">&lt;div
    x-data="
        {
             isEditing: false,
             isName: '{{ $isName }}',
             focus: function() {
                const textInput = this.$refs.textInput;
                textInput.focus();
                textInput.select();
             }
        }
    "
    x-cloak
&gt;
    &lt;div
        class="p-2"
        x-show=!isEditing
    &gt;
        &lt;span
            x-bind:class="{ 'font-bold': isName }"
            x-on:click="isEditing = true; $nextTick(() =&gt; focus())"
        &gt;{{ $origName }}&lt;/span&gt;
    &lt;/div&gt;
    &lt;div x-show=isEditing class="flex flex-col"&gt;
        &lt;form class="flex" wire:submit.prevent="save"&gt;
            &lt;input
                type="text"
                class="px-2 border border-gray-400 text-lg shadow-inner"
                placeholder="100 characters max."
                x-ref="textInput"
                wire:model.lazy="newName"
                x-on:keydown.enter="isEditing = false"
                x-on:keydown.escape="isEditing = false"
            &gt;
            &lt;button type="button" class="px-1 ml-2 text-3xl" title="Cancel" x-on:click="isEditing = false"&gt;êÑÇ&lt;/button&gt;
            &lt;button
                type="submit"
                class="px-1 ml-1 text-3xl font-bold text-green-600"
                title="Save"
                x-on:click="isEditing = false"
            &gt;‚úì&lt;/button&gt;
        &lt;/form&gt;
        &lt;small class="text-xs"&gt;Enter to save, Esc to cancel&lt;/small&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p><img src="/assets/img/2020-03-19-ui-interactions-alpinejs.gif" alt="UI interactions with AlpineJS" /></p>

<p>Cool! Now that we have the UI interaction basics in place, some explanations are in order. Essentially there are two divs inside the root element, each holding a span and a form with an input field, respectively.</p>

<p>Right at the top, in the wrapper div, there's a <code>x-data</code> Alpine directive (should look very familiar to Vue devs) that holds the state of the component as an object.</p>

<ul>
<li><code>isEditing: false,</code> toggles the visibility of the span/input; it's what gives the illusion that we are editing the item inline</li>
<li><code>isName: '{{ $isName }}',</code> is calculated on the back-end and controls the font weight of the item (bold for actual widgets)</li>
<li><code>focus</code> is a function that is used to place the cursor inside the text input and select the contents</li>
</ul>

<p>Below, <code>x-cloak</code> is used to prevent the browser from flashing hidden content before styling is applied.</p>

<p>Moving on to the <code>span</code> element, it is nested inside a parent <code>div</code> whose visibility is... well... visible.</p>

<ul>
<li><code>x-bind:class="{ 'font-bold': isName }"</code> will apply the <code>font-bold</code> class if <code>isName</code> is true. This isn't functional yet, it needs the logic from the back-end.</li>
<li><code>x-on:click="isEditing = true; $nextTick(() =&gt; focus())"</code> performs two functions: first it hides the span while revealing the text input, second it calls the function that places the cursor in the input and selects the contents.</li>
<li><strong>ATTENTION</strong> In this particular situation, <code>$nextTick</code> is a savior. Without it, Alpine will try to invoke <code>focus()</code> at the same time that it toggles visibility, but the DOM has not yet finished updating, so the input will not be focused after it becomes visible. With <code>$nextTick</code> we are performing the two actions in a synchronous fashion, allowing the input to be rendered before interacting with it.</li>
</ul>

<p>The <code>form</code> element containing the text input and the two buttons is inside a parent <code>div</code> that is hidden by default. If we hadn't used <code>x-cloak</code>, the form and its contents would briefly flash when the page is first loaded (or hard-reloaded).</p>

<ul>
<li>the form intercepts a <code>submit</code> event using a Livewire directive this time, <code>wire:submit.prevent="save"</code>. In English: "prevent the form from being submitted the usual way, instead call the <code>save()</code> method on the back-end"</li>
<li><code>x-ref="textInput"</code> provides a reference to the text input, that we can use in the <code>focus()</code> function to focus inside it</li>
<li><code>wire:model.lazy="newName"</code> is the second Livewire directive and its purpose is to bind the contents of the text input to the <code>$newName</code> variable. This variable is not yet defined on the back-end, which is why the input is not pre-filled with the widget name. The <code>lazy</code> modifier ensures that only 1 request is made to the back-end, when the input loses focus, instead of every keypress.</li>
<li><code>x-on:keydown.enter</code> and <code>x-on:keydown.escape</code> both perform the same action, namely to exit "edit mode"</li>
<li>the two buttons have an <code>x-on:click</code> directive that also exits "edit mode"</li>
</ul>

<p>Attempting to save the new value will error out, of course, since the back-end isn't wired properly yet. Let's go and do that.</p>

<h2>On to the back-end</h2>

<p>Once again, I'll dump the code in the Livewire controller class, then I'll explain it.</p>

<p>app/Http/Livewire/<strong>EditName.php</strong></p>

<pre><code class="language-php">class EditName extends Component
{
    public $widgetId;
    public $shortId;
    public $origName; // initial widget name state
    public $newName; // dirty widget name state
    public $isName; // determines whether to display it in bold text

    public function mount(Widget $widget)
    {
        $this-&gt;widgetId = $widget-&gt;id;
        $this-&gt;shortId = $widget-&gt;short_id;
        $this-&gt;origName = $widget-&gt;name;

        $this-&gt;init($widget); // initialize the component state
    }

    public function render()
    {
        return view('livewire.edit-name');
    }

    public function save()
    {
        $widget = Widget::findOrFail($this-&gt;widgetId);
        $newName = (string)Str::of($this-&gt;newName)-&gt;trim()-&gt;substr(0, 100); // trim whitespace &amp; more than 100 characters
        $newName = $newName === $this-&gt;shortId ? null : $newName; // don't save it as widget name it if it's identical to the short_id

        $widget-&gt;name = $newName ?? null;
        $widget-&gt;save();

        $this-&gt;init($widget); // re-initialize the component state with fresh data after saving
    }

    private function init(Widget $widget)
    {
        $this-&gt;origName = $widget-&gt;name ?: $this-&gt;shortId;
        $this-&gt;newName = $this-&gt;origName;
        $this-&gt;isName = $widget-&gt;name ?? false;
    }
}
</code></pre>

<p>The <code>mount()</code> method has grown quite a bit in size.</p>

<p>Now in addition to the widget name (<code>origName</code>), I'm saving the widget id (so I can locate the record when I update it), the short id (will be used as a placeholder when the widget name is empty), a dirty state (<code>newName</code>) that is used to bind the text input to, and a flag that toggles the font weight of the item.</p>

<p>An <code>init()</code> method take care of setting the initial state whenever 1) the component is initiated, and 2) an item is saved/updated.</p>

<p>Finally the <code>save()</code> method (which needs to be public) is the same we called earlier in the template with <code>wire:submit.prevent="save"</code>.</p>

<h2>Putting it all together</h2>

<p>At this point both the view and the controller should be wired up correctly. Let's fire it up.</p>

<p>Notice that the dirty state represented by <code>$newName</code> will persist in the text input, should you cancel halfway through editing. This is a design choice I made, though it could have just as well cleared the input or reset it to the original value.</p>

<p><img src="/assets/img/2020-03-19-putting-it-all-together.gif" alt="Putting it all together" /></p>

<p>There you go, awesome inline editing capabilities with a minimum of JavaScript. If this isn't a new golden age for the monolith, I don't know what is!</p>

<p>The <a href="https://github.com/breadthe/laravel-livewire-demo">code for the demo</a> should you wish to peruse it.</p>

<p><a name="update-2020-03-21"></a></p>

<h2>Update - Fixing the nested component functionality</h2>

<p>The purpose of the original guide was to show how inline editing can be done with Livewire and Alpine. Mission accomplished, <em>however</em>, I built this functionality on top of an existing project, nesting the edit-in-place component inside the previous Livewire component. So the (now) parent component deals with filtering items (or widgets as I call them) on the page through either text search or tag selection. At the same time, each widget's name can be edited in place.</p>

<p>Livewire has some rules and, dare I say, limitations around nested components. Here are some of these:</p>

<ul>
<li>The child component must have a single root element.</li>
<li>(undocumented) That root element must be a <code>div</code>.</li>
<li>If the child component is part of a loop, it must have a <code>key</code> prop with a unique value, otherwise Livewire will get confused when it tries to update the DOM (e.g. filtering items). An example of a unique value would be the current items's id.</li>
<li>(undocumented) If the child is inside a loop (typically <code>@foreach</code>), it should be the first line in the loop, i.e. it cannot be nested inside, say, another div.</li>
<li>The root <code>div</code> in the child component must not have Alpine directives assigned to it. In other words, if you want put <code>x-data</code> on the root div, you'll have to nest another div inside it, and initiate Alpine inside <em>that one</em>. While this rule is illustrated in the code samples from the <a href="https://laravel-livewire.com/docs/alpine-js">official documentation</a> it is not explicitly mentioned. A fellow dev pointed it out on Github before I noticed it.</li>
</ul>

<p>I ran into some of these limitations while experimenting on how to fix the issues that started appearing after my original implementation.</p>

<p>Essentially what happened was that initial filtering (whether through text or tags) of widgets succeeded, meaning that the list of items was reduced properly. Removing the filter by deleting the text in the search box or deselecting the tags, however, produced garbled content, e.g. items not being actually restored to the correct state, or items being restored with the wrong tags. In addition, errors were thrown in the browser dev console and the JS functionality broke at this point, requiring a page reload before functionality could be restored.</p>

<p>So here's what I did to fix this. First, in the parent component <code>resources/views/livewire/widgets.blade.php</code>.</p>

<p><strong>Before</strong></p>

<p>Inside the <code>@foreach</code> is a div which contains, in order: the edit-in-place Livewire child component, and the list of tags for the current widget in the loop. This wrapper div is part of the problem, as it relates to the rules above.</p>

<pre><code class="language-html">...
@foreach($widgets as $widget)
    &lt;div class="flex items-center justify-between p-2 -mx-2 hover:bg-gray-100"&gt;
        @livewire('edit-name', compact('widget'), key($widget-&gt;id))

        @if($tags = $widget-&gt;tags)
            &lt;div class="-mx-1 text-right"&gt;
                @foreach($tags as $tag)
                    &lt;small class="mx-1 {{ in_array($tag-&gt;id, $filters) ? 'bg-blue-200 text-blue-900' : 'bg-gray-200 text-gray-900' }} rounded-full px-2 shadow"&gt;
                        {{ $tag-&gt;name }}
                    &lt;/small&gt;
                @endforeach
            &lt;/div&gt;
        @endif
    &lt;/div&gt;
@endforeach
</code></pre>

<p><strong>After</strong></p>

<p>Now the Livewire child component becomes the first element in the loop. This takes care of one problem.</p>

<p>If you're wondering why this works now, I'm pretty certain it relates to the <code>key</code> part I mentioned earlier. Previously, the wrapper div had no unique identifier assigned to it. This confused Livewire when the filters were removed, but now the first element in the loop is identified by <code>key($widget-&gt;id)</code>, so items can be redrawn properly.</p>

<pre><code class="language-html">...
@foreach($widgets as $widget)
    @livewire('edit-name', compact('widget'), key($widget-&gt;id))

    @if($tags = $widget-&gt;tags)
        &lt;div class="mb-4 -mt-1 -mx-2"&gt;
            @foreach($tags as $tag)
                &lt;small class="mx-1 {{ in_array($tag-&gt;id, $filters) ? 'bg-blue-200 text-blue-900' : 'bg-gray-200 text-gray-900' }} rounded-full px-2 shadow"&gt;
                    {{ $tag-&gt;name }}
                &lt;/small&gt;
            @endforeach
        &lt;/div&gt;
    @endif
@endforeach
</code></pre>

<p>Moving on to the child component, where the inline editing is handled, <code>resources/views/livewire/edit-name.blade.php</code>.</p>

<p><strong>Before</strong></p>

<p>Alpine directives are on the root div. Now I know that this is not OK.</p>

<pre><code class="language-html">&lt;div
    x-data="
        {
             isEditing: false,
             isName: '{{ $isName }}',
             focus: function() {
                const textInput = this.$refs.textInput;
                textInput.focus();
                textInput.select();
             }
        }
    "
    x-cloak
&gt;
    &lt;!-- the rest of the code --&gt;
&lt;/div&gt;
</code></pre>

<p><strong>After</strong></p>

<p>Instead, I've added a wrapper div with some of the styling pulled from the parent component (after removing the div that previously wrapped the child). Now the desired functionality has been restored.</p>

<pre><code class="language-html">&lt;div class="flex items-center justify-between -mx-2 hover:bg-gray-100"&gt;
    &lt;div
        class="p-2"
        x-show=!isEditing
        class="flex items-center justify-between w-full"
        x-data="
            {
                 isEditing: false,
                 isName: '{{ $isName }}',
                 focus: function() {
                    const textInput = this.$refs.textInput;
                    textInput.focus();
                    textInput.select();
                 }
            }
        "
        x-cloak
    &gt;
        &lt;!-- the rest of the code --&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p><strong>But...</strong></p>

<p>There still remains a minor annoyance that I'm momentarily at a loss for how to fix. Take a look:</p>

<p><img src="/assets/img/2020-03-21-livewire-nested-components-fix.png" alt="After fixing nested Livewire components" /></p>

<p>This newly-discovered paradigm forced me to change the layout a little. While previously the widget name and tag list were displayed inline (name on the left, tags on the right), now the tags are below. Why? Because of what goes on in the loop:</p>

<p><strong>Before</strong></p>

<pre><code class="language-html">...
@foreach($widgets as $widget)
    &lt;div class="flex items-center justify-between"&gt;
        &lt;div&gt;
            &lt;!-- Widget name --&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;!-- Widget tags --&gt;
        &lt;/div&gt;
    &lt;/div&gt;
@endforeach
</code></pre>

<p><strong>After</strong></p>

<pre><code class="language-html">...
@foreach($widgets as $widget)
    &lt;div&gt;
        &lt;!-- Widget name --&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;!-- Widget tags --&gt;
    &lt;/div&gt;
@endforeach
</code></pre>

<p>Now granted, I have also experimented with moving the tags inside the child component, while also passing through the <code>$filters</code> array from the parent. This worked, but now the filtered tags weren't highlighted anymore.</p>

<p>I suspect the broken highlighting micro-feature comes from the lack of reactivity between parent -> child, as <a href="https://laravel-livewire.com/docs/nesting-components">documented here</a>. To quote: "<em>Nested components CAN accept data parameters from their parents, HOWEVER they are not reactive like props from a Vue component.</em>".</p>

<p>And this makes a lot of sense, since I update the <code>$filters</code> array in the parent.</p>

<p>At the end of the day this little annoyance is something that I managed to work around, but at the same time I believe it was worth mentioning for posterity.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/automate-laravel-6-7-upgrade</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/automate-laravel-6-7-upgrade" />
    <title>Automate the Laravel 6 -&gt; 7 Upgrade with PHPStorm</title>
    <published>2020-03-15T00:00:00+00:00</published>
    <updated>2020-03-15T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Apologies in advance for the slightly click-baity title, but bear with me and this method might prove useful to you. At any rate, I&#039;m documenting it for my own use.

The official 6.0 -&gt; 7.0 upgrade guide is good enough if you want the bare minimum, but......</summary>
    <content type="html"><![CDATA[
        <p>Apologies in advance for the slightly click-baity title, but bear with me and this method might prove useful to you. At any rate, I'm documenting it for my own use.</p>

<p>The official <a href="https://laravel.com/docs/7.x/upgrade">6.0 -> 7.0 upgrade guide</a> is good enough if you want the bare minimum, but for my own projects I chose to apply the <a href="https://github.com/laravel/laravel/compare/6.x...master">diffs from the official repo</a> instead.</p>

<p>Until the present, I've upgraded 3 of my projects to Laravel 7 and the upgrade times were decent, as summarized in this tweet:</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">üöÄ Manually upgraded 3Ô∏è‚É£ <a href="https://twitter.com/hashtag/laravel?src=hash&amp;ref_src=twsrc%5Etfw">#laravel</a> 6.0 projects ‚Üí 7.0 over 2 days.<br><br>Including deployment, it took:<br>1st - 54 min - some dependencies caused issues<br>2nd - 20 min<br>3rd - 10 min<br><br>1/3</p>&mdash; Placebo Domingo (@brbcoding) <a href="https://twitter.com/brbcoding/status/1236721526554189824?ref_src=twsrc%5Etfw">March 8, 2020</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Right away a pattern emerged: my projects weren't overly complex, and all upgrades followed basically the same path. The hero image at the top summarizes the list of framework files that need to be upgraded. When a 4th project became an upgrade candidate, it got me thinking that I should perhaps automate this to an extent.</p>

<p>PHPStorm has this neat feature that can create a patch from a commit. I've used this many times before, to lift certain diffs and then reapply them somewhere else. I thought, what if I could lift the diffs from one Laravel project, and apply them to another?</p>

<p><strong>Note</strong> You might be able to do the same with <code>git</code> at the command line if you're a Git wizard. I've done it in the past but while I mostly use the command line, for certain tasks I prefer an IDE. Sadly I didn't document the specific commands I used and due to not using them on a regular basis, they've kinda vacated my brain.</p>

<p>So here are the steps I followed to transplant the Laravel 7 upgrade from Project A (previously upgraded to Laravel 7) to Project B (Laravel 6).</p>

<ul>
<li>In PHPStorm go to <code>Version Control &gt; Log</code> for Project A, select the Laravel 7 upgrade commit (the entire framework upgrade is part of a single commit, in my case)</li>
<li>Right-click and choose <code>Create Patch</code></li>
<li>Save it to disk</li>
<li>Open Project B (the project to be upgraded) in PHPStorm</li>
<li>In the main menu, choose <code>VCS &gt; Apply Patch</code> and select the <code>.patch</code> file created previously</li>
<li>You'll be presented with the list of files from the commit</li>
<li>Unselect <code>composer.lock</code> from the file list</li>
<li>Unselect <code>routes/web.php</code>, then add <code>use Illuminate\Support\Facades\Route;</code> manually after. <strong>Note</strong> You may need to do this for other files in this list where you have custom changes, most notably <code>routes/api.php</code>.</li>
<li>Change <code>MAIL_DRIVER</code> -> <code>MAIL_MAILER</code> in <code>.env</code> manually after</li>
<li>Delete <code>composer.lock</code></li>
<li>Run <code>composer install</code></li>
</ul>

<p>At this point the Project B should have been successfully upgraded to Laravel 7.</p>

<p>While it doesn't follow the pure definition of "automation", this technique worked really well for me. Your mileage will obviously vary, and the more complex your project the less likely it will go as smoothly for you.</p>

<p>Here's the file structure in text form, should you need to copy/paste any of it, and happy upgrading!</p>

<pre><code class="language-bash">app/
    Exceptions/
        Handler.php
    Http/
        Middleware/
            VerifyCsrfToken.php
        Kernel.php
config/
    app.php
    cache.php
    cors.php
    filesystems.php
    mail.php
    queue.php
    session.php
resources/land/en/
    passwords.php
public/
    .htaccess
routes/
    api.php
    console.php
    web.php
.env.example
composer.json
composer.lock
phpunit.xml
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/custom-hero-image-jigsaw-blog-post</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/custom-hero-image-jigsaw-blog-post" />
    <title>How to Add an Unsplash or Custom Hero Image to a Jigsaw Article</title>
    <published>2020-03-10T00:00:00+00:00</published>
    <updated>2020-03-10T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">The fashion these days dictates that every developer blog post come with a hero image. While not entirely true, I started this pattern with the blog and I&#039;ll be damned if I end it.

The blog engine itself is Tighten&#039;s Jigsaw, a Laravel static site......</summary>
    <content type="html"><![CDATA[
        <p>The fashion these days dictates that every developer blog post come with a hero image. While not entirely true, I started this pattern with the blog and I'll be damned if I end it.</p>

<p>The blog engine itself is Tighten's <a href="https://jigsaw.tighten.co/">Jigsaw</a>, a Laravel static site builder that is perfect for my needs. Because it is Laravel/PHP based, the base template can be customized to a high extent, something that I have done here with some success.</p>

<p>Today I'll go into more detail about one customization in particular: the hero image featured at the top of every article.</p>

<h2>Image types</h2>

<p>Whether you've read my articles before or not, there are two types of hero images I typically use at the top of a blog post. There's the generic <a href="https://unsplash.com/">Unsplash</a> image that bears a resemblance to the subject matter, like this very article for example. Then there's the more technical image that I create myself, such as this article about having <a href="/blog/laravel-console-fun/">Fun at the Laravel Console</a>.</p>

<p>This boils down to either self-hosted or Unsplash images. The way each of these is generated differs slightly.</p>

<h2>The blog post metadata</h2>

<p><strong>Disclaimer</strong> I write all articles in Markdown and I'm not sure how (and if) this would work in other formats.</p>

<p>Each Jigsaw Markdown post (located in <code>{project}/source/_posts</code>) has a metadata section at the top, written in <a href="https://hexo.io/docs/front-matter.html">YAML front-matter</a>. This defines various article-specific parameters.</p>

<p>The current article, for example, would have the following as built-in defaults:</p>

<pre><code class="language-yaml">---
extends: _layouts.post
section: content
title: How to Add an Unsplash or Custom Hero Image to a Jigsaw Article
date: 2020-03-10
description: A guide for adding a custom hero image programatically to a Jigsaw blog post.
tags: [jigsaw, laravel]
featured: false
---
</code></pre>

<p>It's a very clean and simple format that is self-explanatory in what it accomplishes, so I won't go into further detail here, but you can read more on the <a href="https://jigsaw.tighten.co/docs/content-markdown/">official documentation page</a>.</p>

<p>The cool thing is that you can extend this metadata to the limits of your imagination. This is exactly what I did in order to automate displaying custom hero images at the top of each article. Let's find out how.</p>

<h2>Unsplash images</h2>

<p>For Unsplash images, such as the current article, I've added these extra parameters:</p>

<pre><code class="language-yaml">---
# defaults
image: https://source.unsplash.com/6yjAC0-OwkA/?fit=max&amp;w=1350
image_thumb: https://source.unsplash.com/6yjAC0-OwkA/?fit=max&amp;w=200&amp;q=75
image_author: Esteban Lopez
image_author_url: https://unsplash.com/@exxteban
image_unsplash: true
image_overlay_text:
---
</code></pre>

<p>The above will render the image along with the attribution right below it: <em>Photo by Esteban Lopez on Unsplash</em>. Both the site and the author are linked.</p>

<h2>Custom, self-hosted images</h2>

<p>My article on the <a href="/blog/laravel-console-fun/">Laravel Console</a> features a custom image that is self-hosted and saved in the <code>/assets/img/</code> project directory. This is how the metadata looks:</p>

<pre><code class="language-yaml"># defaults
image: /assets/img/2020-02-10-laravel-console-fun.png
image_thumb: /assets/img/2020-02-10-laravel-console-fun.png
image_author: 
image_author_url: 
image_unsplash: 
image_overlay_text:
</code></pre>

<blockquote>
  <p>You can omit the empty keys, of course. I choose to keep them around to remind myself they exist.</p>
</blockquote>

<h2>Modifying the post Blade template</h2>

<p>Simply adding the additional metadata won't magically cause the image to be rendered. The first thing to make that happen is to include a Blade partial at the top of the <code>source/_layouts/post.blade.php</code> file.</p>

<pre><code class="language-html">@include('_partials.post-hero-image')
</code></pre>

<p>Then in <code>source/_partials/post-hero-image.blade.php</code> I have the following:</p>

<pre><code class="language-html">@if($image = $page-&gt;image)
    &lt;section class="w-full flex flex-col items-center justify-center relative"&gt;
        @if($imageOverlayText = $page-&gt;image_overlay_text)
            &lt;div
                class="absolute font-black p-12 text-6xl rounded-full"
                style="
                    color: #ff0a5c;
                    background-color: #ffeb3b;
                    filter: invert(1);
                    mix-blend-mode: exclusion;
                    transform: rotate(-5deg);
                    box-shadow: 15px 15px #ff0a5c;
                    text-shadow: 5px 5px 1px #05e2ff;
                "
            &gt;
                {{ $imageOverlayText }}
            &lt;/div&gt;
        @endif

        &lt;img src="{{ $image }}" alt="{{ $page-&gt;imageAttribution() ?: $page-&gt;title }}"&gt;

        @if($imageAttribution = $page-&gt;imageAttribution(true))
            &lt;small class="block text-center text-xs"&gt;
                {!! $imageAttribution !!}
            &lt;/small&gt;
        @endif
    &lt;/section&gt;
@endif
</code></pre>

<p>This part <code>@if($imageOverlayText = $page-&gt;image_overlay_text)</code> is recent, and I'll circle back to it in a shortly.</p>

<p>Starting at the top, the entire block is wrapped in a check for the existence of an image source <code>@if($image = $page-&gt;image)</code>. For Unsplash images it's a absolute URL, while for local images it's a relative path.</p>

<p>Next, the image is displayed <code>&lt;img src="{{ $image }}" alt="{{ $page-&gt;imageAttribution() ?: $page-&gt;title }}"&gt;</code>. The <code>alt</code> text will be either the Unsplash author attribution, or the title of the page if the former is missing.</p>

<p>Finally, if there's an attribution (in other words an Unsplash image), I'll show the <code>Photo by X on Unsplash</code> snippet below the image:</p>

<pre><code class="language-html">@if($imageAttribution = $page-&gt;imageAttribution(true))
    &lt;small class="block text-center text-xs"&gt;
        {!! $imageAttribution !!}
    &lt;/small&gt;
@endif
</code></pre>

<p>The final piece of the puzzle is the custom <code>$page-&gt;imageAttribution()</code> method, which I will explain next.</p>

<h2>The image attribution method</h2>

<p>In Jigsaw, you can define your own global helper methods in <code>/config.php</code>, inside the main array. Here's what <code>imageAttribution()</code> looks like:</p>

<pre><code class="language-php">return [
    // ...

    'imageAttribution' =&gt; function ($page, $html = false) {
        $str = '';

        $image_author = $page-&gt;image_author;
        $image_author_url = $page-&gt;image_author_url;

        if ($image_author) {
            $str .=  "Photo by ";

            if ($html) {
                if ($image_author_url) {
                    $str .= '&lt;a href="' . $image_author_url . '" title="' . $image_author . '"&gt;' . $image_author . '&lt;/a&gt;';
                } else {
                    $str .=  "$image_author ($image_author_url)";
                }
            } else {
                $str .= "$image_author";
            }
        }

        if ($page-&gt;image_unsplash) {
            if ($html) {
                $str .= ' on &lt;a href="https://unsplash.com" title="Unsplash"&gt;Unsplash&lt;/a&gt;';
            } else {
                $str .= ' on Unsplash (https://unsplash.com)';
            }
        }

        return $str;
    },
];
</code></pre>

<p>I hope the above is self-documenting, but in a nutshell it's sole purpose is to render the <code>Photo by X on Unsplash</code> snippet, with the choice of plain text or HTML (pass the <code>true</code> argument). I use the HTML version for displaying below the image, while the plain text goes in the image <code>alt</code> text.</p>

<h2>Custom image overlay text</h2>

<p>My <a href="/blog/2020-tech-radar/">2020 Tech Radar</a> article features some funky text overlayed on top of an Unsplash image. This text is controlled by this post meta:</p>

<pre><code class="language-yaml">---
# ...
image_overlay_text: 2020 Tech Radar
---
</code></pre>

<p>Going back to <code>source/_partials/post-hero-image.blade.php</code>, the following block controls whether this text is displayed:</p>

<pre><code class="language-html">@if($imageOverlayText = $page-&gt;image_overlay_text)
    &lt;div
        class="absolute font-black p-12 text-6xl rounded-full"
        style="
            color: #ff0a5c;
            background-color: #ffeb3b;
            filter: invert(1);
            mix-blend-mode: exclusion;
            transform: rotate(-5deg);
            box-shadow: 15px 15px #ff0a5c;
            text-shadow: 5px 5px 1px #05e2ff;
        "
    &gt;
        {{ $imageOverlayText }}
    &lt;/div&gt;
@endif
</code></pre>

<p>There is an obvious issue with this approach: it is quite inflexible. I tweaked the text styling to work well with that particular image, but if I try to apply it to other images, it will likely look out of place.</p>

<p>I'm a fan of the <a href="https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)">Rule of three</a> refactoring principle, so if I reach the point where I'm doing this 2-3 more times (each would have to be individually tweaked), one solution I could reach for is to add another meta parameter that points to a CSS class. I'd then move the styling to one of my SCSS files and simply apply the corresponding class to the snippet above.</p>

<h2>Conclusion</h2>

<p>I ‚ù§Ô∏è how flexible Jigsaw is, and the extreme degree to which it can be customized. This is a relatively simple example of what can be done within this platform, but <a href="https://www.collinsdictionary.com/dictionary/english/the-world-is-your-oyster">the world is your oyster</a>, as they say.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/2020-tech-radar</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/2020-tech-radar" />
    <title>2020 Tech Radar</title>
    <published>2020-03-05T00:00:00+00:00</published>
    <updated>2020-03-05T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">The 2020 Tech Radar is a list of web (and related) technologies that have caught my eye, and that I&#039;m hoping to give more attention to this year.  I started this series with the 2019 Tech Radar and the only one I touched from that list is Svelte. All the......</summary>
    <content type="html"><![CDATA[
        <p>The 2020 Tech Radar is a list of web (and related) technologies that have caught my eye, and that I'm hoping to give more attention to this year.  I started this series with the <a href="/blog/2019-tech-radar/">2019 Tech Radar</a> and the only one I touched from that list is Svelte. All the others have dropped off, but many new ones have joined.</p>

<p>It's a more sustainable list this time, especially since I'm already using some of this tech in my projects.</p>

<p>Let's begin.</p>

<h2>Alpine.js</h2>

<p><a href="https://github.com/alpinejs/alpine">Alpine.js</a> came out of the left field in 2019 and I've been <a href="/blog/build-signup-form-with-alpinejs/">quick to adopt it</a>. I'm currently using it in several projects and I'll be using it in everything that needs interactions without the full power of Vue.</p>

<h2>Livewire</h2>

<p><a href="https://laravel-livewire.com/">Livewire</a> is the amazing Laravel front-end framework that brings a SPA-like feel to your monolith Laravel apps, and lets you write more PHP code and less JS. I've been circling the wagons around it but I feel like this year is when I will start integrating it into my projects, especially with v1.0 having been officially tagged recently.</p>

<p>I made a little demo for myself using Livewire, with the goal of finding out how it can be used to filter a list of items in real time. <a href="https://github.com/breadthe/laravel-livewire-demo">Here's the repo</a> if you're interested.</p>

<h2>Inertia</h2>

<p><a href="https://inertiajs.com/">Inertia</a> is the other side of the coin in terms of Laravel front-end frameworks. While Livewire focuses on "more PHP, less JS", Inertia is the opposite: "more JS, less PHP", and uses the back-end framework (like Laravel) as a sort of impromptu API, but then allows you to build the front-end as a SPA within the same codebase. A great concept, and something that I would have used heavily a couple years ago when I was more into the SPA camp.</p>

<p>I'm more in favor of the monolith these days, which makes Inertia less suited for my requirements, but if ever need more complex SPA-like behavior, I'll be sure to reach for it.</p>

<h2>Svelte</h2>

<p>I'm happy to say that I have finally started using <a href="https://svelte.dev/">Svelte</a> for a couple of small experiments. I love the simplicity of it and how little boilerplate it has, even compared to Vue (which was pretty simple already).</p>

<p>I am seriously considering replacing Vue with Svelte, but my main concerns are integrating it with Laravel and Electron, so we'll see how that goes.</p>

<p><a href="https://github.com/breadthe/svelte-todo">Building a Todo app</a> was stupid simple, so check out the repo if you're interested. The best part about the Todo demo is that I was able to integrate TailwindCSS with Rollup and SASS/SCSS. This will provide a very solid starter foundation for future mini projects.</p>

<p>Then of course there's <a href="https://sapper.svelte.dev/">Sapper</a>, the Svelte batteries-included framework. This brings it more in line with Vue and React but still compiles down to a smaller size, and is faster to render stuff.</p>

<p>The adoption rate for Svelte in the tech community may be puny compared to Vue/React but it's a fabulous piece of technology and I hope it carves itself a nice piece of the market. I, for one, will be using it more and more going forward.</p>

<h2>SVG</h2>

<p>Now that's pretty random isn't it? Why SVG? It's not exactly a branded technology. Well, lately I've become more interested in how SVG works and I'm starting to get it (barely). Tools such as <a href="https://www.blobmaker.app/">Blobmaker</a> and <a href="https://getwaves.io/">Waves</a> are fascinating, and I'd like to build a similar utility myself.</p>

<p>I actually started building an SVG tool with Svelte but I'm not sure yet what direction it will take, and there are other priorities on my long list. One thing's certain: I will continue to explore the idea of generating SVG images programatically.</p>

<h2>Electron</h2>

<p>Building an app with <a href="https://www.electronjs.org/">Electron</a> is not my first rodeo and hopefully won't be my last. The most complex app I made with Electron and Vue is a <a href="https://github.com/breadthe/folio">crypto portfolio</a>. More Electron apps are coming out each day and for good reason: it allows JavaScript developers to build cross-platform apps using their favorite framework.</p>

<p>I have several ideas for offline desktop apps that would benefit enormously from Electron. While I currently have more Vue experience, I am fairly certain my next Electron app will be made with Svelte.</p>

<h2>SwiftUI</h2>

<p>I mentioned my interest in <a href="https://developer.apple.com/xcode/swiftui/">SwiftUI</a> last year too, and I'm including it here because it still holds my attention. Realistically, I will probably not have time to dabble.</p>

<h2>Crystal</h2>

<p>Almost forgot this one but I've become tentatively interested in <a href="https://crystal-lang.org/">Crystal</a> after hearing about it on <a href="@noplanstomerge">No Plans To Merge</a>. Seems to be a great language for building command line applications. I wish I had a use-case for it at the moment but I don't, so I'll shelve it under "cool stuff that I may or may not use at some point".</p>

<h2>Conclusion</h2>

<p>If there's a pattern here, it's that I am fascinated by way more technologies than I can give proper attention to. The good news is that in 2020 I've already used about half of these already, and there's still probably room for more.</p>

<p>Web tech is in constant flux, which is both a blessing and a curse for us developers. Personally I see it as a good thing, especially when it keeps us on our toes and makes us come back for more.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/laravel-console-fun</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/laravel-console-fun" />
    <title>Fun at the Laravel Console</title>
    <published>2020-02-10T00:00:00+00:00</published>
    <updated>2020-02-10T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">When I spun up a new Livewire component with &lt;code&gt;artisan&lt;/code&gt; (Laravel&#039;s CLI tool) recently, I was intrigued enough by the cute ASCII logo to take a look at the source code to see how it was made.



What interested me the most was not the logo......</summary>
    <content type="html"><![CDATA[
        <p>When I spun up a new <a href="https://laravel-livewire.com/">Livewire</a> component with <code>artisan</code> (Laravel's CLI tool) recently, I was intrigued enough by the cute ASCII logo to take a look at the <a href="https://github.com/livewire/livewire/blob/master/src/Commands/FileManipulationCommand.php">source code</a> to see how it was made.</p>

<p><img src="/assets/img/2020-02-10-livewire-console.png" alt="Livewire ASCII logo" title="Livewire ASCII logo" /></p>

<p>What interested me the most was not the logo itself, but rather the custom colors. I admit I haven't dug deep before into what makes these console commands tick. To my knowledge, Laravel doesn't offer custom colors out of the box.</p>

<h2>Enter Symfony's Console Formatter</h2>

<p>I already knew that Laravel's console uses <a href="https://symfony.com/doc/current/components/console/helpers/formatterhelper.html">Symfony's Console Output Formatter</a> package(s) under the hood, which in turn offer a variety of <a href="https://symfony.com/doc/current/console/coloring.html">colors and styles</a> that you can apply to your output.</p>

<h2>It's all downhill from here</h2>

<p>Armed with this knowledge, the <code>&lt;fg=cyan&gt;...&lt;/&gt;</code> tags in Livewire's code made perfect sense now.</p>

<p>For my future convenience I created the following two commands:</p>

<h3>1. List all the default Symfony styles</h3>

<p><a href="https://gist.github.com/breadthe/3b82ed24b41a38346f32318e4f585a5d">Command gist</a></p>

<h3>2. Generate a Ghostbusters logo</h3>

<p>The Ghostbusters logo was copied from this lovely <a href="https://asciiart.website/index.php">repository of ASCII art</a>. The Laravel console command in the gist generates the colored logo in the main article image.</p>

<p><a href="https://gist.github.com/breadthe/c1bc6fff18f21605fbf11726956d43e9">Command gist</a></p>

<h2>Reference</h2>

<p>Let's take a closer look at what colors and styles are available and how they can be applied.</p>

<p><strong>Foreground colors</strong></p>

<p><img src="/assets/img/2020-02-10-symfony-available-fg-colors.png" alt="Symfony available foreground colors" title="Symfony available foreground colors" /></p>

<p>Usage:</p>

<pre><code class="language-php">$this-&gt;line('&lt;fg=magenta&gt;Magenta text&lt;/&gt;');
</code></pre>

<p><strong>Background colors</strong></p>

<p><img src="/assets/img/2020-02-10-symfony-available-bg-colors.png" alt="Symfony available background colors" title="Symfony available background colors" /></p>

<p>Usage:</p>

<pre><code class="language-php">$this-&gt;line('&lt;bg=blue&gt;Blue background&lt;/&gt;');
</code></pre>

<p><strong>Options</strong></p>

<p><img src="/assets/img/2020-02-10-symfony-available-options.png" alt="Symfony available options" title="Symfony available options" /></p>

<p>Usage:</p>

<pre><code class="language-php">$this-&gt;line('&lt;options=bold&gt;Bold text&lt;/&gt;');
</code></pre>

<p><strong>Styles</strong></p>

<p><img src="/assets/img/2020-02-10-symfony-available-styles.png" alt="Symfony predefined styles" title="Symfony predefined styles" /></p>

<p>Usage (each style is its own individual tag):</p>

<pre><code class="language-php">$this-&gt;line('&lt;question&gt;question&lt;/question&gt;');
</code></pre>

<p><strong>Custom combos</strong></p>

<p>You may certainly combine the above to produce custom effects.</p>

<p><img src="/assets/img/2020-02-10-symfony-available-custom-combos.png" alt="Custom color/style combos" title="Custom color/style combos" /></p>

<p>Usage:</p>

<pre><code class="language-php">$this-&gt;line('&lt;fg=blue;options=blink;bg=yellow&gt;blue text on yellow background&lt;/&gt;');
$this-&gt;line('Clickable URL: &lt;href=https://github.com;fg=blue;options=underscore&gt;github.com&lt;/&gt;');
</code></pre>

<p>I don't know about you but I'll be sure to make my future Laravel console command output more colorful!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/how-to-reboot-developer-career</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/how-to-reboot-developer-career" />
    <title>How to Reboot Your Developer Career</title>
    <published>2020-01-30T00:00:00+00:00</published>
    <updated>2020-01-30T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I&#039;ll start off by assuming that you are currently employed, whether full- or part-time, working as a contractor, or freelancing. Even if you are not working for one reason or another, some of these tips may still be helpful.

Are you a developer who is......</summary>
    <content type="html"><![CDATA[
        <p>I'll start off by assuming that you are currently employed, whether full- or part-time, working as a contractor, or freelancing. Even if you are not working for one reason or another, some of these tips may still be helpful.</p>

<p>Are you a developer who is feeling depressed or sad that their career doesn't seem to be going anywhere? Have you ever felt some of the following?</p>

<p><strong>I'm stuck at my job and I can't get out because:</strong>
    - I'm too comfortable where I'm at
    - no other company would match my salary
    - the location or benefits are too hard to give up
    - I like my coworkers too much, or I made friends and I don't want to leave them behind</p>

<p><strong>My technical knowledge is outdated because:</strong>
    - our stack is old
    - I'm maintaining a legacy project
    - company/department policy is preventing me from using modern tech
    - there's no motivation to learn anything new
    - no one on the team is excited about their career and/or sharing their knowledge with others
    - management seeks to maintain the status quo (there's actually a good case for this from a business point of view)</p>

<p><strong>Impostor syndrome:</strong>
    - I feel stupid compared to devs working at other companies (despite building/managing an entire project/app on my own)
    - I feel overpaid for the technical knowledge I have
    - I don't feel capable of passing an interview
    - I don't feel capable of handling a complex project</p>

<p><strong>I don't feel empowered:</strong>
    - my "rank" is too low to make any changes
    - no possibilities for promotion
    - change is discouraged</p>

<p><strong>I'm bored / there's very little work to do.</strong></p>

<p><strong>The company's product or service is uninspiring, or I'm indifferent to the company's mission.</strong></p>

<p><strong>Other - <a href="https://twitter.com/brbcoding">tweet</a> at me and I'll update the list.</strong></p>

<p>I don't mean to trivialize your particular situation, but if you are employed consider this: it could be worse. You could be unemployed. Having a paying job (regardless how bad it seems) puts you in a position of power, and there are a few ways to leverage this. Read on.</p>

<h1>Techniques</h1>

<h2>Lobby for change</h2>

<p>If you feel like things are stagnant (tech stack, tooling, hardware, etc), slowly start advocating for change. You want to do it gradually, picking the low-hanging fruit at first.</p>

<blockquote>
  <p><strong>Story time</strong> I once worked at a job where management had certain rules about software we were allowed to use, which included an archaic code editor. Since I spent a quite a few years there, I had become isolated from more modern tools and techniques. A new hire brought knowledge of this cool new IDE called <a href="https://www.jetbrains.com/phpstorm/">PHPStorm</a>. Intrigued, I quickly realized the benefits of this tool (read: a big increase in productivity). Being a lead, I leveraged my communication channel with upper management and started pushing for a switch to PHPStorm, all the while promoting the advantages it brought over our old tool. It took a few months but eventually we had ourselves shiny new PHPStorm licenses.</p>
</blockquote>

<p>No matter your position, from intern to principal architect, your suggestions matter, and should be heard. A peer or someone in a more senior position <em>will</em> eventually notice, as long as you are thoughtful and provide good arguments for wanting change. Do it often enough, be mature about it, and don't make it sound like a complaint or criticism toward the company.</p>

<p>Just remember, in general companies are more willing to entertain ideas that 1) reduce costs and/or 2) increase profits. Smaller companies tend to be more flexible.</p>

<p>Frame your requests for change in terms of productivity gains, but back up your claims with solid research.</p>

<h2>Ask for (more) work, or use your downtime productively</h2>

<p>Being bored at work or not having enough to do doesn't mean you should count the minutes until 5 PM, or spend most of your time on social media or Reddit. Here are some suggestions:</p>

<ul>
<li>Ask your supervisor to assign you more work. Sometimes junior devs don't even realize that it's an option.</li>
<li>Find out if other teams or projects need help. Cross-polination can expose you to new problems, tech, ideas, etc, and might boost your morale.</li>
<li>Tackle some technical debt. Every project that runs long enough will incur a certain amount of technical debt. Now's a good time to take another look at that code and do some refactoring, bug fixes, or general maintenance. If nothing else, it'll leave you feeling better about the state of the codebase.</li>
<li>Write tests. Legacy apps are ripe for having some test coverage built into them. Don't know how to write automated tests? There's never been a better time to learn.</li>
<li>Engage in career-related research. If you've done all the above and <em>still</em> don't have much to do, I think it's fair at this point to start researching or learning things related to your career or the direction you'd like it to take.</li>
</ul>

<h2>Don't get too comfortable</h2>

<p>Once in a while it's worth taking a step back and analyzing how comfortable you are in your (old) ways. That could be a sign of regression. Never stepping out of one's comfort zone can be reassuring, but also devastating to one's career. The world does not stand still, nor should your desire to push boundaries.</p>

<h2>Study outside work</h2>

<p>If your company does not or will not provide you with learning opportunities, your best option is to pick up the (virtual) books and study on your own in your spare time.</p>

<p>Even if your desired tech has no relation to your day job, some of those skill might still apply. Think concepts, techniques, patterns, best practices, etc.</p>

<h2>Immerse yourself in dev culture</h2>

<p>When you surround yourself with things that you aspire towards, some of that will rub off of you. Hang out with other developers if you can, read articles and blogs, even developer-specific comics. Get hyped!</p>

<p>Keep reading for even more ways to become immersed.</p>

<h2>Work on a side project</h2>

<p>Probably the best way to boost your skills and confidence as a programmer is to work on a side project. More on ideas for side projects below in the <strong>Common excuses</strong> section.</p>

<p>A side project is the gateway toward getting better at your current stack, or learning something new. Are you interested in Vue or React? No problem, build an app in either, while learning. Always wanted to build an iOS or Android app? Now's the chance.</p>

<p>Working on a side project has many more benefits than simply learning something new. It will put you above the majority of 9-5 developers, but it will also show potential employers how involved you are in your career.</p>

<h2>Be full stack</h2>

<p>Being a full stack developer is not everyone's cup of tea. Maybe you're really good at server-side development but not very comfortable on the front end. Or maybe you love UI but aren't exactly sure how that back end API works.</p>

<p>Maybe it's unreasonable to expect a developer to know the entire application cycle, but under today's (un)fortunate paradigm that is often the case. Now let's get one thing out of the way first: I, for one, am grateful for this paradigm, because it has forced me to adapt and, by extension, progress in my abilities.</p>

<p>My heartfelt advice is to stay open to learning anything even tangentially related to your career. You'll become a much more versatile developer once you've gained an understanding of how the entire process works. Some may say that it's better to specialize than to be the proverbial jack-of-all-trades. While I don't disagree, I still maintain that you'll end up an even better <em>specialist</em> if you're comfortable in another area.</p>

<h2>Be a polyglot</h2>

<p>Many full stack devs are <a href="https://en.wikipedia.org/wiki/Multilingualism#In_individuals">polyglots</a> by necessity, being required to know JavaScript and some form of back end language. <em>That is a good thing.</em> What I'm proposing goes even farther. If you can find it in you, try learning an entirely new language, even if you don't intend to make it your career. It can only open your mind and make you more receptive to ideas and concepts outside your sphere of thought.</p>

<h2>Start a blog</h2>

<p>A blog is a good place to jot down ideas and interesting techniques. Keep it focused on your end goal, if possible. What I mean by that is, if your goal is to enhance your career, perhaps it's not a great idea to post too often about your cats.</p>

<p>"<em>What would I even talk about?</em>" Don't overthink it. Learned something new? Write a blog post. Solved a problem? Blog about it.</p>

<p><em>"But nobody would read it / nobody knows I exist"</em> Yep! If you don't already have a following, you will be talking to a wall for the next year or so. But if you stick to it and continue to produce quality content, people will eventually find you. Just be consistent about posting articles, and don't despair. I've had successful blogs in the past (in unrelated topics) and it takes a critical mass of articles, combined with time, before you'll see visitors.</p>

<p><em>"I don't want to pay for it"</em> That's cool. Neither do I. This blog is hosted for free on <a href="https://www.netlify.com/">Netlify</a>. There are many free, statically-hosted solutions nowadays.</p>

<h2>Join Twitter</h2>

<p>If there's one thing I regret, it's not joining Twitter under my <a href="https://twitter.com/brbcoding">developer persona</a> years ago. Once again, I've had successful Twitter accounts in the past for other hobbies but back then I wasn't paying so much atttention to my career.</p>

<p>So what is Twitter good for? First, follow developers who produce quality content, or whom you admire. (Shameless plug ‚Üí pls <a href="https://twitter.com/brbcoding">follow me</a> k thx bye). This will likely inspire you but may have the side effect of intensifying impostor syndrome (don't worry though, it'll pass as you (re-)gain confidence in your abilities).</p>

<p>Second, tweet about developer problems and solutions you encounter. Post screenshots or <a href="https://chasingcode.dev/blog/screen-recording-gif-workflow/">gifs</a> if you can. Take your time and <em>craft</em> a tweet before sending. People are more likely to notice a polished tweet.</p>

<p>Third, engage in quality discussions with other devs. Compliment, ask relevant questions or clarification, or offer insights. Try to keep it civil and friendly.</p>

<p>Not least, use Twitter to raise awareness on your own work, such as posting a new article on your blog, or working on a side project.</p>

<p>As with blogging, don't dwell on your initial lack of either followers or reactions to your tweets. For a very long time it may feel as if you're in a vacuum, but keep at it and you will succeed.</p>

<p>My final Twitter advice (some may disagree) is to keep your interactions focused on the persona you want to project. If your goal is to promote your developer side, stick to that. Don't meander too far into things like politics or unrelated subjects - <em>at least until you have a bajillion followers</em>. Some will argue that you should be yourself on Twitter (which I agree with - I am 100% genuine) but I also believe in separation of concerns. I won't mix my career with my hobbies and personal beliefs under the same account. I've unfollowed many brilliant developers who mainly shitpost or talk about random subjects. Let's face it, at the end of the day there's too much stuff in your timeline to filter through.</p>

<h2>Listen to dev podcasts</h2>

<p>One thing that helped me become even more interested in the developer ecosystem was to listen to related podcasts. A few years ago I started listening to <a href="http://www.fullstackradio.com/">Full Stack Radio</a> and my brain was suddenly flooded with a wealth of fascinating information. Every episode got me thinking about new concepts, and got me to play around with some of them. Of course, there are many other <a href="https://chasingcode.dev/blog/developer-podcasts/">developer podcasts</a> out there for you to choose. And if you have a long daily commute, it's the perfect time to listen to an episode.</p>

<h2>Attend developer conferences, webinars, or meetups</h2>

<p>Try to get your company (via your manager) to send you to a developer conference of your choice. Keep all the costs in mind. The best companies will pay for everything (conference cost, airfare, hotel, meals, transport, etc). If that's not in the budget, see if you can cover some of the costs yourself, or find a cheaper local conference or webinar. In general it's easier to get the company to pay for something that benefits your knowledge (as long as it can also benefit the company).</p>

<p>Even if the above is impossible, there are usually local meetups that you can attend evenings or weekends, especially around larger cities.</p>

<p>A conference or meetup has the benefit of putting you in contact and proximity with like-minded people, who are just as excited about learning something new. And you <em>will</em> pick up new things, I guarantee it. The best conferences (such as <a href="https://laracon.us/">Laracon</a>) will give you fond memories for years to come, and will make you feel part of something great.</p>

<h2>Get your co-workers excited about the things you like/learn</h2>

<p>Have you tried some of the above? Good! Now talk to your co-workers about them and get them excited too. Become a tech evangelist, if you will. I never tire of talking about my favorite technology. Share the knowledge you've gained and share the love. It is almost guaranteed that some of it will stick.</p>

<p>The best feeling is when your enthusiasm becomes contagious and a coworker adopts a technology they were ignorant or ambivalent about. Spoiler: it happened to me multiple times and I will make it happen again going forward.</p>

<h2>Be the change</h2>

<p>To get a rusty old piece of machinery running can be hard until you apply a little oil in the right places. You can be the oil in the cogs.</p>

<h2>Observe the world around you</h2>

<p>Take a look at others whom you perceive to be successful. How did they get there? You'll probably view these people as being extremely smart, which I'm sure they are. Here's the thing: <em>there's always someone smarter</em>, and that hasn't stopped <em>them</em> from getting where they are now. There's no reason why you can't follow a similar path.</p>

<h2>Find another job</h2>

<p>If you've been at the same company for a long time, your interviewing skills might be rusty, even assuming technical skills are good. Let's face it, most developer interviews are designed to test how good you are at interviewing, not at the actual job you'll be doing.</p>

<p>Once you start interviewing, don't get discouraged by rejections. Keep at it, refine the process, rinse and repeat. That impostor syndrome might even hit hard but you got this. More importantly, if you are already employed, there's nothing to lose, so try to approach it with that in mind.</p>

<p>My one other bit of advice is to aim for a position or company that you genuinely feel will put you in a happier place and help advance your career. So don't just move for the sake of moving, rather make a conscious effort to end up in a better place - one that will improve upon your present condition.</p>

<h2>How to make the best of a "bad" job</h2>

<p>What is defined by "bad job" is pretty subjective and for you to determine. There are, however, a few ways in which your bad job can help overcome your condition.</p>

<p><strong>The proverbial "kick in the ass".</strong> This could be your best motivation for seeking change.</p>

<p><strong>Use it as leverage when job-hunting.</strong> Being employed will make you a more viable candidate than someone who isn't. Equally important, you don't have to accept a lesser offer, unless you really really (and I mean really) want to work for company X. (Ask yourself though, if company X is lowballing you, should you accept that offer?)</p>

<p><strong>Stability.</strong> It sounds counter-intuitive, but sometimes a boring job or a stagnant career could mean long-term job security. Some people value this above all else. A stable (but boring) job with sensible hours and a decent salary can allow you to pursue other interests or hobbies outside of work. It's for you to decide if this is a worthy tradeoff.</p>

<h1>Common excuses</h1>

<h2>But I don't want to (think about) code outside work</h2>

<p>That's perfectly fine. No one should require that from you. Do it only if you enjoy it.</p>

<p>The reality, though, is that we live in a future where there's a tremendous amount of knowledge expected from developers, especially those who consider themselves "full stack". If your day job doesn't provide opportunities for growth, or if you're stuck on a 10-year old stack, you'll realize your skills are outdated as soon as you start looking for a new job.</p>

<p>If you want to have a better shot at another job, and a shot at a better job, chances are you'll have to do a lot of studying outside work hours. At least until you secure that new position. Playing catch-up, though, can be frustrating and a lot harder than short study sessions over time.</p>

<h2>But I don't have time to study/learn/code outside work</h2>

<p>Individual situations will vary but based on my personal experience and numerous conversations with various developers, it's usually not a matter of "not having time" but rather of "it's not high on my list of priorities".</p>

<p>Once you start framing activities in terms of priorities, you might discover that you can actually make time for this new thing if you switch priorities around, or eliminate the ones that don't bring value.</p>

<p>This requires a little bit of self reflection and awareness, but it makes sense to prioritize your most important goals. Maybe you can watch less TV or play fewer games. Maybe you can go out less often with your friends or spend less time on social media. It all depends how much you value one priority over another.</p>

<h2>I can't find the motivation</h2>

<p>I would argue that motivation is not as important as <strong>discipline</strong> and <strong>consistency</strong>. There doesn't always have to exist a motivator; in fact often there isn't. If you're reading this, chances are you are going through some of these struggles or have in the past. In this case, the motivation can be one of: I want to improve my career; I want to be better at my job; I want to find another job; I want to feel more confident in my abilities.</p>

<p>Discipline, however, laughs in the face of motivation. If you tell yourself that regardless how you <em>feel</em>, you're gonna pick up that computer and spend 30m/1h learning something new every night, you're already ahead of most people. Then follow that up with consistency: do it regularly, even if you only have 10m to spare.</p>

<p>I do that sometimes before leaving for work in the morning, while sipping my coffee. If I have an idea I'm itching to try, I'll bang out a quick 10-20m coding session. By doing this, I'm usually left with a lingering sense of satisfaction for the rest of the day, because even if I'm dead tired in the evening, I know that I accomplished <em>something</em> that day (well, outside work, of course).</p>

<h2>I don't know where to start</h2>

<p>So you've decided you want to learn new things but have no idea where to begin? A good place would be a technology that you admire, aspire to learn, or would like to use at your next job. It's as simple as that. You won't even have to spend a penny because the internet holds countless free learning resources for anything you can imagine.</p>

<h2>I lack imagination and can't come up with ideas for a side project</h2>

<p>Phooey! There are ideas all around you.</p>

<ul>
<li>Find a problem you run into on a daily basis and automate it. Scratch your own itch, as they say.</li>
<li>Pick your favorite hobby or interest, then build an app around it.</li>
<li>Interview people around you and ask what problems they have in their daily lives that can be solved by software.</li>
<li>Copy an existing idea that appeals to you - no one will care as long as you don't copy it 1:1 and then try to sell it.</li>
<li>If all else fails, build a banal to-do app. There are plenty of those around that have made a very successful business out of it.</li>
</ul>

<h1>In closing</h1>

<p>What started out as a few bullet points floating around in my head ended up a lot longer than I anticipated. If you've made it this far, I am humbled and grateful, and I thank you for that.</p>

<p>After many years working in the software industry, I realized I had accumulated all these bits and pieces of acquired "wisdom", based on my own failings and redemptions. I experienced some of these pains and applied a lot of these techniques successfully. I've never felt stronger and more confident than I am today, at the peak of my career. And you know what? This journey has just begun.</p>

<p>I started by making small, incremental changes. I didn't have a Twitter account a few months ago. This blog didn't exist a little over a year ago. A couple years before that, I had built only one side project until that point. Before that, I had timidly begun to immerse in dev culture. Even farther back, I made the decision to rectify the slump I was in, through a career shift.</p>

<p>Few meaningful things happen overnight, so I'm going to leave you with an old clich√© that says "the best time to make a change was X years ago; the second best time is now".</p>

<p>I hope you found this helpful.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/build-signup-form-with-alpinejs</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/build-signup-form-with-alpinejs" />
    <title>Build a Dynamic Sign Up Form With Alpine.js</title>
    <published>2020-01-03T00:00:00+00:00</published>
    <updated>2020-01-03T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I must have started 2020 on the right foot because my first tweet of the year was the most popular by far. It&#039;s basically a short animation of the sign up form that I built for my SaaS app 1secret.app.

I&amp;#39;ve been using @calebporzio&amp;#39;s Alpine.js in......</summary>
    <content type="html"><![CDATA[
        <p>I must have started 2020 on the right foot because my first tweet of the year was the most popular by far. It's basically a short animation of the sign up form that I built for my SaaS app <a href="https://1secret.app/">1secret.app</a>.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I&#39;ve been using <a href="https://twitter.com/calebporzio?ref_src=twsrc%5Etfw">@calebporzio</a>&#39;s Alpine.js in production on <a href="https://t.co/vMtgJGIPOK">https://t.co/vMtgJGIPOK</a> and it&#39;s awesome for simple dynamic functionality like this sign up form! <a href="https://t.co/NmdUeAwM9m">pic.twitter.com/NmdUeAwM9m</a></p>&mdash; Placebo Domingo (@brbcoding) <a href="https://twitter.com/brbcoding/status/1212411777805410307?ref_src=twsrc%5Etfw">January 1, 2020</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Today I'll explain how I built this.</p>

<h2>What is Alpine.js?</h2>

<p>You might be wondering what is <a href="https://github.com/alpinejs/alpine">Alpine.js</a>. In essence it is a front-end micro-framework that lets you build dynamic behavior fast and easy, right in your DOM, with a minimum of actual JS. It was created seemingly overnight by the never-cease-to-amaze <a href="https://twitter.com/calebporzio">Caleb Porzio</a>.</p>

<h2>The problem</h2>

<p>I recently implemented Stripe payments on <a href="https://1secret.app/">1secret.app</a> and I thought it might be neat to allow the user to pay for a Premium subscription while they're <a href="https://1secret.app/register">signing up</a> for a new account. They can also sign up for a Free account, then upgrade later from within the app.</p>

<p>I also wanted to update the text (along with the price) on the "Sign up" button when they select between the options <em>Free</em>, <em>Monthly $10/m</em>, and <em>Yearly $95/y</em>. So the button text would become <em>Sign up for free</em>, <em>Sign up monthly for $10</em>, etc. I've seen this pattern used before and I like it because it gives the user clear expectations of how much they will be charged (if at all).</p>

<h2>The solution</h2>

<p>The docs in the <a href="https://github.com/alpinejs/alpine">Alpine.js</a> repo are fairly concise so I won't bother you with repeating everything. Let's dive into how I actually built this little feature.</p>

<blockquote>
  <p><strong>Quick background:</strong> 1Secret is a Laravel app under the hood. All the behavior described below happens in Blade templates.</p>
</blockquote>

<p>The sign up form lives in a <code>register.blade.php</code> file. In addition, there's just one line of code that goes into the master layout template <code>app.blade.php</code>. The latter is the template where all the content is <code>yield</code>ed. The line in question is right before the closing <code>body</code> tag as shown below:</p>

<p><strong>views/layouts/app.blade.php</strong></p>

<pre><code class="language-php">    ...

    @yield('alpine')

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Here's the simplified code for the <code>register.blade.php</code> template (I've omitted the text inputs, classes, and a lot of layout stuff, for brevity). Also, I hope you'll forgive my code highlighter - it doesn't seem to do well with Blade syntax.</p>

<p><strong>views/auth/register.blade.php</strong></p>

<pre><code class="language-php">@extends('layouts.app')

@section('alpine')
    &lt;script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v1.1.5/dist/alpine.js" defer&gt;&lt;/script&gt;
@endsection

@section('content')
    &lt;form
        id="payment-form"
        method="POST"
        action="{{ route('register') }}"
        aria-label="Register"
        x-data="{ selected: 'opt1' }"
    &gt;
        @csrf

        &lt;!-- Email and password inputs --&gt;

        &lt;label&gt;
            Plan &lt;a href="{{ route('features') }}"&gt;see features&lt;/a&gt;
        &lt;/label&gt;

        &lt;label for="plan-free"&gt;
            &lt;input x-on:click="selected = 'opt1'" id="plan-free" type="radio" name="plan" value="standard-free" checked&gt;
            Free
        &lt;/label&gt;

        &lt;label for="plan-monthly"&gt;
            &lt;input x-on:click="selected = 'opt2'" id="plan-monthly" type="radio" name="plan" value="premium-monthly"&gt;
            Monthly - &lt;strong&gt;{{ $premiumMonthlyPrice }}&lt;/strong&gt; / month
        &lt;/label&gt;

        &lt;label for="plan-yearly"&gt;
            &lt;input x-on:click="selected = 'opt3'" id="plan-yearly" type="radio" name="plan" value="premium-yearly"&gt;
            Yearly - &lt;strong&gt;{{ $premiumYearlyPrice }}&lt;/strong&gt; / year &lt;span&gt;- save &lt;strong&gt;$25&lt;/strong&gt; per year&lt;/span&gt;
        &lt;/label&gt;

        &lt;div x-show="selected !== 'opt1'" x-cloak&gt;
            &lt;label x-show="selected !== 'opt1'" x-cloak for="card-element"&gt;
                Credit or debit card
            &lt;/label&gt;
            &lt;div x-show="selected !== 'opt1'" x-cloak id="card-element"&gt;
                &lt;!-- A Stripe Element will be inserted here. --&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div x-show="selected !== 'opt1'" x-cloak&gt;
            &lt;!-- Stripe: used to display form errors. --&gt;
        &lt;/div&gt;

        &lt;button
            id="card-button"
            name="submitPayment"
            type="submit"
            data-secret="{{ $intent-&gt;client_secret }}"
            x-text="selected === 'opt1' ? 'Sign up for free' : (selected === 'opt2' ? 'Sign up monthly for ${{ $premiumMonthlyPrice }}' : (selected === 'opt3' ? 'Sign up yearly for ${{ $premiumYearlyPrice }}' : 'Sign up for free'))"
        &gt;
            Sign up for free
        &lt;/button&gt;
    &lt;/form&gt;
@endsection
</code></pre>

<h2>Breaking it down</h2>

<p>Let's run through smaller snippets of code in <code>register.blade.php</code>, starting with how Alpine.js is loaded:</p>

<pre><code class="language-php">@section('alpine')
    &lt;script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v1.1.5/dist/alpine.js" defer&gt;&lt;/script&gt;
@endsection
</code></pre>

<p>Here, I'm loading it from the CDN, although you can also install it with <code>npm</code>.</p>

<p>I opted to load the Alpine.js script only on the register page. To do that, I've defined <code>@section('alpine')</code>, which I'm then <code>yield</code>ing in <code>app.blade.php</code>.</p>

<blockquote>
  <p><strong>Note 1</strong> At the moment this is the only page where I'm using Alpine but in the future I'll probably just <code>@include</code> the script tag in a Blade partial.</p>
  
  <p><strong>Note 2</strong> <code>@push</code>-ing the script to a <code>@stack</code> is generally a cleaner way. I should do that.</p>
</blockquote>

<p>Next, you might have noticed the strange <code>x-</code> directives in the HTML tags. These are what makes Alpine.js tick. You apply them to the DOM elements to control behavior. These should feel familiar to any Vue developer, and in fact that was Caleb's intention when he named them.</p>

<p>The key is the <code>x-data</code> directive. This represents the "state" for all the child components, in the form of a <strong>JSON object</strong>. When you assign <code>x-data</code> it is very important to put it on the correct element. So, for example, if you want to control a button on a form, you should put <code>x-data</code> on a parent element. In this case I put it on the form element itself, because there are other things in there that I want to hide or show depending on this state.</p>

<p>Here, <code>x-data</code> says that I want "option 1" (or <code>opt1</code>, in other words "Free") to be selected when I first load the page.</p>

<pre><code class="language-php">&lt;form
    id="payment-form"
    method="POST"
    action="{{ route('register') }}"
    aria-label="Register"
    x-data="{ selected: 'opt1' }"
&gt;
</code></pre>

<p>Moving on, each radio button has a <code>x-on:click="selected = 'optX'"</code> directive. This says "when I click an option, I want the selected state to change to that option".</p>

<pre><code class="language-php">&lt;label for="plan-free"&gt;
    &lt;input x-on:click="selected = 'opt1'" id="plan-free" type="radio" name="plan" value="standard-free" checked&gt;
    Free
&lt;/label&gt;
</code></pre>

<p>To toggle visibility, I've sprinkled a few <code>x-show</code> directives on the Stripe payment form elements. For example, this one <code>x-show="selected !== 'opt1'"</code> says "show this element if the selected option is not 1", or in actual English, "hide the payment form if the Free plan is selected (<code>opt1</code>)".</p>

<p>Finally, there's also a <code>x-cloak</code> directive which prevents hidden elements from flashing briefly into visibility before Alpine.js has the chance to hide them.</p>

<pre><code class="language-php">&lt;div x-show="selected !== 'opt1'" x-cloak&gt;
    &lt;label x-show="selected !== 'opt1'" x-cloak for="card-element"&gt;
        Credit or debit card
    &lt;/label&gt;
    &lt;div x-show="selected !== 'opt1'" x-cloak id="card-element"&gt;
        &lt;!-- A Stripe Element will be inserted here. --&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div x-show="selected !== 'opt1'" x-cloak&gt;
    &lt;!-- Stripe: used to display form errors. --&gt;
&lt;/div&gt;
</code></pre>

<blockquote>
  <p>If you're wondering why I'm using the same <code>x-show</code> on both parent and child elements, there was some weirdness going on with the Stripe form (which is rendered via magic provided by <code>stripe.js</code>). This was my solution for handling that.</p>
</blockquote>

<h2>Demo</h2>

<p>I also made an (even more simplified) Codepen demo for convenience.</p>

<p class="codepen" data-height="265" data-theme-id="default" data-default-tab="html,result" data-user="brbcoding-the-selector" data-slug-hash="dyPZOxL" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Payment Form">
  <span>See the Pen <a href="https://codepen.io/brbcoding-the-selector/pen/dyPZOxL">
  Payment Form</a> by Constantin (<a href="https://codepen.io/brbcoding-the-selector">@brbcoding-the-selector</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>

<script async src="https://static.codepen.io/assets/embed/ei.js"></script>

<h2>Conclusion</h2>

<p><a href="https://github.com/alpinejs/alpine">Alpine.js</a> is one of the coolest things in the dev world that came out of 2019, in my opinion. It should make quick work of simple behavior that we traditionally turned to jQuery, Vue/React, or plain JavaScript for.</p>

<p>You might be thinking, why not just use jQuery, or plain JS then? Several reasons.</p>

<ul>
<li>Alpine.js is tiny (~3K minified/gzipped) compared to traditional kitchen-sink frameworks.</li>
<li>It is easy to <a href="https://en.wikipedia.org/wiki/Grok">grok</a>. The documentation has everything you need to get started.</li>
<li>It precludes the need to write JS for certain tasks. Let's face it, if you're building the same interactive menus, dropdowns, tabs, etc across multiple projects, you'll probably still end up writing a mini framework of some sort. Alpine takes care of that for you, and provides a simple, consistent API.</li>
<li>Maybe I don't want to write more JS than I need to. I'm fairly comfortable in JS but I'd rather not waste limited brain-CPU power trying to figure out how to build interactivity from scratch when I should be focusing on actual server-side features.</li>
<li>Now (as in today) it even has <a href="https://github.com/alpinejs/alpine/releases/tag/v1.1.5">simple animations</a>.</li>
</ul>

<p>Like <a href="https://tailwindcss.com/">Tailwind CSS</a>, Alpine.js might take a moment to click, but once it does, the possibilities are endless. So give it a try and build cool things!</p>

<h2>P.S.</h2>

<p>If you'd like to give <a href="https://1secret.app/register">1Secret</a> a spin, you can use Stripe's test credit card number <code>4242 4242 4242 4242</code> to sign up for a free Premium account until the official launch that should happen later this year.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/reflecting-on-2019</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/reflecting-on-2019" />
    <title>Reflecting on 2019</title>
    <published>2019-12-31T00:00:00+00:00</published>
    <updated>2019-12-31T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">As it seems to be popular in the dev community these days, for the first time ever I&#039;ve decided to write my own summary of 2019. I&#039;m curious how 2020 will compare but this is definitely not a contest. I am done putting pressure on myself in order to......</summary>
    <content type="html"><![CDATA[
        <p>As it seems to be popular in the dev community these days, for the first time ever I've decided to write my own summary of 2019. I'm curious how 2020 will compare but this is definitely not a contest. I am done putting pressure on myself in order to accomplish imaginary goals.</p>

<h2>Personal</h2>

<p>I'll preface this by clarifying that I'm trying to keep personal stories to a minimum, especially on this website and blog, but also on Twitter. My online presence is strictly focused on developer-related topics and I intend to keep it that way.</p>

<p>Briefly though, 2019 has brought more personal tragedy than previous years. Thankfully, things are settling down, but the reality is that as we grow older and feebler, so do those around us, and these tragedies become more commonplace.</p>

<h2>Work and career</h2>

<p>I won't give too many details about my day job, but I've been working at the same company for the whole of 2019 and then some. In the spring I shipped a new project that has been running successfully in production ever since. It's something I built entirely on my own (team of 1) and I'm pretty happy with the way it turned out and how it performs. Very importantly, it has been running without a hitch and very little supervision, which allows me to go on a lengthy vacation without having to worry about it.</p>

<p>At work, most of our stack is Laravel, plus a sprinkling of Vue and other technologies. Myself, I use TailwindCSS for the projects I own. I am very grateful for this stack, as there aren't alternative technologies I'd rather use at the moment.</p>

<p>Another thing that I'm very satisfied with is the amount of new features I built in 2019, both on the project I own, as well as another that I collaborate on. I get a lot of satisfaction out of building things with code, and this has contributed to an overwhelming majority of days when I didn't dread going to work. Laravel has been a huge factor in this, as it makes problems a lot easier to solve and significantly more pleasurable.</p>

<h2>This blog</h2>

<p>It turns out that this blog is now a little over a year old. I say "blog" and not "site", because I started out with an entirely different concept and domain in 2018, only to change it later once I had a better idea what I wanted to do. The blog articles, however, were carried over.</p>

<p>For those who have no idea what I'm talking about, the site started out as a sort of "launchpad" for my personal projects. I intended for it to be an "organization" under which I would bring together the work I do in my spare time. I called it Omigo.sh, trying to be cute.</p>

<p>Towards the end of August 2019 I realized that it would have served me a lot better if I had made a portfolio website instead of an anonymous pseudo-organization. So I changed it to what you see today, preserving all the blog posts. Now, the landing page is a brief summary of my portfolio with a little bit about myself.</p>

<p>In 2019 I posted a total of 38 articles which seems way more than I remember writing. As with my tweets, I don't have any kind of schedule for writing articles. I do it when I have something to say, which could happen two days in a row or once every two weeks. My posting frequency is very much influenced by all my other hobbies and activities, as I have to share time between them.</p>

<h3>Traffic</h3>

<p>I use Google Analytics to track visits to the blog, which helps stroke my ego occasionally when I check on it and notice the traffic increasing. I was pleasantly surprised to find that there's been a pretty healthy increase in visits since I switched over to the current domain.</p>

<p><img src="/assets/img/2019-12-31-reflecting-on-2019.png" alt="2019 blog traffic" title="2019 blog traffic" /></p>

<blockquote>
  <p>There's been a lot of discussion in the community about the ethics of using Google products, especially Analytics. To tell the truth, I feel a bit icky myself using it, and I'm mulling switching to something else. I might just to that in 2020, but for now feel free to use an adblocker, because I have nothing to sell and I don't really care.</p>
</blockquote>

<h3>Most popular posts</h3>

<p>I write a lot about solutions and fixes to all kinds of edge cases and gotchas that I run into in my day-to-day work. This makes for some niche articles that are, understandably, not very popular with everyone. Here are some of my most visited articles in 2019 (from most popular to least):</p>

<ul>
<li><a href="/blog/laravel-global-url-helpers/">Laravel Add &amp; Remove URL Query Parameters Helpers</a></li>
<li><a href="/blog/update-enum-column-doctrine-exception/">Update Enum Column Doctrine Exception in Laravel</a></li>
<li><a href="/blog/how-to-install-httpie-windows-10/">How to Install HTTPie in Windows 10</a></li>
<li><a href="/blog/supercharged-dynamic-vue-svg-icon-component/">Supercharged Dynamic Vue SVG Icon Component</a></li>
<li><a href="/blog/fix-laravel-no-input-file-specified/">How to Fix Laravel's Dreaded "No input file specified" Error</a></li>
<li><a href="/blog/fix-vagrant-homestead-cant-create-database/">Fix Vagrant Homestead "Can't create database" Error</a></li>
<li><a href="/blog/wink-vs-jigsaw/">Wink vs Jigsaw</a></li>
</ul>

<h2>Personal projects</h2>

<h3>1Secret.app</h3>

<p>2019 was the year I hoped to "launch" my nearest and dearest personal project to the world, and that is <a href="https://1secret.app">1Secret</a>. While 1Secret has been up and running for over a year with a tiny handful of active users, it's still technically in beta. You can sign up and start using it if you want, but it's just not there in terms of how I want it to work.</p>

<blockquote>
  <p>1Secret is a service that allows you to share sensitive data (text of files) through unique URLs that expire after a set time. Once the URL (or secret) expires, the data is destroyed on the server permanently.</p>
</blockquote>

<p>While I'm fully aware that one should not delay a launch indefinitely until some imaginary goals are met, I'm just not comfortable announcing it at this point. There are some architecture changes that need to be done now rather than later, to ensure long-term viability. I'm not in any particular rush though.</p>

<h3>Allmy.sh</h3>

<p>This one's an expense tracker that I started over a year ago but shelved to focus on 1Secret. It's something I need for my own expense tracking needs and I really hope I'll be able to get back to it soon.</p>

<h3>Prototype MTB project</h3>

<p>I came up with an idea related to mountain biking and MTB trails that I built a proof-of-concept for on a weekend. It's a very simple tool and quite niche but it looks promising, so I might build a very simple version of it.</p>

<h3>Other projects</h3>

<p>My idea list is ever-expanding. I'm sometimes tempted to try some of them out but I want to resist being pulled in too many directions.</p>

<h2>New dev tech</h2>

<p>2019 has been the year of Laravel and Vue exclusively. The only other technologies (in the same ecosystem) that I've tried briefly are <a href="https://laravel-livewire.com/">Livewire</a> and <a href="https://github.com/alpinejs/alpine">Alpine</a>, both by <a href="https://twitter.com/calebporzio/">Caleb Porzio</a>. I used the former on a little <a href="https://github.com/breadthe/laravel-livewire-demo">demo project</a>, while the latter is currently used to build new dynamic functionality on 1Secret. They're both amazing and I'll definitely use them extensively going forward.</p>

<h2>Health and fitness</h2>

<p>Health-wise I'm good, and there weren't significant changes in my fitness routine, except for one thing. I continue to hit the gym 2-3 times a week for weightlifting and then I usually ride bicycles on the weekend.</p>

<p>In 2019 I've transitioned more towards mountain biking, moving away from the road variety. This year I finally took the plunge and bought my own mountain bike. Even though it happened late in the year, it has already helped me improve my trail-riding skills. I signed up for a 2-day mountain bike camp in the spring of 2020 and I'm very excited about that.</p>

<h2>Books</h2>

<p>In 2019 I only read 13 books unfortunately, which is less than the previous year. This can be explained by the other hobbies that demand my time, as well as the fact that few of these books have been truly engaging. Of note I'll mention the <strong>Dark Forest</strong> series by Cixin Liu, <strong>Kafka on the Shore</strong> by Haruki Murakami, and book 3 of the Expanse series, <strong>Abaddon's Gate</strong>.</p>

<h2>Entertainment</h2>

<p>I don't watch TV in the traditional sense but I do watch a fair amount of movies and TV shows.</p>

<p>In 2019 I saw 140 movies, but most of them were uninspiring to say the least. Some that I thought were excellent, in no particular order are: <strong>Bohemian Rhapsody</strong> (2018), <strong>Spider-Man Into the Spider-Verse</strong> (2018), <strong>Green Book</strong> (2018) and <strong>Boy</strong> (2010).</p>

<p>I also watched 14 seasons from various shows. A really good one is <strong>Good Omens</strong>, especially since it has only one season. All the shows I watched were high quality and that's because I won't commit if I don't like it, as opposed to movies which are a one-off affair.</p>

<p>I've also been an avid PC gamer, although less so the last couple years. In 2019 I've played mostly <strong>World of Warships</strong> of which I'm a big fan, with a little of <strong>The Adventures of Van Helsing</strong> and <strong>Grim Dawn</strong>. After the announcement of Diablo 4, as a huge fan of the series and someone who's played all of Blizzard's games, I was struck by nostalgia and started playing <strong>Diablo 2</strong> again. Ironically, my high-end gaming PC is used to run a 20-year old game, in 800x600 resolution nonetheless. Finally, I just picked up <strong>Bloons TD 6</strong> (a tower defense game) on a whim for $1 and it's been surprisingly fun.</p>

<h2>Looking forward to 2020</h2>

<p>I don't expect things to change a lot in 2020, but there are a few ways in which I'd like to progress.</p>

<p>On the dev tech side, I'm looking forward to <strong>Laravel 7 and 8</strong>. I like to stay on top of upgrading all my projects whether at work or at home. Then there's of course <strong>Vue.js 3</strong> which brings some new paradigms (composition API and other goodies). <strong>Tailwind 2</strong> is also on the horizon and it always gets me excited when there are new updates.</p>

<p>As far as new technologies, I hope to get the chance to work with <strong>Inertia.js</strong> and <strong>Livewire</strong> a lot more. There's also <a href="https://svelte.dev/">Svelte</a> which I keep meaning to learn but there never seems to be time for that.</p>

<p>Outside of dev stuff, I want 2020 to be the year of "taking it to the next level" in terms of mountain biking. Not only am I taking part in the 2-day MTB camp I mentioned, but I'll have a full season of dry trails to practice on with my own bike.</p>

<p>I would hope to read more books in 2020 but that's not very likely, unless I stumble across really good books that are easy reads and keep me hooked.</p>

<p>Finally, I plan to remain as healthy as before and I also wish that upon everyone who chances upon this article.</p>

<p>If you've made it so far, thanks for reading my lengthy 2019 synopsis, and may 2020 be your best year yet!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/fix-curl-error-60-ssl-certificate-problem</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/fix-curl-error-60-ssl-certificate-problem" />
    <title>Fix cURL Error 60 SSL Certificate Problem</title>
    <published>2019-12-12T00:00:00+00:00</published>
    <updated>2019-12-12T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Right after upgrading my local PHP environment to 7.4 on the Windows laptop that I use at work, I ran a Laravel artisan console command for an HTTP request to a 3rd party API. I ran the command in my Git Bash terminal. The request is done using Guzzle......</summary>
    <content type="html"><![CDATA[
        <p>Right after upgrading my local PHP environment to 7.4 on the Windows laptop that I use at work, I ran a Laravel artisan console command for an HTTP request to a 3rd party API. I ran the command in my Git Bash terminal. The request is done using Guzzle and I received the following cURL error:</p>

<pre><code class="language-bash">GuzzleHttp\Exception\RequestException  : cURL error 60: SSL certificate problem: unable to get local issuer certificate (see https://curl.haxx.se/libcurl/c/libcurl-errors.html)

at C:\Users\MyUserName\code\myproject\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php:201
  197|
  198|         // Create a connection exception if it was a specific error code.
  199|         $error = isset($connectionErrors[$easy-&gt;errno])
  200|             ? new ConnectException($message, $easy-&gt;request, null, $ctx)
&gt; 201|             : new RequestException($message, $easy-&gt;request, $easy-&gt;response, null, $ctx);
  202|
  203|         return \GuzzleHttp\Promise\rejection_for($error);
  204|     }
  205|

Exception trace:

1   GuzzleHttp\Handler\CurlFactory::createRejection(Object(GuzzleHttp\Handler\EasyHandle))
    C:\Users\MyUserName\code\myproject\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php:155

2   GuzzleHttp\Handler\CurlFactory::finishError(Object(GuzzleHttp\Handler\CurlHandler), Object(GuzzleHttp\Handler\EasyHandle), Object(GuzzleHttp\Handler\CurlFactory))
    C:\Users\MyUserName\code\myproject\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php:105

Please use the argument -v to see more details.
</code></pre>

<p>I'm almost certain that the PHP 7.4 upgrade wasn't the only cause. Previously, I had screwed up a local SSL certificate that I was using for <code>https</code> in the browser for my local projects.</p>

<h2>Solution 1</h2>

<p>The first thing I tried successfully was to ssh into the Vagrant box and run the artisan command from there. As expected this worked because Homestead is properly configured, including SSL certificates. If you don't care about being able to make Guzzle requests in your local terminal (using the locally-installed PHP), then try running it from the Vagrant box.</p>

<h2>Solution 2</h2>

<p>Since I wanted to be able to run the command in the Git Bash terminal, I had to fix the problem.</p>

<p>First, if you don't already have a generic SSL certificate (local/test environment only - <strong>NEVER USE THIS IN PRODUCTION</strong>), grab one from <a href="http://curl.haxx.se/ca/cacert.pem">here</a>. I keep mine in the home folder which is <code>C:\Users\MyUserName\</code> on the PC.</p>

<p>Next, locate your PHP installation. In Windows, mine is at <code>C:\php-7.4</code>. Open <code>php.ini</code>, find the block show below and add the <em>absolute</em> path of the certificate to it:</p>

<pre><code>[curl]
; A default value for the CURLOPT_CAINFO option. This is required to be an
; absolute path.
curl.cainfo = C:\Users\MyUserName\cacert.pem
</code></pre>

<p>That's it. Now you should be able to make Guzzle requests again from your local terminal.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/upgrade-php-74-cli-mac</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/upgrade-php-74-cli-mac" />
    <title>Upgrade the PHP CLI to 7.4 on Mac</title>
    <published>2019-12-08T00:00:00+00:00</published>
    <updated>2019-12-08T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">On Mac, PHP can be easily upgraded to 7.4 with Homebrew. However, the command line may continue to show the previous version. Here&#039;s how to fix that.

Upgrade to PHP 7.4 with Homebrew on Mac is a very succinct article by @brendt_gd that boils it down to......</summary>
    <content type="html"><![CDATA[
        <p>On Mac, PHP can be easily upgraded to 7.4 with Homebrew. However, the command line may continue to show the previous version. Here's how to fix that.</p>

<p><a href="https://stitcher.io/blog/php-74-upgrade-mac">Upgrade to PHP 7.4 with Homebrew on Mac</a> is a very succinct article by <a href="https://twitter.com/brendt_gd">@brendt_gd</a> that boils it down to two simple commands: <code>brew update</code> and <code>brew upgrade php</code>.</p>

<p>The problem I ran into was that my PHP CLI in the terminal remained linked to the previous version. Checking the version, before and after running the brew command produced the same result:</p>

<pre><code class="language-bash">$ php -v
PHP 7.2.9 (cli) (built: Aug 21 2018 07:42:00) ( NTS )
</code></pre>

<p>Just to make sure 7.4 was actually installed, I ran the upgrade command again, then checked the actual location of PHP 7.4:</p>

<pre><code class="language-bash">$ brew upgrade php
Warning: php 7.4.0 already installed

$ ls /usr/local/etc/php/7.4
OK
</code></pre>

<p>To switch the PHP CLI to 7.4, first I ran Homebrew's unlink/link command:</p>

<pre><code class="language-bash">$ brew unlink php &amp;&amp; brew link php
</code></pre>

<p>This should produce an output similar to this:</p>

<pre><code class="language-bash">Unlinking /usr/local/Cellar/php/7.X... XX symlinks removed
Linking /usr/local/Cellar/php/7.4.0... 24 symlinks created
</code></pre>

<p>Finally, you need to export the proper path variable for the PHP executable in either <code>.bashrc</code> or <code>.zshrc</code>. These are typically located in your home (<code>~</code>) folder:</p>

<pre><code class="language-bash">$ cd ~
$ vi .zshrc
</code></pre>

<p>Locate the following (or similar) line...</p>

<pre><code class="language-bash">export PATH=/usr/local/php5/bin:$PATH
</code></pre>

<p>... and change it to:</p>

<pre><code class="language-bash">export PATH=/usr/local/bin/php:$PATH
</code></pre>

<blockquote>
  <p><strong>Note</strong><br />
  If you list the PHP executable...</p>

<pre><code class="language-bash">$ ls -al /usr/local/bin/php
/usr/local/bin/php -&gt; ../Cellar/php/7.4.0/bin/php
</code></pre>
  
  <p>... you'll notice that <code>/usr/local/bin/php</code> is a symlink pointing to <code>/usr/local/Cellar/php/7.4.0</code> which is the same location that was linked by Homebrew above.</p>
</blockquote>

<p>Finally, run <code>source .zshrc</code> to get the terminal to update its configuration.</p>

<p>For good measure, close the terminal window and open a fresh one. If you now run <code>php -v</code> you should be rewarded with this:</p>

<pre><code class="language-bash">$ php -v
PHP 7.4.0 (cli) (built: Nov 29 2019 16:18:44) ( NTS )
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/screen-recording-gif-workflow</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/screen-recording-gif-workflow" />
    <title>Mac Screen Recoding GIF Workflow</title>
    <published>2019-12-04T00:00:00+00:00</published>
    <updated>2019-12-04T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Are you a developer who wants to record part or all of your screen on a Mac, and then convert it to GIF to post on social media or elsewhere? Here&#039;s my personal workflow to achieve this.

The things I record most often are either in the browser or in......</summary>
    <content type="html"><![CDATA[
        <p>Are you a developer who wants to record part or all of your screen on a Mac, and then convert it to GIF to post on social media or elsewhere? Here's my personal workflow to achieve this.</p>

<p>The things I record most often are either in the browser or in some kind of text editor, mostly PHPStorm.</p>

<p>Please note that this is a <em>Mac-only</em> guide. I haven't needed to do this on a PC yet.</p>

<h2>Tools needed</h2>

<p><strong>QuickTime Player</strong> - For basic screen recordings you don't need any fancy software because OSX comes with a built-in tool for this, though it's not very obvious. This tool is <strong>QuickTime Player</strong>.</p>

<p><strong>Giphy</strong> - My tool of choice for converting a video to GIF is <a href="https://giphy.com/">giphy</a>. I believe in the past you could upload GIFs anonymously to giphy but that's no longer the case. I find that having an account is useful because you can reference your GIFs anytime you want. Here's my <a href="https://giphy.com/channel/chasingcode">Giphy channel</a> as an example.</p>

<p>(optional) <strong>PHPStorm</strong> - For code or script recordings, you can use your text editor of choice, but I prefer PHPStorm for the majority of my work. PHPStorm offers one feature that is very important for distraction-free screen recording, and that is presentation mode. In this mode, the current editor window covers the whole screen and all the menus are hidden.</p>

<h2>The workflow</h2>

<h3>1. Preparation</h3>

<p>Start the browser/text editor/app/document that you want to record.</p>

<p>Put the app in presentation mode if possible. Here are some instructions for my most used editors.</p>

<p><strong>PHPStorm</strong> - Go to <em>View > Appearance > Enter Presentation Mode</em>. To exit, hover the mouse pointer at the top of the screen to reveal the main menu, then <em>View > Appearance > Exit Presentation Mode</em>.</p>

<p><strong>VSCode</strong> - <em>View > Appearance > Full Screen</em>, then <em>View > Appearance > Zen Mode</em>. There's also the tabs area that I haven't found a menu option to toggle but you can avoid that by recording only part of the screen. Sorry but I'm not a power VSCode user - PHPStorm works really well out of the box for me, without endlessly customizing it and installing a few dozen plugins to get all the functionality I need.</p>

<h3>2. Start QuickTime Player</h3>

<p>Go to <em>File > New Screen Recording</em>. You may be asked to give QuickTime access to record your screen in System Preferences.</p>

<p>QuickTime's screen recorder, although very basic, offers some powerful tools. Among those, the ability to record the entire screen or only a portion of it. As part of the options, you can also choose to record mouse clicks or set a timer to make the recording start after a few seconds.</p>

<p>Recording a portion can be very handy when you want to capture only a certain part of the screen, while ignoring things like menus, scrollbars, irrelevant items on the screen, or other distractions.</p>

<p>To stop the QuickTime recording is a little tricky. I haven't found another way than to CMD-TAB back to QT, hit New Screen Recording again, then click the stop button when the toolbar appears at the bottom of the screen.</p>

<h3>3. Trimming the clip</h3>

<p>You can trim the clip immediately after recording (and before exporting) it. Typically I don't want very long pauses at the beginning or end, while I'm starting or stopping the recording. Hit <em>Edit > Trim</em> or CMD-T, then drag the yellow handles accordingly. There's a handy preview showing you the result.</p>

<p>It's also possible to trim the video after exporting it. To do that, open it with QuickTime (should be set as the default) from the exported location. Then go to <em>Edit > Trim</em> or CMD-T.</p>

<h3>4. Exporting the clip</h3>

<p>Once you've recorded your video, go to <em>File > Export As... > 4K</em> or <em>1080p</em>. For me 1080p is sufficient.</p>

<h3>5. Uploading to Giphy</h3>

<p>In Giphy, hit <em>Upload</em>, then add the video you created earlier.</p>

<p>I'm not sure what <em>Source URL</em> is, but I assume it's there if you upload a video that you didn't author yourself, which is usually not the case for screen recordings.</p>

<p>I recommend tagging the clip, using comma separated terms, such as <code>code editor, ide, php, phpstorm</code>.</p>

<p>Finally hit <em>Upload to Giphy</em>. Once it finishes uploading it directs you to the GIF's page where you can share it to social media or, my preference, <em>Copy link</em>. This option opens a dialog with several flavors of URLs. The "Short Link" is handy for sharing on Twitter.</p>

<h2>Update: 10 January 2020</h2>

<p>I came across <a href="https://getkap.co/">Kap</a>, an "open-source screen recorder built with web technology" and I changed my workflow to accommodate it. It's simpler than QuickTime, it can capture portions of the screen, and it exports GIFs directly, so I can bypass Giphy. I highly recommend it. Mac only.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/install-or-renew-ssl-certificate-ubuntu-nginx</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/install-or-renew-ssl-certificate-ubuntu-nginx" />
    <title>How to Install or Renew a SSL Certificate in Ubuntu with Nginx</title>
    <published>2019-11-23T00:00:00+00:00</published>
    <updated>2019-11-23T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">To my consternation, the SSL certificate on my pet project 1secret.app expired when I least expected it, leaving the site in that dubious state where every browser displays an ugly security warning, essentially scaring away visitors. And since all my......</summary>
    <content type="html"><![CDATA[
        <p>To my consternation, the SSL certificate on my pet project <a href="https://1secret.app/">1secret.app</a> expired when I least expected it, leaving the site in that dubious state where every browser displays an ugly security warning, essentially scaring away visitors. And since all my <code>http</code> traffic is automatically redirected to <code>https</code>, you couldn't access the site non-securely either.</p>

<p>So how did it end up here? Well, I let my <a href="https://forge.laravel.com/">Forge</a> subscription expire in the hope that I will score a Black Friday deal. After all, Forge is not critical in day-to-day operations. To me it's mostly useful for provisioning new sites. Now though, it turns out that Forge also manages SSL certificates, renewing them automatically. How does it do that? It's a bit of a mystery but I couldn't rely on it this time.</p>

<p>Fortunately this story will be short. Because I use <a href="https://letsencrypt.org/">Letsencrypt</a>, I headed there for help, then I ended up on <a href="https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx">Certbot</a>, an amazing automated tool that handles all the SSL heavy lifting for you.</p>

<p>If you hit that link, you'll notice it's already pre-configured with my own environment: <strong>Ubuntu 18.04</strong> running <strong>Nginx</strong>. I literally followed the instructions on this page to a T.</p>

<p>The only thing to pay attention to is Step 4 where you have the options of either letting Certbot configure Nginx automatically with the new certificate or just getting the certificate (leaving you with the task to configure Nginx appropriately). To avoid any drama, I chose option 1 and Certbot did an amazing job of auto-configuring everything.</p>

<blockquote>
  <p><strong>Note 1</strong> During Step 4 you'll be asked for an email address. It's up to you if you want to provide one. See below.</p>
</blockquote>

<pre><code class="language-bash">Enter email address (used for urgent renewal and security notices)

If you really want to skip this, you can run the client with
--register-unsafely-without-email but make sure you then backup your account key
from /etc/letsencrypt/accounts
</code></pre>

<blockquote>
  <p><strong>Note 2</strong> If you are running multiple sites on the same server (like I do), don't worry. Certbot scans for all the sites and asks you for which domains you'd like a certificate.</p>
</blockquote>

<pre><code class="language-bash">Which names would you like to activate HTTPS for?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: 1secret.app
2: www.1secret.app
3: allmy.sh
4: www.allmy.sh
5: ...
6: ...
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate numbers separated by commas and/or spaces, or leave input
blank to select all options shown (Enter 'c' to cancel): 1,2
</code></pre>

<blockquote>
  <p><strong>Note 3</strong> A good tool to check the status of your SSL certificate is linked at the bottom of the Certbot instructions: <a href="https://www.ssllabs.com/ssltest/">SSL Labs</a>.</p>
</blockquote>

<p>There's really nothing more to it. If you made it this far, chances are you were able to install or renew your SSL certificate(s).</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/fix-vagrant-homestead-cant-create-database</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/fix-vagrant-homestead-cant-create-database" />
    <title>Fix Vagrant Homestead &quot;Can&#039;t create database&quot; Error</title>
    <published>2019-11-14T00:00:00+00:00</published>
    <updated>2019-11-14T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Ever ran out of disk space on your Vagrant/Homestead database partition? Neither did I... until recently. Here&#039;s how it happened and how I fixed it.



The image above is a screenshot of the error thrown by my HeidiSQL (Windows) DB client.

I had just......</summary>
    <content type="html"><![CDATA[
        <p>Ever ran out of disk space on your Vagrant/Homestead database partition? Neither did I... until recently. Here's how it happened and how I fixed it.</p>

<h2>How did this even happen?</h2>

<p>The image above is a screenshot of the error thrown by my HeidiSQL (Windows) DB client.</p>

<p>I had just imported a large amount of data into a few different databases for a Laravel project. I use <a href="https://laravel.com/docs/6.x/homestead">Homestead</a> as my local dev environment for Laravel projects on both Mac and Windows.</p>

<p>Now this error in particular is not very helpful. It states that it can't create the database, without any context. It took some investigating before I found out what really caused it.</p>

<p>As you will later learn, Homestead creates a separate partition for storing the databases, and it provisions 10GB for this purpose. That should be more than enough for any amount of local apps, right? Well, sure, until you need to import production data on which to test certain functionality that you can't test without actual, live data.</p>

<blockquote>
  <p><strong>Sidenote</strong> I'm well aware that one way to handle this would be to write seeders but that particular project wasn't well suited for that. I needed not just live data but <em>historical</em> data as well. Finally, it was a lot quicker to import from prod than to write complex seeders.</p>
</blockquote>

<h2>How do you even fix this?</h2>

<p><strong>Disclaimer</strong> This process was a lot of trial-and-error and I bungled some steps, but as I've mentioned before, my specialty is not sysadmin and the end result is close to what I wanted.</p>

<p><strong>WARNING</strong> Try this at your own risk and only in your local environment, never in production, unless you really know what you're doing. But then you wouldn't be reading this article üòâ</p>

<p>First thing was to find out more about this error. So I <code>SSH</code>ed into my Vagrant box (<code>vagrant ssh</code>) and ran <code>perror</code> on error <code>1006</code>:</p>

<pre><code class="language-bash">$ perror 1006

MySQL error code 1006 (ER_CANT_CREATE_DB): Can't create database '%-.192s' (errno: %d)
</code></pre>

<p>Digging around the web I found a suggestion to fix this using <code>mysql_upgrade</code> (spoiler: it doesn't):</p>

<pre><code class="language-bash">$ mysql_upgrade

Checking if update is needed.
Checking server version.
Running queries to upgrade MySQL server.
mysql_upgrade: [ERROR] 3: Error writing file './mysql/#sql-4876_5.frm' (Errcode: 28 - No space left on device)
</code></pre>

<p>Let's run <code>perror</code> again, on error <code>28</code> this time:</p>

<pre><code class="language-bash">$ perror 28

OS error code  28:  No space left on device
</code></pre>

<p>Ah now I'm getting somewhere. Let me check the disk space real quick (more helpful <a href="/blog/useful-linux-commands/">Linux commands here</a>):</p>

<pre><code class="language-bash">$ df -h

Filesystem                               Size  Used Avail Use% Mounted on
udev                                     967M     0  967M   0% /dev
tmpfs                                    200M  7.0M  193M   4% /run
/dev/mapper/homestead--vg-root            18G  5.1G   12G  31% /
tmpfs                                    997M  8.0K  997M   1% /dev/shm
tmpfs                                    5.0M     0  5.0M   0% /run/lock
tmpfs                                    997M     0  997M   0% /sys/fs/cgroup
/dev/mapper/homestead--vg-mysql--master  9.8G  9.3G     0 100% /homestead-vg/master
vagrant                                  953G  167G  786G  18% /vagrant
home_vagrant_dbone                       953G  167G  786G  18% /home/vagrant/dbone
home_vagrant_dbtwo                       953G  167G  786G  18% /home/vagrant/dbtwo
home_vagrant_dbthree                     953G  167G  786G  18% /home/vagrant/dbthree
...
tmpfs                                    200M     0  200M   0% /run/user/1000
</code></pre>

<p>Note that I anonymized the actual databases to "dbone, dbtwo, etc" for this example.</p>

<p>The line <code>/dev/mapper/homestead--vg-mysql--master  9.8G  9.3G     0 100% /homestead-vg/master</code> indicates that the MySQL partition is full.</p>

<p>How do I know it is the DB partition? The database files are usually stored in <code>/var/lib/mysql</code> on Ubuntu Linux.</p>

<pre><code class="language-bash">$ ls -al /var/lib/mysql

lrwxrwxrwx 1 root root 20 Sep 29 12:53 /var/lib/mysql -&gt; /homestead-vg/master
</code></pre>

<p>This shows that <code>/var/lib/mysql</code> is aliased to <code>/homestead-vg/master</code>.</p>

<p>Run again with trailing <code>/</code> to see the actual contents:</p>

<pre><code class="language-bash">$ ls -al /var/lib/mysql/

total 188552
drwxr-xr-x 23 mysql mysql     4096 Nov  9 20:23 .
drwxr-xr-x  3 root  root      4096 Sep 29 12:53 ..
-rw-r-----  1 mysql mysql       56 Sep 29 12:52 auto.cnf
drwxr-x---  2 mysql mysql     4096 Nov  9 18:35 dbone
drwxr-x---  2 mysql mysql     4096 Nov  9 18:45 dbtwo
drwxr-x---  2 mysql mysql     4096 Nov  9 18:49 dbthree
drwxr-x---  2 mysql mysql     4096 Nov  4 14:27 dbfour
-rw-r--r--  1 root  root         0 Sep 29 12:52 debian-5.7.flag
drwxr-x---  2 mysql mysql    12288 Nov  9 17:31 dbfive
drwxr-x---  2 mysql mysql     4096 Sep 29 12:53 homestead
-rw-r-----  1 mysql mysql      895 Nov  5 15:11 ib_buffer_pool
-rw-r-----  1 mysql mysql        0 Nov  9 19:53 ib_buffer_pool.incomplete
-rw-r-----  1 mysql mysql 79691776 Nov  9 20:18 ibdata1
-rw-r-----  1 mysql mysql 50331648 Nov  9 20:18 ib_logfile0
-rw-r-----  1 mysql mysql 50331648 Nov  9 19:11 ib_logfile1
-rw-r-----  1 mysql mysql 12582912 Nov  9 20:23 ibtmp1
...
drwx------  2 root  root     16384 Sep 29 12:53 lost+found
drwxr-x---  2 mysql mysql     4096 Nov  9 20:23 mysql
...
drwxr-x---  2 mysql mysql     4096 Nov  9 20:23 performance_schema
...
drwxr-x---  2 mysql mysql    12288 Sep 29 12:52 sys
...
</code></pre>

<p>Let's check how much space my databases take. The following command lists all the databases and their sizes on disk, sorted by size in descending order.</p>

<pre><code class="language-bash">$ sudo du -ch -d 1 /var/lib/mysql/ | sort -shr

9.3G    /var/lib/mysql/
9.3G    total
4.0G    /var/lib/mysql/dbone
1.4G    /var/lib/mysql/dbtwo
1.1G    /var/lib/mysql/dbthree
833M    /var/lib/mysql/dbfour
831M    /var/lib/mysql/dbfive
495M    /var/lib/mysql/x
376M    /var/lib/mysql/xx
133M    /var/lib/mysql/xxx
75M     /var/lib/mysql/xxxx
25M     /var/lib/mysql/mysql
20M     /var/lib/mysql/xxxxx
2.2M    /var/lib/mysql/xxxxxx
1.1M    /var/lib/mysql/performance_schema
676K    /var/lib/mysql/sys
16K     /var/lib/mysql/lost+found
8.0K    /var/lib/mysql/xxxxxxx
8.0K    /var/lib/mysql/xxxxxxxx
8.0K    /var/lib/mysql/xxxxxxxxx
8.0K    /var/lib/mysql/xxxxxxxxxx
8.0K    /var/lib/mysql/homestead
8.0K    /var/lib/mysql/xxxxxxxxxxx
</code></pre>

<p>Next, I thought I should dig into the <a href="https://github.com/laravel/settler/blob/master/scripts/provision.sh">Homestead provisioning script</a>. Line 372 mentions that the MySQL storage partition is 10GB and can be expanded with <code>lvextend</code>. Looking at the total disk usage it's clear that I was hitting the limit.</p>

<h2>Increasing the size of the database partition</h2>

<p>So now I know that I need to increase the size of the partition. Let's go with 20GB. Here's a <a href="https://linux.die.net/man/8/lvextend">good explainer on lvextend</a>.</p>

<p><strong>Take 1</strong> What is the logical volume? After some trial-error, I figure it's <code>homestead-vg/thinpool</code> (get it from the Homestead provisioning script).</p>

<pre><code class="language-bash">$ sudo lvextend -L +10G homestead-vg/thinpool

  Size of logical volume homestead-vg/thinpool_tdata changed from 40.00 GiB (10240 extents) to 50.00 GiB (12800 extents).
  Logical volume homestead-vg/thinpool_tdata successfully resized.
</code></pre>

<p><strong>Take 2</strong> Read some more <a href="https://www.rootusers.com/how-to-increase-the-size-of-a-linux-lvm-by-expanding-the-virtual-machine-disk/">here</a>.
Actually no, it's <code>homestead-vg/mysql-master</code>. It comes from <code>homestead--vg-mysql--master</code>. The previous command just increased the size of my entire Vagrant box. Let's try this again...</p>

<pre><code class="language-bash">$ sudo lvextend -L +10G homestead-vg/mysql-master

  Size of logical volume homestead-vg/mysql-master changed from 10.00 GiB (2560 extents) to 20.00 GiB (5120 extents).
  Logical volume homestead-vg/mysql-master successfully resized.
</code></pre>

<p><strong>Take 3</strong> Extend the logical volume over the partition at <code>/dev/sda1</code>. Probably this is what I should have done initially.</p>

<pre><code class="language-bash">$ sudo lvextend homestead-vg/mysql-master /dev/sda1

  WARNING: Sum of all thin volume sizes (79.29 GiB) exceeds the size of thin pool homestead-vg/thinpool and the amount of free space in volume group (59.29 GiB).
  WARNING: You have not turned on protection against thin pools running out of space.
  WARNING: Set activation/thin_pool_autoextend_threshold below 100 to trigger automatic extension of thin pools before they get full.
  Size of logical volume homestead-vg/mysql-master changed from 20.00 GiB (5120 extents) to 79.29 GiB (20299 extents).
  Logical volume homestead-vg/mysql-master successfully resized.
</code></pre>

<p>Oops, I think I might have accidentally increased the size of the MySQL partition to 80GB. Which is cool in my case, I have plenty of disk space on that particular dev machine.</p>

<pre><code class="language-bash">$ sudo fdisk -l

...
Disk /dev/mapper/homestead--vg-mysql--master: 20 GiB, 21474836480 bytes, 41943040 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 65536 bytes / 65536 bytes
</code></pre>

<p>For some reason the MySQL database partition is still taking 20GB. Hmm... List the logical volumes:</p>

<pre><code class="language-bash">$ sudo lvdisplay

...
--- Logical volume ---
  LV Path                /dev/homestead-vg/mysql-master
  LV Name                mysql-master
  VG Name                homestead-vg
  LV UUID                rYcEGB-dEB2-xJ4F-i8n4-u1KX-R7CU-xHmMhL
  LV Write Access        read/write
  LV Creation host, time vagrant, 2019-09-29 12:53:09 +0000
  LV Pool name           thinpool
  LV Status              available
  # open                 1
  LV Size                79.29 GiB
  Mapped size            12.03%
  Current LE             20299
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     256
  Block device           253:6
</code></pre>

<p>Finally I found out that I needed to resize the file system so it can use the additional space:</p>

<pre><code class="language-bash">$ sudo resize2fs /dev/homestead-vg/mysql-master

resize2fs 1.44.1 (24-Mar-2018)
Filesystem at /dev/homestead-vg/mysql-master is mounted on /homestead-vg/master; on-line resizing required
old_desc_blocks = 2, new_desc_blocks = 10
The filesystem on /dev/homestead-vg/mysql-master is now 20786176 (4k) blocks long.
</code></pre>

<p>Check the partition size again:</p>

<pre><code class="language-bash">$ sudo fdisk -l

...
Disk /dev/mapper/homestead--vg-mysql--master: 79.3 GiB, 85140176896 bytes, 166289408 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 65536 bytes / 65536 bytes
</code></pre>

<p>Check the disk size one final time:</p>

<pre><code class="language-bash">$ df -h

Filesystem                               Size  Used Avail Use% Mounted on
udev                                     967M     0  967M   0% /dev
tmpfs                                    200M  7.0M  193M   4% /run
/dev/mapper/homestead--vg-root            18G  5.1G   12G  31% /
tmpfs                                    997M  8.0K  997M   1% /dev/shm
tmpfs                                    5.0M     0  5.0M   0% /run/lock
tmpfs                                    997M     0  997M   0% /sys/fs/cgroup
/dev/mapper/homestead--vg-mysql--master   78G  9.3G   66G  13% /homestead-vg/master
vagrant                                  953G  167G  786G  18% /vagrant
home_vagrant_dbone                       953G  167G  786G  18% /home/vagrant/dbone
home_vagrant_dbtwo                       953G  167G  786G  18% /home/vagrant/dbtwo
home_vagrant_dbthree                     953G  167G  786G  18% /home/vagrant/dbthree
...
tmpfs                                    200M     0  200M   0% /run/user/1000
</code></pre>

<p>Well now it's way bigger than I wanted (80GB instead of 20GB) but at least it <em>should</em> have more space than I'll ever need.</p>

<h2>Conclusion</h2>

<p>Don't try this at home kids. Or do, rather, as long as you stay away from production and limit it to your Vagrant environment. Keep in mind that starting at <strong>Take 1</strong> above I screwed up some steps by running an additional resize or two, which happened because I didn't understand correctly how logical and physical volume resizing works. I still don't üò¨ but I was able to correct the problem and continue working.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/fix-laravel-no-input-file-specified</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/fix-laravel-no-input-file-specified" />
    <title>How to Fix Laravel&#039;s Dreaded &quot;No input file specified&quot; Error</title>
    <published>2019-11-10T00:00:00+00:00</published>
    <updated>2019-11-10T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">The first few times I ran into the &quot;No input file specified&quot; error while trying to get a new Laravel project working in my local environment, it took me a while to figure out.

Fear not, Laravel beginners. Despite having started more Laravel projects......</summary>
    <content type="html"><![CDATA[
        <p>The first few times I ran into the "No input file specified" error while trying to get a new Laravel project working in my local environment, it took me a while to figure out.</p>

<p>Fear not, Laravel beginners. Despite having started more Laravel projects than I can count, I'm still tripped out by this error, if I'm not paying attention.</p>

<p><strong>Disclosure</strong> My local environment has always been <a href="https://laravel.com/docs/6.x/homestead">Homestead/Vagrant</a> on a Mac or PC. I've never used Valet, Docker or other methods. As such, these tips may only apply to a Homestead environment.</p>

<h2>The fix</h2>

<p>More often than not, the "No input file specified" error happens when you don't map your local project to the Vagrant folder properly in your <code>Homestead.yaml</code> file.</p>

<p>To simplify things, I'll just show you the relevant portions of my own <code>Homestead.yaml</code>.</p>

<pre><code class="language-yaml">folders:
    - map: ~/source/laravel/my-awesome-project-1
      to: /home/vagrant/my-awesome-project-1
    - map: ~/source/laravel/my-awesome-project-2
      to: /home/vagrant/my-awesome-project-2

sites:
    - map: awesomeproject1.test
      to: /home/vagrant/my-awesome-project-1/public
    - map: awesomeproject2.test
      to: /home/vagrant/my-awesome-project-2/public

databases:
    - awesomeproject1
    - awesomeproject2
</code></pre>

<p>For my latest project, for example, I had set up the <code>sites</code> and <code>databases</code> sections properly, but because I had a lot of sites and projects, I forgot to scroll to the <code>folders</code> section towards the top of the file. So when I loaded up the test site's URL <code>awesomeproject1.test</code> in my browser, I was presented with the always-charming "No input file specified" message.</p>

<p>The fix was to add the relevant entries for <code>map</code> and <code>to</code>.</p>

<p><strong>Heads up!</strong> After making changes to <code>Homestead.yaml</code>, if Vagrant is running, just run <code>vagrant reload --provision</code> to get it to reload and integrate your changes. The <code>--provision</code> flag also applies if, say, you decide to change the database.</p>

<h2>Digging a little deeper</h2>

<p>First of all, trying to be clever can bite you. I would suggest not changing or messing with the default Homestead/Vagrant folder structure <code>/home/vagrant/projectname</code>. I think I did that when I was learning Laravel and it only caused issues.</p>

<p>Next, here's a little insight into how my local folder structure is set up, by looking at my <code>folders</code> YAML section.</p>

<pre><code class="language-yaml">folders:
    - map: ~/source/laravel/my-awesome-project-1
      to: /home/vagrant/my-awesome-project-1
</code></pre>

<p>This tells Vagrant to map the local (Mac, PC, etc) project folder (<code>~/source/laravel/my-awesome-project-1</code> in my case) to the <code>/home/vagrant/my-awesome-project-1</code> folder on the Vagrant box.</p>

<p>Your local project structure will very likely differ from mine so take that into account. Mine is a little weird - all my projects go into the <code>source</code> directory, but inside that I have them grouped up by technology, so there are sub-directories for <code>laravel</code>, <code>vue</code>, etc. Yeah, I'm not sure either if this is a smart way to organize projects but it's in my muscle memory so it works for me.</p>

<p>Finally, I would discourage you from changing the Vagrant structure away from <code>/home/vagrant/projectname</code>. Or if you have to, keep in mind that you'll have to make a corresponding change to the <code>sites</code> section (and then re-provision the Vagrant box). Here's an example:</p>

<p>Let's say you want to organize your projects in Vagrant inside a <code>projects</code> sub-directory (why tho?). Then you'd end up with the following config:</p>

<pre><code class="language-yaml">folders:
    - map: ~/source/laravel/my-awesome-project-1
      to: /home/vagrant/projects/my-awesome-project-1
      ...

sites:
    - map: awesomeproject1.test
      to: /home/vagrant/projects/my-awesome-project-1/public
      ...

databases:
    - awesomeproject1
</code></pre>

<p><strong>Final tip</strong> If you're having trouble loading the <code>awesomeproject1.test</code> URL in your browser, make sure you've configured the test domain properly in your <code>hosts</code> file. On a Mac you'll find it at <code>/etc/hosts</code>, while on a PC it's usually at <code>C:\Windows\System32\drivers\etc\hosts</code> (reason #63421 why I don't like coding on a PC). Edit the file and add a new entry like so:</p>

<pre><code class="language-bash">192.168.10.10 awesomeproject1.test
192.168.10.10 awesomeproject2.test
</code></pre>

<p>Homestead is configured by default to run on <code>192.168.10.10</code>, it's right at the top of <code>Homestead.yaml</code>. All your local sites will run on the same IP.</p>

<p>And that's it. Hopefully this will help you get your Laravel project started quicker and with less headache!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/improve-lighthouse-accessibility-score-easy-fixes</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/improve-lighthouse-accessibility-score-easy-fixes" />
    <title>Improve Your Site&#039;s Lighthouse Accessibility Score (and Performance) with Some Easy Fixes</title>
    <published>2019-11-04T00:00:00+00:00</published>
    <updated>2019-11-04T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Accessibility (or a11y as it is also known) is not just a fancy buzzword that you&#039;ve been hearing a lot about lately. It turns out that underperforming in this category can affect not just your site&#039;s performance but also its Google search ranking.......</summary>
    <content type="html"><![CDATA[
        <p>Accessibility (or a11y as it is also known) is not just a fancy buzzword that you've been hearing a lot about lately. It turns out that underperforming in this category can affect not just your site's performance but also its Google search ranking.</p>

<p>Ideally you should aim for your entire site to be performant but sometimes you gotta pick &amp; choose. Under most circumstances, you want to focus on your landing page because that's where most visitors land, followed closely by other popular pages.</p>

<p>In development, as in life, priorities dictate what piece of your app will receive the most attention. While building <a href="https://1secret.app/">1Secret.app</a> I thought I should take a look at the landing page (after a recent revamp) to see how it scores in <a href="https://developers.google.com/web/tools/lighthouse/">Google's Lighthouse performance test</a>.</p>

<p>I'm primarily a Mozilla Firefox user but I still prefer to use Chrome's dev tools for various reasons. There is one thing where Chrome bests Firefox, and that is the performance test. You can access that in <code>Dev tools &gt; Audits &gt; Run audits</code>. It presents you with a bunch of scores (as shown in the hero image above) and a long list of well-documented suggested fixes.</p>

<p>My landing page got a lukewarm 69/100 score for accessibility, so I decided to spend a few minutes to see if there are any quick fixes I can do to improve this score.</p>

<h2>Remove Bootstrap</h2>

<p>When I first started building <a href="https://1secret.app/">1Secret.app</a> I employed Bootstrap but also pulled in <a href="https://tailwindcss.com/">TailwindCSS</a>. Needless to say, I soon started having regrets for using Bootstrap but I was too far along to bother removing it. So I used both frameworks in parallel. Which is totally legit BTW. However, performance will suffer as a result, since Bootstrap is very heavy, both in terms of CSS and JS. And not just the framework's own JS, but also 3rd party dependencies such as jQuery, Lodash and popper.js.</p>

<p>One day I decided to take the time and completely remove Bootstrap,. It took a few hours of painstaking work but in the end I shaved off a huge chunk from my CSS/JS bundles.</p>

<p>I thought Bootstrap was ancient history until Lighthouse informed me that I was referencing a chunky bit of JS that was affecting my loading time. Guess what, I had forgotten to remove the reference to Bootstrap's main library, hosted on their CDN. Basically I was still making the request to load the library, despite not using it. Duh.</p>

<p>Luckily that's a very easy fix. I suspect it's what pushed my Performance score from 98 to 99.</p>

<h2>Lazy load images below the fold</h2>

<p>One good suggestion that Lighthouse gave me is to lazy load the images below the fold. It's a very good point but unfortunately lazy loading is not yet implemented consistently across all browsers. So I made a halfhearted attempt at it, by adding Chrome's new <code>loading</code> attribute. I got that from <a href="https://web.dev/native-lazy-loading/">this article</a>.</p>

<p>In my Laravel code this is what such an image looks like:</p>

<pre><code class="language-html">&lt;img loading="lazy" src="{{ asset('svg/login-chapters.svg') }}" alt="Share secrets with {{ config('app_name') }}"&gt;
</code></pre>

<p>Unfortunately this doesn't seem to work as I can't see the attribute being rendered by the browser, and Lighthouse still says it's a problem. I'll chalk this down as a failure. I could write some fancy JS to handle this but I hate overcomplicated solutions so I'll wait until proper browser support is implemented consistently.</p>

<h2>Add <code>aria-label</code> to the site logo</h2>

<p>My site's logo at the top left of every page is an image surrounded by an anchor. Because the anchor doesn't contain any text, it is inaccessible. So I added an <code>aria-label</code> attribute to describe what the link is about. Here's my Laravel before &amp; after snippet.</p>

<p><strong>Before</strong></p>

<pre><code class="language-html">&lt;a class="nav__logo" href="{{ url('/') }}" title="{{ config('app.name', '1Secret') }}" style="z-index: 1;"&gt;
    @include('partials.icons.1secret-logo', ['viewBox' =&gt; '512 512', 'width' =&gt; '42', 'height' =&gt; '42', 'class' =&gt; 'mr-2'])
&lt;/a&gt;
</code></pre>

<p><strong>After</strong></p>

<pre><code class="language-html">&lt;a aria-label="Share a secret with {{ config('app.name') }}" class="nav__logo" href="{{ url('/') }}" title="{{ config('app.name') }}"&gt;
    @include('partials.icons.1secret-logo', ['viewBox' =&gt; '512 512', 'width' =&gt; '42', 'height' =&gt; '42', 'class' =&gt; 'mr-2'])
&lt;/a&gt;
</code></pre>

<p>I also happened upon another problem here which was two nested anchor tags that made no sense. That's what happens sometimes when you review your own code.</p>

<h2>Add <code>title</code> to the main nav hamburger menu</h2>

<p>Similarly, my main navigation contains a hamburger menu that renders on mobile viewports. That menu is a button containing an SVG image so there's no descriptive text for accessibility. Adding <code>title="Main menu"</code> takes care of the problem.</p>

<h2>Mission accomplished</h2>

<p>These tiny tweaks were enough to boost the landing page's Accessibility score from 69 to 95.</p>

<p>I won't pretend that <a href="https://1secret.app/">1Secret.app</a> is fully accessible or maximally performant across all pages but this is a start. More importantly, this little exercise showed once again that following even a few of Lighthouse's suggestions can make a pretty significant impact on your site's performance and accessibility, which in turn has the potential to boost it higher in Google's search rankings.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/install-specific-php-version-windows-10</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/install-specific-php-version-windows-10" />
    <title>How to Install the Latest (or Specific) Version of PHP in Windows 10</title>
    <published>2019-10-31T00:00:00+00:00</published>
    <updated>2019-10-31T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I won&#039;t make a secret of the fact that I just don&#039;t like coding open source on Windows. It makes really hard to get all the necessary tools in working order, and then it&#039;s super slow for common and frequent tasks such as running composer or npm/yarn.......</summary>
    <content type="html"><![CDATA[
        <p>I won't make a secret of the fact that I just don't like coding open source on Windows. It makes really hard to get all the necessary tools in working order, and then it's super slow for common and frequent tasks such as running composer or npm/yarn. However, circumstances sometimes dictate that one makes do with the hand they are dealt. So this dude abides... Hence this little guide for installing the latest or a specific version of PHP in Windows 10.</p>

<h2>1. Download PHP</h2>

<p>Download your desired PHP version from the <a href="https://windows.php.net/download/">official repository</a>. At the time of writing this, I used <code>PHP 7.3 VC15 x64 Non Thread Safe</code>.</p>

<p><img src="/assets/img/2019-10-31-download-php.png" alt="Download PHP" /></p>

<h2>2. Move the folder</h2>

<p>Unzip the zip archive, rename the folder to something like <code>php</code> or if you want to have multiple versions of PHP, <code>php-7.3</code>, and move it to your <code>C:\</code> folder.</p>

<h2>3. Alias it in bash</h2>

<p>Open your bash terminal of choice. I use Zshell.</p>

<p>I maintain a separate <code>.aliases</code> file in my home folder.</p>

<p>Add a new entry (or change the existing alias) for the new PHP executable.</p>

<pre><code class="language-bash">alias php="/mnt/c/php-7.3/php.exe"
</code></pre>

<p>In your <code>.bashrc</code> or <code>.zshrc</code> make sure this line exists:</p>

<pre><code class="language-bash">source ~/.aliases
</code></pre>

<p>Restart your terminal (or run <code>source ~/.bashrc</code> or <code>source ~/.zshrc</code>) and check the PHP version:</p>

<pre><code class="language-bash">$ php -v
PHP 7.3.8 (cli) (built: Jul 30 2019 12:44:08) ( NTS MSVC15 (Visual C++ 2017) x64 )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.3.8, Copyright (c) 1998-2018 Zend Technologies
</code></pre>

<h2>4. <code>php.ini</code> configuration</h2>

<p>There are likely a few things you might want to configure in <code>php.init</code> to bring it in line with your previous config, or to make it run properly. Here are some of the things I do.</p>

<p>In the php folder, copy <code>php.ini.development</code> to <code>php.ini</code>.</p>

<p>Increase <code>memory_limit</code> to <code>1G</code>.</p>

<p>Increase <code>post_max_size</code> and <code>upload_max_filesize</code> to whatever works for you, typically higher than the default 8M and 2M, respectively. I typically set my <code>upload_max_filesize</code> to 64M.</p>

<p>Uncomment the line <code>;extension_dir = "ext"</code> by removing the <code>;</code>.</p>

<p>In the <code>Dynamic Extensions</code> section enable the following (YMMV - no need to enable all database extensions):</p>

<pre><code>extension=curl
extension=fileinfo
extension=gd2
extension=mbstring
extension=openssl
extension=pdo_mysql
extension=pdo_pgsql
extension=pdo_sqlite
extension=sockets
extension=sqlite3
extension=xmlrpc
</code></pre>

<h2>Final thoughts</h2>

<p>This should be sufficient to allow you to run PHP in your Windows (bash) terminal of choice. You can switch versions either by re-aliasing the <code>php</code> command, or by creating version-specific aliases (for example <code>php72</code>).</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/move-site-to-different-domain</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/move-site-to-different-domain" />
    <title>How to Move a Site Provisioned With Laravel Forge to a Different Domain</title>
    <published>2019-10-27T00:00:00+00:00</published>
    <updated>2019-10-27T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">

I&#039;ve been working on a SaaS product and I&#039;m close to an official launch, but based on preliminary user feedback I decided to rebrand the site to a new domain name. The previous domain was rather unfortunate - sikrt.com - what I thought was catchy but......</summary>
    <content type="html"><![CDATA[
        <h2>Background</h2>

<p>I've been working on a SaaS product and I'm close to an official launch, but based on preliminary user feedback I decided to rebrand the site to a new domain name. The previous domain was rather unfortunate - sikrt.com - what I thought was catchy but ultimately proved to be confusing and hard to remember.</p>

<p>Luckily it's a lot easier to rebrand when you haven't yet launched. So I found an objectively much better domain - <a href="https://1secret.app">1secret.app</a> and I embarked on the arduous journey of moving the old site over to the new domain. The process itself is not incredibly complicated but, for a dev who prefers not to deal with devops, I ran into 
 a couple sticking points.</p>

<p>My sites are deployed with <a href="https://forge.laravel.com">Laravel Forge</a> and hosted on <a href="https://www.linode.com/">Linode</a>. I also use a few 3rd party services such as Google Analytics &amp; Recaptcha, and Mailgun.</p>

<p>Here, I'm documenting the steps I took to migrate to the new domain.</p>

<h2>1. Setup the new site in Forge</h2>

<p><strong>New site</strong></p>

<p>Create the new site by going to <em>Servers</em>, then adding a new <em>Root Domain</em>. In my case that would be <code>1secret.app</code>.</p>

<p><img src="/assets/img/2019-10-27-forge-create-new-site.png" alt="Create a new site in Forge" /></p>

<p><strong>Attach the repo</strong></p>

<p>Next, attach the Github/Gitlab/etc repository where your site's code is located.</p>

<p><strong>Copy environment</strong></p>

<p>There's one more thing to do, which is to copy the old environment (<code>.env</code>) to the new site. For a Laravel project, that would be everything below the DB section since I'm keeping the same database, although you should change that as well if you decide to go with a new database.</p>

<p>Keeping the same database allows me to skip migrating the new one and importing the old data into it.</p>

<h2>2. Set up DNS records in the domain registrar</h2>

<p>My domain registrar is Namecheap.</p>

<p>Assuming you've already bought the new domain, click your domain, then <em>Manage > Advanced DNS > Add new record</em>.</p>

<p>Create two new <em>A Record</em> records:</p>

<table>
<thead>
<tr>
  <th>Type</th>
  <th>Host</th>
  <th>Value</th>
  <th>TTL</th>
</tr>
</thead>
<tbody>
<tr>
  <td>A Record</td>
  <td>*</td>
  <td>104.200.17.161</td>
  <td>Automatic</td>
</tr>
<tr>
  <td>A Record</td>
  <td>@</td>
  <td>104.200.17.161</td>
  <td>Automatic</td>
</tr>
</tbody>
</table>

<p>Note that <code>104.200.17.161</code> is the IP of <code>1secret.app</code> and you can get that either by pinging the domain or from Forge (under Sites).</p>

<p>Delete the existing CNAME Record and URL Redirect Record that were created automatically by Namecheap. These would be:</p>

<table>
<thead>
<tr>
  <th>Type</th>
  <th>Host</th>
  <th>Value</th>
  <th>TTL</th>
</tr>
</thead>
<tbody>
<tr>
  <td>CNAME Record</td>
  <td>www</td>
  <td>parkingpage.namecheap.com.</td>
  <td>30 min</td>
</tr>
<tr>
  <td>URL Redirect Record</td>
  <td>@</td>
  <td>http://www.1secret.app/</td>
  <td>Unmasked</td>
</tr>
</tbody>
</table>

<p>Now wait for DNS to propagate (up to 48 hours, usually takes a lot less, perhaps 30 min).</p>

<h2>3. Continue setting things up in Forge</h2>

<p><strong>Set up SSL</strong></p>

<p>Once the DNS has propagated, it's time to set up SSL.</p>

<p>Go to <em>Sites > 1secret.app > SSL > LetsEncrypt > Obtain Certificate</em>. Let Forge do its magic.</p>

<p>**(Optional) Create a new database **</p>

<p>If you decide to use a fresh database, or change the name, go to <em>Servers > Database > (dbname) > Add Database</em>.</p>

<p>In your favorite DB client export the old DB, then import it into the new DB.</p>

<p><strong>Start the queue worker</strong></p>

<p><em>Sites > (1secret) > Queue > Start Worker</em> (with default values).</p>

<p><strong>Start the scheduler</strong></p>

<p>To start Laravel's scheduler we need to create a new scheduled job. Go to <code>Servers &gt; Scheduler</code> and add the following command (that would be the standard path where the site is located on a Forge-provisioned server):</p>

<p><code>php /home/forge/1secret.app/artisan schedule:run</code></p>

<p>Otherwise leave defaults in place, then click <code>Schedule Job</code>.</p>

<p><strong>(Optional) Google services keys</strong></p>

<p>In my case I use Google Recaptcha and Analytics, and I need to update the keys for the new domain. After creating a new set of keys I'll update them in <code>.env</code>.</p>

<p><strong>Enable quick/custom deployment</strong></p>

<p>My deployment setup is fairly basic: automatic deployment happens whenever I push a new tag to Gitlab where my code is hosted. Forge has a few different hooks, including on each remote push. I prefer my deployments to be more predictable (and I commit/push often) so I like the middle ground of auto-deploy on tag + manual whenever I want.</p>

<p>Under <em>Sites > Apps > Turn on Quick Deployment</em>.</p>

<p>Next, copy the <em>Deployment Trigger URL</em> because we'll need to add that to Github/Gitlab.</p>

<p>Jump quickly to your git provider. In my case that would be <em>Gitlab > Settings > Integrations</em>.</p>

<ul>
<li>Paste the URL</li>
<li>Uncheck Push events, check Tag push events</li>
<li>Add the webhook we copied previously</li>
</ul>

<h2>4. Set up email</h2>

<p>I use Mailgun to send transactional emails from <code>1secret.app</code>. That needs to be set up with my domain registar (Namecheap).</p>

<p>A little rant first. Getting email to work properly has been the bane of my existence. Both Mailgun and Namecheap give slightly contradictory instructions and I was forced to find my own settings that seem to work. And yet, I still have a vague suspicion that perhaps I didn't do this perfectly. Oh well, let's dive in.</p>

<p><strong>In Mailgun</strong></p>

<p>Add a new domain: <em>Settings > Domains > Add New Domain</em>.</p>

<p>Domain name: <code>mg.1secret.app</code> / US</p>

<p>Check <em>Create DKIM Authority</em> and select <em>2048</em>.</p>

<p><strong>In Namecheap</strong></p>

<p>Add a new DNS record. In the end these are the settings that worked for me:</p>

<table>
<thead>
<tr>
  <th>Type</th>
  <th>Host</th>
  <th>Value</th>
  <th>TTL</th>
</tr>
</thead>
<tbody>
<tr>
  <td>CNAME</td>
  <td><code>email.mg</code></td>
  <td><code>mailgun.org</code></td>
  <td>Automatic</td>
</tr>
<tr>
  <td>TXT</td>
  <td><code>mg</code></td>
  <td><code>v=spf1 include:mailgun.org ~all</code></td>
  <td>Automatic</td>
</tr>
<tr>
  <td>TXT</td>
  <td><code>smtp._domainkey.mg</code></td>
  <td><code>k=rsa; p=...</code></td>
  <td>Automatic</td>
</tr>
</tbody>
</table>

<p>Mail settings -> Custom MX</p>

<table>
<thead>
<tr>
  <th>Type</th>
  <th>Host</th>
  <th>Priority</th>
  <th>Value</th>
</tr>
</thead>
<tbody>
<tr>
  <td>MX</td>
  <td><code>mg</code></td>
  <td><code>10</code></td>
  <td><code>mxa.mailgun.org</code></td>
</tr>
<tr>
  <td>MX</td>
  <td><code>mg</code></td>
  <td><code>10</code></td>
  <td><code>mxb.mailgun.org</code></td>
</tr>
</tbody>
</table>

<p>Once you've set these up, click <em>Verify DNS Settings</em>. This can take 24-48 hours to propagate but for me it was instant once I arrived at the correct set of values.</p>

<h2>5. Add the Mailgun credentials in Forge</h2>

<p>Go back to Forge and update <code>.env</code> with the Mailgun credentials:</p>

<pre><code>MAIL_USERNAME=...@mg.1secret.app
MAIL_PASSWORD=...
MAIL_FROM_NAME=1Secret
MAIL_FROM_ADDRESS=hello@1secret.app
</code></pre>

<p>To clear the previous values from the config/env cache, reboot the server. I also run <code>php artisan optimize:clear</code> as a deploy task.</p>

<h2>6. Redirect the old domain to the new one</h2>

<p>Now that I've got everything set up, I want to redirect all the traffic from <code>sikrt.com</code> to <code>1secret.app</code>. The reason for that is I'm letting the <code>sikrt.com</code> domain expire, but until that happens, I want a permanent <code>301 redirect</code> on it, to <code>1secret.app</code>.</p>

<p>I tried several redirect methods (in Namecheap and Forge), but ultimately what worked for me was to add a forced redirect directly in the Nginx configuration.</p>

<p>You can do this manually on the server or just use Forge itself to edit the Nginx configuration for the old site: <em>Sites > sikrt.com > Files > Edit Nginx Configuration</em>.</p>

<p>Insert this line <code>return 301 https://1secret.app;</code> as shown below:</p>

<pre><code># FORGE CONFIG (DO NOT REMOVE!)
include forge-conf/sikrt.com/before/*;

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name sikrt.com;

    return 301 https://1secret.app;

    root /home/forge/sikrt.com/public;
</code></pre>

<p>Assuming everything went correctly, from now on, when someone loads <code>sikrt.com</code> they'll be redirected to <code>1secret.app</code>. Another benefit is that, due to this being a permanent redirect, Google knows not to penalize your site(s) for duplicate content.</p>

<h2>Fin</h2>

<p>This concludes my fairly convoluted procedure for migrating a site that was provisioned with Forge from an old domain to a new one. It's not fun moving sites to new domains but luckily it's not a thing that needs to be done very often.</p>

<p>I set out to document the procedure in as much detail as possible but the various frustrations that popped up while I was doing it put a damper on that. I apologize in advance for any errors but if you do find any please <a href="/contact">drop a line </a>. I also kind of regret not taking screenshots but those would have made the whole thing even longer and I just wanted to get through it.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/laravel-forge-instance-maintenance</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/laravel-forge-instance-maintenance" />
    <title>Maintenance procedure for a Laravel Forge instance</title>
    <published>2019-10-03T00:00:00+00:00</published>
    <updated>2019-10-03T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">

I&#039;ve been using Laravel Forge for over a year at my day job, but also to provision and deploy my side project 1Secret.app. To me, the biggest benefit that Forge brings is the ability to easily and quickly provision Laravel-ready server instances,......</summary>
    <content type="html"><![CDATA[
        <h2>Preamble</h2>

<p>I've been using <a href="https://forge.laravel.com">Laravel Forge</a> for over a year at my day job, but also to provision and deploy my side project <a href="https://1secret.app/">1Secret.app</a>. To me, the biggest benefit that Forge brings is the ability to easily and quickly provision Laravel-ready server instances, whether on AWS, DigitalOcean, Linode or others.</p>

<p>My server OS of choice is Ubuntu, and Forge has been doing some sort of magic to keep it updated to the latest version. This means I'm currently running 18.04 on multiple instances. This is all good, however there's still some maintenance that I need to perform manually from time to time, namely OS security patch and package updates. I also like to keep an eye on disk space and clear some of that if necessary.</p>

<p>If, when you SSH into your Forge instance, you see a message like below...</p>

<pre><code class="language-bash">14 packages can be updated.
1 update is a security update.


*** System restart required ***
Last login: Sun Sep  8 22:09:04 2019 from xxx.xxx.xxx.xxx
</code></pre>

<p>... that means it's probably time to update those packages. Here's my procedure for doing that, bearing in mind that I'm not a sysadmin, and everything you read below was cobbled together from various sources but works üëç for me.</p>

<h2>The procedure(s)</h2>

<h3>SSH into the instance</h3>

<p>In my case, <a href="https://1secret.app/">1Secret.app</a> is served from <code>104.200.17.161</code> so my command will be (<code>id_rsa</code> is my private SSH key):</p>

<pre><code class="language-bash">ssh forge@104.200.17.161 -i ~/.ssh/id_rsa
</code></pre>

<h3>Check the distro version</h3>

<pre><code class="language-bash">lsb_release -a

No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 20.04.6 LTS
Release:    20.04
Codename:   focal

# or

cat /etc/issue

Ubuntu 20.04.6 LTS
</code></pre>

<h3>Check and reclaim disk space</h3>

<p><strong>File system</strong></p>

<p>The file system can easily fill up with stuff like uploaded files, logs, database, etc. First I like to see an overview of the total disk usage.</p>

<pre><code class="language-bash">df -h

Filesystem      Size  Used Avail Use% Mounted on
udev            985M     0  985M   0% /dev
tmpfs           200M  816K  199M   1% /run
/dev/xvda1       20G  7.1G   13G  37% /
tmpfs           996M     0  996M   0% /dev/shm
tmpfs           5.0M     0  5.0M   0% /run/lock
tmpfs           996M     0  996M   0% /sys/fs/cgroup
/dev/loop0       18M   18M     0 100% /snap/amazon-ssm-agent/1068
/dev/loop2       18M   18M     0 100% /snap/amazon-ssm-agent/930
/dev/loop4       18M   18M     0 100% /snap/amazon-ssm-agent/1335
/dev/loop1       89M   89M     0 100% /snap/core/7169
/dev/loop5       89M   89M     0 100% /snap/core/7270
tmpfs           200M     0  200M   0% /run/user/1001
</code></pre>

<p>In this example, the important line is <code>/dev/xvda1       20G  7.1G   13G  37% /</code> because that is my primary disk. Here, it is 37% full out of a total of 20 GB, which is good.</p>

<p><strong>Application storage</strong></p>

<p>Laravel apps store stuff and things in <code>myapp/storage</code>. If you find a lot of disk space is consumed by the storage folder, refering to my <a href="https://chasingcode.dev/blog/useful-linux-commands/">Useful Linux Commands</a> article, you can run something like this to check which subfolder takes the most space:</p>

<pre><code class="language-bash">du -ch -d 1 | sort -hr

760K    total
760K    .
704K    ./framework
28K ./logs
16K ./app
8.0K    ./debugbar
</code></pre>

<p>In this example there's almost no space used. Let's move on.</p>

<p><strong>Journal size</strong></p>

<p>Another place where a lot of storage can potentially be used is the system journal. This is a where Linux stores a lot of logging data, for example system events and such. It tends to grow in size over time. Depending how important this data is to you, you can choose to delete some or all of it, or restrict how much space it can use.</p>

<p>Here's how I would check how much space the system journal uses on my Ubuntu 18.04 instances:</p>

<pre><code class="language-bash">du -ach /var/log/journal/ | sort -hr

1.8G    total
1.8G    /var/log/journal/1302ef9b7d514d588b562228feb06a4c
1.8G    /var/log/journal/
81M     /var/log/journal/1302ef9b7d514d588b562228feb06a4c/system@2b1e5536b8964276bd01478033377b9b-000000000017bdd9-00058b9e4032a3be.journal
81M     /var/log/journal/1302ef9b7d514d588b562228feb06a4c/system@2b1e5536b8964276bd01478033377b9b-0000000000167546-00058adae74a631a.journal
...
41M     /var/log/journal/1302ef9b7d514d588b562228feb06a4c/system.journal
8.1M    /var/log/journal/1302ef9b7d514d588b562228feb06a4c/user-1001@f935c142f48041da86bb9920da4f84de-000000000003acdb-0005815031482878.journal
...
8.0M    /var/log/journal/1302ef9b7d514d588b562228feb06a4c/user-1001.journal
8.0M    /var/log/journal/1302ef9b7d514d588b562228feb06a4c/user-1000.journal
</code></pre>

<p>1.8 GB may not seem much, but when your entire instance is 20 GB, that's actually quite significant.</p>

<p><strong>Clear journal entries manually</strong></p>

<p>To recover disk space, journal entries can be cleared manually in a couple ways.</p>

<p>Retain only the past two days:</p>

<pre><code class="language-bash">sudo journalctl --vacuum-time=2d
</code></pre>

<p>Retain only the past 500 MB:</p>

<pre><code class="language-bash">sudo journalctl --vacuum-size=500M
</code></pre>

<p><strong>Restrict max journal size</strong></p>

<p>The journal size can be restricted through the configuration.</p>

<pre><code class="language-bash">sudo vi /etc/systemd/journald.conf
</code></pre>

<p>Set <code>SystemMaxUse=500M</code> to restrict it to 500M.</p>

<p>Restart the <code>systemd-journald</code> service (<a href="https://unix.stackexchange.com/questions/253203/how-to-tell-journald-to-re-read-its-configuration">see this for more details</a>):</p>

<pre><code class="language-bash">sudo systemctl restart systemd-journald
</code></pre>

<p><strong>Clear /usr/src/</strong></p>

<p><strong>CAUTION</strong> Working with AWS instances, as well as S3, I found lots of <code>linux-aws-headers-*</code> files in <code>/usr/src/</code>. Based on my research, these should be safe to delete, which I did without negative consequences, but you should be extra careful just in case I'm wrong.</p>

<p>To clear the AWS-specific files out of <code>/usr/src/</code>, run this command:</p>

<pre><code class="language-bash">sudo apt-get purge linux-aws-headers-4.15.0
</code></pre>

<h3>Update system packages</h3>

<p>Finally we're ready to update the system packages. The commands below can be run in sequence to upgrade all the packages. You can skip the <code>list</code> commands if you wish, those are just to give you an overview of what packages there are.</p>

<p>You may see a prompt asking if you want to upgrade certain packages or configurations. That's where you need to be extra careful because it may overwrite your custom configurations. In my case, I usually get two prompts, for Redis and php.ini.</p>

<p>Update Redis? <code>Y</code></p>

<p>Update php.ini? <code>N</code> (keep the local version currently installed)</p>

<pre><code class="language-bash"># updates available list of packages &amp; versions
sudo apt update

# lists the installed packages
sudo apt list --installed

# lists the packages that can be upgraded
sudo apt list --upgradeable

# actually perform the package upgrades
sudo apt upgrade

# removes packages that are no longer required
sudo apt autoremove
</code></pre>

<p>Finally, reboot the server.</p>

<pre><code class="language-bash">sudo reboot
</code></pre>

<h3>Check if services are running</h3>

<p>Once the system has rebooted, SSH back into it. You should be greeted with this shiny new message:</p>

<pre><code class="language-bash">0 packages can be updated.
0 updates are security updates.
</code></pre>

<p>Now check if your vital services are running. In my case there are only 3 I care about:</p>

<pre><code class="language-bash">systemctl status systemd-journald supervisor redis
</code></pre>

<p>If these are green (<code>Active: active (running)</code>), you are good to go.</p>

<h3>Restart Nginx</h3>

<pre><code class="language-bash"># Starts the Nginx service
sudo systemctl start nginx

# Stops the Nginx service
sudo systemctl stop nginx

# Stops then starts the Nginx service
sudo systemctl restart nginx

# Gracefully restarts the Nginx service
sudo systemctl reload nginx

# Shows the status of the Nginx service
sudo systemctl status nginx
</code></pre>

<p>This concludes my maintenance procedure for Laravel Forge provisioned servers. I will update these instructions as I see fit, but in the meantime keep on forging ahead!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/intro-1secret-app</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/intro-1secret-app" />
    <title>Introducing 1Secret.app</title>
    <published>2019-09-07T00:00:00+00:00</published>
    <updated>2019-09-07T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">As I&#039;m nearing public launch, the time has come to talk briefly about 1Secret.app, the side project and SaaS app I&#039;ve been building for a while.



In a nutshell, 1Secret is a browser-based app that is trying to solve the problem of sharing secure or......</summary>
    <content type="html"><![CDATA[
        <p>As I'm nearing public launch, the time has come to talk briefly about <a href="https://1secret.app">1Secret.app</a>, the side project and SaaS app I've been building for a while.</p>

<h2>What is 1Secret?</h2>

<p>In a nutshell, 1Secret is a browser-based app that is trying to solve the problem of sharing secure or sensitive data over insecure mediums. The best example of that is sending passwords over email. That is an inherently insecure practice and I wish IT professionals would use it less.</p>

<p>Recently, I discovered that Outlook can generate and send encrypted links, but the process to open such a link is awkward, and I can only imagine creating one is just as inconvenient. Besides, you're tied to a particular technology, Outlook in this case.</p>

<p>1Secret aims to make this process a lot easier, but also very secure.</p>

<h2>How does 1Secret work?</h2>

<p><a href="https://1secret.app">1Secret's</a> main premise is the creation of transient - or short-lived - secrets. A "secret" is simply text or a file or both (later this will be expanded to multiple files and other goodies, but for now I'm keeping it simple).</p>

<p>Once a secret is created, you'll be presented with a URL that terminates in a random string. Instead of emailing a clear-text password, you'll be emailing this URL instead. The advantages of this should be clear once I explain security layers below.</p>

<p>Creating a secret is kept simple, with most fields optional.</p>

<p><img src="/assets/img/2019-09-07-create-secret.jpg" alt="Folder structure" /></p>

<p>Of note are the <strong>Duration</strong> and what I call <strong>Attempts</strong> but also <strong>Password</strong>. The first two control how the secret expires (and is subsequently destroyed), while adding a password encrypts the secret with your own key, making it airtight.</p>

<p>To open a secret, load the URL in a browser. Depending if it is encrypted by the creator, you may be presented with a password prompt.</p>

<p><img src="/assets/img/2019-09-07-enter-password.jpg" alt="Folder structure" /></p>

<p>Once you've entered the correct password - if applicable - you'll see the message or file attachment.</p>

<p><img src="/assets/img/2019-09-07-open-secret.jpg" alt="Folder structure" /></p>

<p>If the file is an image there's a low resolution preview, but you can download the original image if you wish.</p>

<p>The message itself can be read, copied to the clipboard or downloaded as a text file.</p>

<h2>How does 1Secret protect your data?</h2>

<p>1Secret is a bit like an onion, in that it offers multiple layers of security. Here are some of them.</p>

<h3>Secure transport</h3>

<p>The message (along with any files) is transported securely over HTTPS to the server where it is processed.</p>

<h3>Transience (or short-livedness)</h3>

<p>By not allowing a secret to live forever, I don't have to worry about forgetting that my secrets are spending the remaining of eternity on some server.</p>

<p>Transience is achieved in two ways: <strong>duration</strong> (or lifetime) that defaults to a sensible number and you can tweak it to your liking based on account type, and <strong>number of attempts</strong> (I really need to find an easier term for this) which determines how many times the secret URL can be opened before it is destroyed.</p>

<p>In both cases, once the secret has expired, it is purged (or destroyed) from the server and the URL becomes invalid.</p>

<h3>Encryption layer 1</h3>

<p>Every secret is encrypted on the server by default. This automatically protects the data at rest from being compromised. An attacker would need to compromise two separate pieces of the puzzle in order to decrypt your information. But this is where layer 2 comes in.</p>

<h3>Encryption layer 2</h3>

<p>Optionally (but <em>VERY HIGHLY RECOMMENDED</em>) you can encrypt a secret with your own password or key. Just make sure not to use your account password! This will wrap your secret around another encryption layer, but this time <em>you</em> control the key. No one else - not I (the provider), nor an attacker - will be able to access your information without the password. Also, the longer the password is, the better.</p>

<h3>Security through obscurity‚Ñ¢Ô∏è</h3>

<p>"Security through obscurity" is a term that refers to obfuscating something, or making it long, complex, random, hidden from casual inspection, or a combination of all of those. In general I don't like this practice. It has its place in certain situations but it should never be the only security measure used.</p>

<p>In this case it adds yet another thin layer on top of the existing security onion. This is achieved by the random URL string that is generated when you create a secret, and looks like this <code>https://1secret.app/s/h5y85u4x</code>. When the secret expires, this URL is gone forever.</p>

<h2>What are some use cases?</h2>

<p>Here's a handful of the most used scenarios that I run into on a daily basis. For others, use your imagination.</p>

<p>Remember, the main benefit of using <a href="https://1secret.app">1Secret</a> is that each secret has a very limited lifespan, so you can "fire and forget it" and remain confident that it will be automatically destroyed when it reaches its end of life.</p>

<h3>Replace email for sending sensitive info</h3>

<p>Create a password-encrypted secret, and email the 1Secret-generated URL instead. Then pass on the password through a separate medium, such as Slack, SMS, word of mouth, etc.</p>

<p><em>Always spread the risk by using separate mediums to transfer the URL and the password.</em></p>

<h3>Data transfer between devices</h3>

<p>Yeah, you can use tools such as Dropbox, Google Drive and so on, but all those require a common interface (i.e. the program needs to be installed on both devices, you need to be signed in and so on). 1Secret needs only a browser, which is probably the most common and ubiquitous cross-device interface you'll find.</p>

<p>Besides, I don't have to worry about temporary bits and pieces of data cluttering my devices, since they only live briefly in the cloud.</p>

<p>For that reason, I use 1Secret a lot to transfer text and files between my desktop(s)/laptop(s) and phone.</p>

<p>A good example is setting up a crypto wallet on a new device. In that case I'll just create a very short duration secret (say, 5 minutes) containing the encryption seed from my main machine (password-encrypted of course), then log into 1Secret on my new device and copy/paste the seed into the new wallet. In this case the password remains in my head.</p>

<h3>Tweeting</h3>

<p>Another (slightly weird) scenario is for <a href="https://twitter.com/brbcoding">tweeting</a>. Yes, tweeting. Bear with me.</p>

<p>Often I find myself composing a tweet on one device, perhaps processing a screenshot, but I'm unable to tweet it on that device because I'm not logged into my account for various reasons (let's say I'm on a public device). So I'll create a secret containing the tweet and any associated image, then open it on a device from where I can actually send the tweet.</p>

<h2>Is there a free plan?</h2>

<p>Yes! Check out the <a href="https://1secret.app/pricing">Pricing</a> page where you'll find a list of features that each tier offers.</p>

<p>The <strong>Free/Standard</strong> tier offers most of the functionality you'll need on a casual basis from such a service: <strong>password encryption</strong> and the ability to <strong>add smaller files</strong>.</p>

<p><strong>Premium</strong> will cost in the ballpark of $10 / month and will offer more conveniences, longer durations, more generous storage, and so on.</p>

<p>Please note that you'll need to create an account in order to use the password encryption or file attachment features. I'm not doing this in order to harvest your email address (read the <a href="https://1secret.app/privacy">Privacy Policy</a> to see how little data I collect about you), but rather to prevent abuse.</p>

<h2>How can I pay for it?</h2>

<p>For now, as you'll read below, I'm offering all the Premium features for free for the duration of the beta to anyone who signs up.</p>

<p>I don't have a payment solution in place but when the time comes I will support credit cards as a baseline. You can also pay me directly with Paypal if you prefer, or even cryptocurrency.</p>

<h2>Any plans for the future?</h2>

<p>Glad you asked! I put quite a little bit of thought into what I want to build next and made a <a href="https://1secret.app/roadmap">roadmap</a>.</p>

<h2>1Secret is in open beta</h2>

<p>If you happen to come across this article and are intrigued by the idea, give <a href="https://1secret.app/">1Secret</a> a spin! As of this writing, and until further notice, it is in open public beta and everyone who signs up <em>gets access to all the Premium features for free</em>, until the beta ends.</p>

<p>Plus, as early adopters I will offer you a special discount when the service goes commercial.</p>

<p>Thanks and I hope you'll find 1Secret useful!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/welcome-chasingcode-dev</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/welcome-chasingcode-dev" />
    <title>Welcome to Chasingcode.dev</title>
    <published>2019-08-23T00:00:00+00:00</published>
    <updated>2019-08-23T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Welcome, yet again, to another incarnation of my blog and personal site. If you&#039;ve arrived here directly, you may not be aware that I transferred this blog from a different site called omigo.sh. It is part of my personality that I change my mind......</summary>
    <content type="html"><![CDATA[
        <p>Welcome, yet again, to another incarnation of my blog and personal site. If you've arrived here directly, you may not be aware that I transferred this blog from a different site called <a href="https://omigo.sh">omigo.sh</a>. It is part of my personality that I change my mind occasionally. As I acquire new information, knowledge, and experience I try to optimize.</p>

<p>Initially I meant to use Omigo.sh as a central hub - or an umbrella organization if you will - for my side projects. I also blogged from the same site, but there was no personal information about me. Over time I decided I was going to be more transparent about who I am and what I do, so I made <a href="https://chasingcode.dev">chasingcode.dev</a> as a hybrid portfolio/resume website.</p>

<p>Once I made that decision, it made sense to transfer the blog over. Now all my articles from Omigo.sh are permanently redirected here.</p>

<p>If you skipped the home page, <a href="https://chasingcode.dev">check it out</a> and learn more about me. I'm planning more content aside from the blog itself, to expand and dive deeper into what makes me tick.</p>

<p>Thanks for visiting and I hope you'll find something useful here!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/javascript-disable-submit-button-form</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/javascript-disable-submit-button-form" />
    <title>Disable Submit Button on Form Submit with JavaScript</title>
    <published>2019-07-21T00:00:00+00:00</published>
    <updated>2019-07-21T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">

Let&#039;s say you have a simple form with a plain old submit to the server without Ajax. Sometimes the process take up to a second or even more, depending on the payload. Obviously if you&#039;re sending a file it will take longer. During that time, it is......</summary>
    <content type="html"><![CDATA[
        <h2>The problem</h2>

<p>Let's say you have a simple form with a plain old submit to the server without Ajax. Sometimes the process take up to a second or even more, depending on the payload. Obviously if you're sending a file it will take longer. During that time, it is possible for the user to hit the submit button multiple times, whether by accident or intentionally. In that case, the server will receive multiple submissions of the same form data.</p>

<h2>The solution (or one of them)</h2>

<p>A solution that I've employed often to ensure the form is submitted only one time - not because it's the best but because it's the quickest technique to reach for - is to disable the submit button once it's clicked. Since this is a server-side request, I am not too worried that the request will fail and the button will remain disabled.</p>

<p>Give the following HTML for our form:</p>

<pre><code class="language-html">&lt;form method="post" action="/"&gt;
    &lt;button id="butt" type="submit"&gt;Submit&lt;/button&gt;
&lt;/form&gt;
</code></pre>

<p>We could use JavaScript to disable the button like so:</p>

<pre><code class="language-javascript">var butt = document.getElementById('butt');

butt.addEventListener('click', function(event) {
    event.target.disabled = true;
});
</code></pre>

<p>The sequence of events goes something like this: the user clicks the button ‚Üí the button is disabled ‚Üí the form gets submitted ‚Üí the server handles the request ‚Üí it redirects wherever it is meant to.</p>

<p>That should be the end of the story. But wait, there's more!</p>

<h2>Chrome vs Firefox vs Safari</h2>

<p>Unfortunately this little snippet does not work consistently across browsers. As of this writing, I tested this in the desktop versions of Chrome 75, Firefox 67, and Safari 12.</p>

<p>In <strong>Chrome</strong> or <strong>Safari</strong>, clicking the button will disable it but NOT submit the form. In <strong>Firefox</strong>, the behavior is as expected: click - disable - submit.</p>

<p><a href="https://codepen.io/anon/pen/rEXPMN?editors=1010">Try it out for yourself on Codepen</a>. If it's not immediately obvious what happens, in Chrome/Safari, after the button is disabled, it remains on the screen (meaning the form wasn't submitted). In Firefox, it is disabled and then it disappears (meaning the form was submitted).</p>

<h2>The improved solution</h2>

<p>What does one do when confronted with a situation like this, and they're not a JavaScript grandmaster? Well, reach for <em>the ol' <code>setTimeout</code> trick</em>, of course.</p>

<p>I suspect this situation has something to do with JavaScript's async nature, yada yada (correct me if I'm wrong). To break out of that behavior for this situation, and make the sequence of events synchronous, just wrap the offending code in a <code>setTimeout 0</code> statement, like so:</p>

<pre><code class="language-javascript">var butt = document.getElementById('butt');

butt.addEventListener('click', function(event) { 
    setTimeout(function () {
        event.target.disabled = true;
    }, 0);
});
</code></pre>

<p>Or 1337 ES6 1-liner (I'm sure someone will find an even shorter way to write this):</p>

<pre><code class="language-javascript">document.getElementById('butt').addEventListener('click', event =&gt; setTimeout(() =&gt; event.target.disabled = true, 0));
</code></pre>

<p>Codepen for both <a href="https://codepen.io/anon/pen/NZQoLm?editors=1010">long form</a> and <a href="https://codepen.io/anon/pen/mNejbP?editors=1010">1337 version</a>.</p>

<p>Now the behavior is consistent in all browsers: click ‚Üí disable ‚Üí submit. Say what you will, but I've used this trick often when I run into similar situations and it works without fail.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/javascript-convert-utc-server-time-to-local</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/javascript-convert-utc-server-time-to-local" />
    <title>Convert UTC Server Time to Local with JavaScript</title>
    <published>2019-07-18T00:00:00+00:00</published>
    <updated>2019-07-18T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">There are many advantages to storing timestamps in UTC in your database but I&#039;m not going to go into them right now. But what do you do when you want to display the user&#039;s local time on the frontend?

One technique is to fetch the UTC time from the......</summary>
    <content type="html"><![CDATA[
        <p>There are many advantages to storing timestamps in UTC in your database but I'm not going to go into them right now. But what do you do when you want to display the user's local time on the frontend?</p>

<p>One technique is to fetch the UTC time from the server and convert it to client time with JavaScript, using the browser's built-in APIs. Here's how.</p>

<pre><code class="language-javascript">var serverTime = '2019-07-19 17:04:03';

// split into components by "-", " ", ":" and convert to integer
var splitIntoComponents = serverTime.split(/-|\s|:/).map(c =&gt; parseInt(c, 10)); // [2019, 07, 19, 17, 04, 03]

var date = new Date(Date.UTC(...splitIntoComponents));

date.toLocaleDateString(); // "8/19/2019" &lt;-- this is because Date.UTC month parameter is 0-index based
date.toLocaleTimeString(); // "12:04:03 PM"
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/vue-components-same-name-laravel-project</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/vue-components-same-name-laravel-project" />
    <title>Beware of Vue Components with the Same Name in a Laravel Project</title>
    <published>2019-07-16T00:00:00+00:00</published>
    <updated>2019-07-16T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">While working on my SaaS app Sikrt.com I ran into what I thought was a bug, which caused me to waste almost 2 hours tracking it down. In the end it turned out to be something trivial.

TL;DR An important piece of functionality broke because I added a new......</summary>
    <content type="html"><![CDATA[
        <p>While working on my SaaS app <a href="https://sikrt.com/">Sikrt.com</a> I ran into what I thought was a bug, which caused me to waste almost 2 hours tracking it down. In the end it turned out to be something trivial.</p>

<p><strong>TL;DR</strong> An important piece of functionality broke because I added a new Vue component that happened to have the same name as an existing component, even though both were located in different directories.</p>

<h2>To make a short story long...</h2>

<p><a href="https://sikrt.com/">Sikrt.com</a> is built on Laravel, with a sprinkling of Vue here and there. These days, Laravel projects make it incredibly easy to embed Vue components by allowing you to register each and every component globally in <code>resources/js/app.js</code>.</p>

<p>The relevant piece of code that does that is the following:</p>

<pre><code class="language-javascript">const files = require.context('./components', true, /\.vue$/i);
files.keys().map(key =&gt; Vue.component(key.split('/').pop().split('.')[0], files(key).default));
</code></pre>

<p>Basically this loops through all the Vue single file components (<code>.vue</code> extension), including sub-folders, and registers them. That way you can just refer to the component anywhere in your Blade templates and won't need to import them explicitly. Furthermore, inside each component you can include any other component without importing it or registering it in the parent component. So it makes it really convenient to work with Vue.</p>

<p>One obvious downside is that it makes it much harder to split your code. Personally I've done it on another project (separate bundles for admin and regular users) but it's not provided out of the box. What this means is that you're essentially loading your entire bundle on every page of your Laravel app. At the end of the day it's not a huge deal if you are mindful of your bundle size.</p>

<p>The other downside that I just encountered is that apparently you can't have two components with the same name, even if they're in different folders. The code snippet above, which performs the registration, basically flattens out the entire folder hierarchy inside the <code>components</code> folder.</p>

<p>In my specific case, I initially had the following component, which provided the important piece of functionality that I mentioned: <code>components/VMenu.vue</code>.</p>

<p>During the changes (mostly front-end) that I made, I added another component with the same name, located at <code>components/icons/svg/VMenu.vue</code>. This component was a new SVG icon that I added to the project, following <a href="https://omigo.sh/blog/simplified-dynamic-svg-icon-component/">the pattern I discussed a while back</a>.</p>

<p>The name of this new component is important because I follow a very strict naming convention for SVG icon components: "V", followed by the file name of the original icon in PascalCase. I am partial to <a href="https://feathericons.com/">Feather Icons</a> these days. So for example, their <code>arrow-right</code> icon becomes <code>VArrowRight.vue</code> when I import it into my Laravel/Vue project.</p>

<p>Just like that, my very important functionality no longer worked. And I had no idea why, since Yarn didn't throw any errors upon compiling, nor were there errors in the console.</p>

<p>After trying out different things, I thought I would build the original <code>VMenu.vue</code> component (and its parent) from scratch, bit by bit. Eventually I discovered that if I renamed it to something else, it worked. And then the üí° went off. My feelings were very confused: on the one hand I felt like a dumbass, on the other I felt victorious that I restored that important functionality (which incidentally I spent many hours perfecting it).</p>

<p>There you go: make sure you don't name the Vue components in your Laravel project the same, if you're using the global import technique. But then again, you can always import each component individually.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/2019-tech-radar</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/2019-tech-radar" />
    <title>2019 Tech Radar</title>
    <published>2019-07-04T00:00:00+00:00</published>
    <updated>2019-07-04T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">The 2019 Tech Radar is a list of web technologies that I&#039;ve become interested in this year. While I am very well entrenched and comfortable in the Laravel-Vue ecosystem, I can&#039;t help but peek at what the neighbor is up to, or what promising new things......</summary>
    <content type="html"><![CDATA[
        <p>The 2019 Tech Radar is a list of web technologies that I've become interested in this year. While I am very well entrenched and comfortable in the Laravel-Vue ecosystem, I can't help but peek at what the neighbor is up to, or what promising new things are around the block.</p>

<p>Basically these fall somewhere between "man, if I just had an extra 8 hours a day, I'd totally give this a whirl" and "I wouldn't be opposed to working with this technology", and even "there's a good chance I might switch to / adopt this at some point in the future".</p>

<p>So let's get started.</p>

<h2>Svelte</h2>

<p><a href="https://svelte.dev/">Svelte</a> is a promising new JavaScript framework that has come out of nowhere and might well be a game-changer.</p>

<h3>Why?</h3>

<p>Because I recognize some of the speed and bundle size advantages of Svelte. Going through their examples and <a href="https://svelte.dev/tutorial/basics">interactive tutorial</a>, it seems easy enough to learn, on par with Vue.JS. At version 3.x at the time of this writing, it is also mature enough that it can be strongly considered for production.</p>

<p>The <a href="https://www.youtube.com/watch?v=OyFI-zOrKSk">Rethinking Reactivity</a> video by Rich Harris, Svelte's creator, was kinda of an eye-opener and really brought it front-and-center for me.</p>

<p>While I'm not about to abandon VueJS for Svelte, it's worth keeping close watch on it, and I'm very interested in the direction it's going to evolve. I am itching for a spare moment between my day job and all my side projects to give it a spin.</p>

<p>Since I haven't dug into it a whole lot, I don't want to speak out of turn but my understanding is that the tooling around Svelte is not yet mature enough or at the level of Vue or React's ecosystems. For example, a lot of folks seem to have had issues trying to use SASS with Svelte.</p>

<p>Svelte is, in 2019, one of my top contenders for new technologies that I find very promising. Time will tell if that is the case.</p>

<h2>GraphQL</h2>

<p><a href="https://graphql.org/">GraphQL</a> is a language for querying your API.</p>

<h3>Why?</h3>

<p>While it has been around for a few years, GraphQL was treated as more experimental than anything, though it has been picking up steam, and deservedly.</p>

<p>A while back I worked on a project that made use of a GraphQL API and it took a while to wrap my brain around it. Only much later did I realize the benefits. What I like best about it is that it greatly simplifies your API endpoints and allows complex querying directly from the front-end.</p>

<p>If I needed to build a Single Page App (SPA) driven by an API that I control, I will almost certainly create a GraphQL API server.</p>

<h2>NativeScript</h2>

<p><a href="https://www.nativescript.org/">NativeScript</a> is without doubt in my mind, one of the hottest technologies that allow a JavaScript dev to build cross-platform mobile apps.</p>

<h3>Why?</h3>

<p>Web development is hard enough on the desktop. But when we entertain the possibility of building native mobile apps for our product or service, it feels like a lost cause. NativeScript seeks to mitigate a lot of that pain, by making it easy for non-mobile developers to build mobile apps, with the technology they already know.</p>

<p>As a Vue developer, I'm happy that NativeScript <a href="https://www.nativescript.org/vue">officially supports Vue</a>. I skimmed the documentation and it seems pretty thorough. More importantly, there's a sandbox environment that you can use to quickly build a demo app that actually runs on your phone!</p>

<p>Now, building a cross-platform mobile app with NativeScript + Vue is definitely more involved than simply building a Vue web app, but this is a light at the end of the tunnel for those like me who don't have the time/resources/energy to learn how to code for Android and iOS.
``
If I needed to build a mobile app, I would very likely use NativeScript as my first choice.</p>

<h2>Cypress.io</h2>

<p><a href="https://www.cypress.io/">Cypress.io</a> is the new hotness in UI/browser testing.</p>

<h3>Why?</h3>

<p>I'm a big proponent of testing in general so anything that makes this easier is an instant win. There's been a lot of hype around Cypress lately and from what I've been told, it's the new gold standard in front-end testing.</p>

<p>Until recently, Selenium has been the goto end-to-end testing framework, but there are a lot of problems with it and it just doesn't make developer's lives easier. Apart from being slow and cumbersome, it also requires learning a new language/paradigm (Java) - and in many cases dedicated personnel.</p>

<p>Cypress eliminates all these drawbacks and more. Very importantly, it uses JavaScript, which can eliminate the need for a dedicated tester with Java knowledge and allow any developer to write their own tests. More benefits are <a href="https://www.cypress.io/how-it-works">explained here</a>.</p>

<p>Honestly, the only thing that prevents me from using it right away is the fact that the projects I'm working on are in continuous flux, meaning the UI and behavior change often, meaning I just don't have the bandwidth to create end-to-end tests in addition of the back-end tests I usually write.</p>

<p>But then again, it all depends what kind of projects you're working on. For quick prototyping and MVP-style products, writing too many tests can be detrimental. Once the product becomes more established, that could be a good time to employ a tool such as Cypress.</p>

<h2>Rails</h2>

<p><a href="https://rubyonrails.org/">Ruby on Rails</a> is a modern application framework for web apps. I've never used Ruby and the syntax looks odd compared to PHP. I've included it not because it's a new or emerging technology, but because recently I've become more interested in it.</p>

<h3>Why?</h3>

<p>My love for Laravel is limitless for the time being, yet Rails feels very much like a spiritual predecessor. I've listened to <a href="https://dhh.dk/">DHH</a>, the creator of Rails, many times on various subjects and everything he's said so far resonates with me, including his philosophy behind Rails.</p>

<p><a href="https://twitter.com/taylorotwell">Taylor Otwell</a>, Laravel's creator, has imbued his framework with a lot of the same underlying principles as Rails: ease of use, getting things done, developer happiness, beautiful API, great documentation, and on and on. It leads me to believe that programming in Rails would be just as satisfying as Laravel.</p>

<p>Finally, as a petty reason, DHH is a co-founder at my favorite tech company <a href="https://basecamp.com/">Basecamp</a>, whereby the product is naturally built in Rails. In a parallel universe I can see myself working there.</p>

<h2>SwiftUI</h2>

<p><a href="https://developer.apple.com/xcode/swiftui/">SwiftUI</a> is the latest application framework revealed by Apple this year.</p>

<h3>Why?</h3>

<p>While I'm not an iPhone user (I do use a Mac for coding and I wouldn't have anything else), SwiftUI brings a lot of good vibes and seems to have developers very excited. It claims to offer a unified way to built apps for the entire Apple ecosystem which is always a good thing in my book. Yet more proof that modern tools continue to get better and make developers' lives easier as we go along.</p>

<p>If I had the need or urge to code anything exclusive for Apple's ecosystem, SwiftUI would be my first choice.</p>

<h2>Gatsby</h2>

<p><a href="https://www.gatsbyjs.org/">Gatsby</a> is a static site generator based on React.</p>

<h3>Why?</h3>

<p>I'm a big fan of static site generators. <a href="https://omigo.sh/">Omigo.sh</a> itself is a statically-hosted site. Gatsby is fairly new but has started to become more popular and, if I'm not mistaken, is the first choice for anyone wishing to build a static site with React. I've never touched React but it is the most popular front-end framework at the moment, and I am at least marginally interested in learning it.</p>

<p>Gatsby uses some interesting technologies, such as intelligent prefetching of resources and GraphQL. It's unlikely I'll use it anytime soon but I'm definitely keeping an eye on it.</p>

<h2>.NET Core</h2>

<p><a href="https://docs.microsoft.com/en-us/dotnet/core/">.NET Core</a> is an open-source (gasp!) framework from Microsoft.</p>

<h3>Why?</h3>

<p>I never saw myself as being interested in Microsoft's stack, simply because I love open-source so much. Over the last few years, however, Microsoft has surprised everyone by embracing open-source with (dare I say?) a vengeance.</p>

<p>Between VSCode, Github, and now .NET Core (as well as others that I don't currently recall), Microsoft is going full steam ahead on open-source technologies. That's very commendable and I hope they keep it up.</p>

<p>I recently heard about .NET Core from an old friend who mentioned he's using it at work. When he told me it was open-source, it immediately piqued my interest.</p>

<p>.NET Core is pretty far down my list of technologies but, based on everything I know, I wouldn't be opposed to learning it if the opportunity presented itself.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/omigosh-is-open-source</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/omigosh-is-open-source" />
    <title>Omigo.sh is Open Source</title>
    <published>2019-06-30T00:00:00+00:00</published>
    <updated>2019-06-30T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">What better way to give back to the amazing open-source (and especially Laravel) community than to unlock the code behind Omigo.sh?

To iterate, Omigo.sh is built on TightenCo&#039;s Jigsaw static site generator, which is itself built on top of Laravel.......</summary>
    <content type="html"><![CDATA[
        <p>What better way to give back to the amazing open-source (and especially Laravel) community than to unlock the code behind <a href="https://omigo.sh/">Omigo.sh</a>?</p>

<p>To iterate, Omigo.sh is built on TightenCo's Jigsaw static site generator, which is itself built on top of Laravel. Starting today, you can freely peruse the code and customizations I made to the site and blog. <a href="https://github.com/breadthe/omigo.sh">Omigo.sh on Github</a>.</p>

<p>This was a very obvious move, and I only regret not opening it up from the beginning. One day I had a "doh!" moment and realized that there's no benefit in keeping it in a private repo, but everything to gain by making the sourcecode freely available.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/php-handle-undefined-index-gracefully</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/php-handle-undefined-index-gracefully" />
    <title>PHP - Handle Undefined Index Gracefully</title>
    <published>2019-06-09T00:00:00+00:00</published>
    <updated>2019-06-09T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Let&#039;s say I&#039;m processing some input in the form of an array or object, and I can&#039;t predict which keys are defined.



If I try to reference a non-existent key and don&#039;t handle that properly, I&#039;ll get this nice little error, and my code will break:



So......</summary>
    <content type="html"><![CDATA[
        <p>Let's say I'm processing some input in the form of an array or object, and I can't predict which keys are defined.</p>

<pre><code class="language-php">// input
$item = [
    'name' =&gt; 'Item name',
];

$year = $item['year']; // Undefined index: year
</code></pre>

<p>If I try to reference a non-existent key and don't handle that properly, I'll get this nice little error, and my code will break:</p>

<pre><code class="language-bash">PHP error:  Undefined index: year on line x
</code></pre>

<p>So let's assume that I want to handle this by assigning <code>null</code> to an undefined value or index. This can be done a few different ways.</p>

<p><strong>Option 1</strong></p>

<p>Long form. I've seen this a lot in older code bases (especially pre-7.0) and I just don't like it. It's too lengthy and awkward.</p>

<pre><code class="language-php">$year = isset($item['year']) ? $item['year'] : null; // null
</code></pre>

<p><strong>Option 2</strong></p>

<p><a href="https://en.wikipedia.org/wiki/Null_coalescing_operator">Null coalescing operator</a> (??). Way cleaner and much more elegant. PHP 7.0+.</p>

<pre><code class="language-php">$year = $item['year'] ?? null; // null
</code></pre>

<p><strong>Option 3</strong></p>

<p>A more graceful approach with <a href="https://www.php.net/manual/en/language.operators.errorcontrol.php">error reporting suppression</a>. I haven't used PHP's <code>@</code> (error control) operator in a long time and had almost forgot about it. Frustrated with the verbosity of error handling in an older PHP project that did not have access to null coalesce, I discovered this much shorter syntax and it does exactly what I need.</p>

<p>If you want to assign anything but <code>null</code>, this method won't work, of course.</p>

<pre><code class="language-php">$year = @$item['year']; // null
</code></pre>

<p><strong>NB</strong> Test this well to ensure it works in your local and/or production environments. I haven't found any issues in any of mine, but <em>caveat emptor</em>. Also, if you have custom error handling/reporting in place, this might not work. Always test your code when trying this method!</p>

<p><strong>Bonus</strong></p>

<p>To expand on this, let's say I want to assign a default year, if the year in the input is not defined. Using the long form approach, I could do the following - and it's messy and hard to follow:</p>

<pre><code class="language-php">$current_year = 2019;

$year = isset($item['year']) ? $item['year'] : (isset($year) ? $year : $current_year); // 2019
</code></pre>

<p>Using the error control operator it can be simplified to:</p>

<pre><code class="language-php">$year = isset($item['year']) ? $item['year'] : @$current_year; // 2019
</code></pre>

<p>Or even further for PHP 7.0+:</p>

<pre><code class="language-php">$year = $item['year'] ?? @$current_year; // 2019
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/laravel-missing-docs-firstor</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/laravel-missing-docs-firstor" />
    <title>Laravel - The Missing Docs - firstOr()</title>
    <published>2019-06-06T00:00:00+00:00</published>
    <updated>2019-06-06T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">As wonderful as Laravel&#039;s documentation is, there are still plenty of undocumented features and hidden gems in the codebase. One of them is an Eloquent method called &lt;code&gt;firstOr()&lt;/code&gt;.

It first came to my attention through this tweet. It looked......</summary>
    <content type="html"><![CDATA[
        <p>As wonderful as Laravel's documentation is, there are still plenty of undocumented features and hidden gems in the codebase. One of them is an Eloquent method called <code>firstOr()</code>.</p>

<p>It first came to my attention through this <a href="https://twitter.com/codebyjeff/status/1130253186973888512/photo/1">tweet</a>. It looked intriguing so I fell through the rabbit hole and did a little bit of my favorite new sport: source diving through Laravel's codebase.</p>

<h2>What does <code>firstOr()</code> do?</h2>

<p>This method seems to have been introduced in Laravel 5.4 and it can be found in the Eloquent/Builder class <code>vendor/laravel/framework/src/Illuminate/Database/Eloquent/Builder.php</code>. It should look familiar because it is similar to sister methods such as <code>first()</code> and <code>firstOrFail()</code>. Unlike <code>firstOrFail()</code>, it executes a callback when it doesn't find a result, which can be a very powerful feature depending on your use case.</p>

<p>The <strong>first</strong> parameter is an array of columns that you wish to extract from your query (if it finds results). The <strong>second</strong> parameter is the callback I mentioned.</p>

<p>Let's see this in action. Here are a few examples I put together illustrating how you might use this.</p>

<h2>Fail with Response</h2>

<pre><code class="language-php">$r = App\User::where('id', 1)-&gt;firstOr(['name', 'email'], function () {
    return response()-&gt;json([
        'message' =&gt; 'This user does not exist.',
    ], 404);
});
</code></pre>

<pre><code class="language-php">Illuminate\Http\JsonResponse {#3474
     +headers: Symfony\Component\HttpFoundation\ResponseHeaderBag {#3480},
     +original: [
       "message" =&gt; "This user does not exist.",
     ],
     +exception: null,
   }
</code></pre>

<h2>Fail with Exception</h2>

<pre><code class="language-php">$r = App\User::where('id', 1)-&gt;firstOr(['name', 'email'], function () {
    throw new \Exception('This user does not exist.');
});
</code></pre>

<pre><code class="language-php">Exception {#3388
    #message: "This user does not exist",
    #file: "...\vendor\psy\psysh\src\ExecutionLoopClosure.php(55) : eval()'d code",
    #line: 2,
}
</code></pre>

<h2>Fail with Logger</h2>

<pre><code class="language-php">$r = App\User::where('id', 1)-&gt;firstOr(['name', 'email'], function () {
    logger('This user does not exist.');
});
</code></pre>

<p>Then in <code>laravel.log</code> you will see:</p>

<pre><code class="language-bash">[2019-06-02 21:14:03] local.DEBUG: This user does not exist.
</code></pre>

<h2>Success</h2>

<p>A successful query returns an Eloquent collection object.</p>

<pre><code class="language-php">App\User {#3441
    name: "Mr. Leon Muller",
    email: "maiya57@example.net",
}
</code></pre>

<p>If you want the array representation, you can chain <code>toArray()</code>, of course:</p>

<pre><code class="language-php">$r = App\User::where('id', 1)-&gt;firstOr(['name', 'email'], function () {
    throw new \Exception('This user does not exist.');
})-&gt;toArray();
</code></pre>

<p>But there is an alternative:</p>

<pre><code class="language-php">$r = App\User::where('id', 1)-&gt;firstOr(function() {
    throw new \Exception('This user does not exist.');
})-&gt;only('name', 'email');
</code></pre>

<pre><code class="language-php">// result
[
    "name" =&gt; "Mr. Leon Muller",
    "email" =&gt; "maiya57@example.net",
]
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/laravel-withoutexceptionhandling-gotcha</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/laravel-withoutexceptionhandling-gotcha" />
    <title>Laravel withoutExceptionHandling() Gotcha</title>
    <published>2019-06-03T00:00:00+00:00</published>
    <updated>2019-06-03T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Laravel offers a nice helper method that you can use temporarily in your tests to turn off exception handling by the framework. What happens in certain cases is that you won&#039;t see the actual error that triggered the exception, but merely the exception......</summary>
    <content type="html"><![CDATA[
        <p>Laravel offers a nice helper method that you can use temporarily in your tests to turn off exception handling by the framework. What happens in certain cases is that you won't see the actual error that triggered the exception, but merely the exception itself. This method can be called from inside a test as follows:</p>

<pre><code class="language-php">$this-&gt;withoutExceptionHandling();
</code></pre>

<p>This is particularly useful in situations which trigger a <code>500 Server Error</code> that doesn't offer much context. Of course, you can dig through the logs, but it's a lot quicker to be able to see the error output when you're running the test.</p>

<p>I've been using this technique for a while now but it hadn't occurred to me that it matters <em>where</em> you place the call within your test.</p>

<p>Here's the scenario that brought me to this realization. Imagine that I am using TDD to test logic for a simple blog, more specifically that I can create a new post. And this is how I would write a basic test in Laravel for this functionality.</p>

<pre><code class="language-php">/**
* @test
*/
public function as_an_authenticated_user_i_can_create_a_post()
{
    $this
        -&gt;post('/posts/store')
        -&gt;assertRedirect('/login');

    $body = [
        'title' =&gt; 'A new post',
        'contents' =&gt; 'Post content',
    ];

    $this
        -&gt;actingAs($this-&gt;bob)
        -&gt;post('/posts/store', $body)
        -&gt;assertRedirect('/posts');

    $this-&gt;assertDatabaseHas('posts', $body);
}
</code></pre>

<p>My test has 3 assertions. First, I'm making sure that an unauthenticated user cannot create a post - they are redirected to the login page. Second, as an authenticated user, I want to be redirected to the list of posts after successfully creating a new post. Third, I also want to make sure that the post data was saved to the database.</p>

<p>Running this test produces the following error:</p>

<pre><code class="language-bash">Response status code [500] is not a redirect status code.
Failed asserting that false is true.
...
</code></pre>

<p>Well, that's not very helpful. <code>$this-&gt;withoutExceptionHandling();</code> to the rescue! I plug it in quickly as the first line in my test and...</p>

<pre><code class="language-php">public function i_can_create_a_post()
{
    $this-&gt;withoutExceptionHandling();
    ...
</code></pre>

<p>... the output is not what I would expect.</p>

<p><strong>Output</strong></p>

<pre><code class="language-bash">There was 1 error:

1) Tests\Feature\ExampleTest::i_can_create_a_post
Illuminate\Auth\AuthenticationException: Unauthenticated.
...

</code></pre>

<p>Um... what gives? I already know that my first assertion passed. I know that because I wrote that statement first and the test was green. After writing the next 2 assertions, it went red. It looks like it catches the first action/assertion:</p>

<pre><code class="language-php">$this
    -&gt;post('/posts/store')
    -&gt;assertRedirect('/login');
</code></pre>

<p>Instead of the second action/assertion (which is what triggers the <code>500 Server Error</code>):</p>

<pre><code class="language-php">$this
    -&gt;actingAs($this-&gt;bob)
    -&gt;post('/posts/store', $body)
    -&gt;assertRedirect('/posts');
</code></pre>

<p>So it turns out that <code>withoutExceptionHandling</code> needs to be right above the piece of code that fails, and not at the beginning of the test, as I had thought until now. Correcting my mistake:</p>

<pre><code class="language-php">...
$this-&gt;withoutExceptionHandling();
$this
    -&gt;actingAs($this-&gt;bob)
    -&gt;post('/posts/store', $body)
    -&gt;assertRedirect('/posts');
...
</code></pre>

<p><strong>Output</strong></p>

<p>Ah, this is the real issue.</p>

<pre><code class="language-bash">There was 1 error:

1) Tests\Feature\ExampleTest::i_can_create_a_post
Illuminate\Database\QueryException: SQLSTATE[42S22]: Column not found: 1054 Unknown column 'content' in 'field list' (SQL: insert into `posts` (`user_id`, `title`, `content`, `updated_at`, `created_at`) values (3, A new post, Post content, 2019-06-02 15:40:01, 2019-06-02 15:40:01))
...
Caused by
PDOException: SQLSTATE[42S22]: Column not found: 1054 Unknown column 'content' in 'field list'
...
</code></pre>

<p>That's more like it. This was the error I was looking for, and it makes all the sense in the world. Notice the little typo <code>contents</code> vs <code>content</code>.</p>

<p>And that's all there is to it. By discovering this, <code>withoutExceptionHandling</code>'s utility has increased in my eyes.</p>

<p>On a final note, <code>withoutExceptionHandling</code> takes an additional argument, which is an array of exceptions that you want it to ignore. If you want to find out more about the inner workings of this function, you can find it at <code>vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/InteractsWithExceptionHandling.php</code>.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/make-safari-download-files-properly</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/make-safari-download-files-properly" />
    <title>How to Make Safari Download Files Properly with Laravel</title>
    <published>2019-06-02T00:00:00+00:00</published>
    <updated>2019-06-02T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I&#039;m building a file upload/download feature into my SaaS app Sikrt, and after working out the kinks in a prototype version of the feature, to my consternation I discovered that clicking the download link in Safari produced a different outcome than in......</summary>
    <content type="html"><![CDATA[
        <p>I'm building a file upload/download feature into my SaaS app <a href="https://sikrt.com/">Sikrt</a>, and after working out the kinks in a prototype version of the feature, to my consternation I discovered that clicking the download link in Safari produced a different outcome than in other browsers.</p>

<p>The expected behavior when downloading, say, a <code>.jpg</code> file is for the file to be saved with the designated name and the <code>.jpg</code> extension. Well, turns out that Safari appends a <code>.html</code> at the end, thus saving the file as <code>filename.jpg.html</code> instead of <code>filename.jpg</code>.</p>

<p>After a little googling I came across this <a href="https://forums.macrumors.com/threads/safari-erroneously-adding-dms-extension-to-downloads.2080108/">discussion</a> that helped me isolate and fix the problem. The interesting bit here is the <code>curl -I</code> command.</p>

<p>Running this command against my download link, I got the following (in this particular case I'm trying to download an icon file with an <code>.ico</code> extension):</p>

<pre><code class="language-bash">curl -I http://sikrt.test/d/oc6anhsjt

HTTP/1.1 200 OK
Server: nginx/1.15.0
Content-Type: text/html; charset=UTF-8
Connection: keep-alive
Vary: Accept-Encoding
X-Powered-By: PHP/7.2.12
0: Content-Type: application/octet-stream
1: Content-Disposition: attachment; filename="oc6anhsjt.ico"
Cache-Control: no-cache, private
Date: Mon, 03 Jun 2019 02:23:03 GMT
Content-Disposition: attachment; filename=oc6anhsjt.ico
Set-Cookie: XSRF-TOKEN=eyJpdiI6IlVoXC8yOTVtQWRVT3ZuUmVqWitOcWhBPT0iLCJ2YWx1ZSI6InA3aHpSWE5pR0o3cUV5cEdjQXJySE4yVFJsdFVqQk5UOUtyXC9UQTZ2TXRLYlBUYWk1aFJ3UU5hVWk4TE5ibTdYIiwibWFjIjoiODY3ZmQ4ZTU1YzNjODRmODU2ZTgyNDJhN2Q2YjczNzRjY2MyZGIwZDVhMjFhZmMxNDU1NDJlNjZhOGM0NzYyZSJ9; expires=Tue, 04-Jun-2019 02:23:03 GMT; Max-Age=86400; path=/
Set-Cookie: sikrt_session=eyJpdiI6IkpRWjhlUEJvTTltWTBkUGFGa1h5bWc9PSIsInZhbHVlIjoicTdycmQ1U3czSGhoS3BFNER5SGo3bFo4OG1yMFFwRGxWZTdmSmZcL1dPNVdTUmROY1VPMUV2YXRNOW9HK1pUb2oiLCJtYWMiOiIzMjMxYjIwODE4NjVhNGQ3OTRmN2ViZTgxMDRmYTMyOGFkMzA1ZTM3YTNiNzZmMGUxYjc5MjdiYmYwZGQ0MWU1In0%3D; expires=Tue, 04-Jun-2019 02:23:03 GMT; Max-Age=86400; path=/; httponly
</code></pre>

<p>The trick to get Safari to download the file with the proper extension is to send the correct headers, in this case <code>Content-Type: application/octet-stream</code>.</p>

<p>Right off the bat you might notice this bit:</p>

<pre><code class="language-bash">0: Content-Type: application/octet-stream
1: Content-Disposition: attachment; filename="oc6anhsjt.ico"
</code></pre>

<p>Something looks funky here, and that's because there shouldn't be a <code>0:</code> in front of the header. Why is that? Because I was passing the headers as an array of strings instead of an associative array. Laravel's documentation doesn't explain how the headers array should be structured. Running the curl command helped me diagnose the issue.</p>

<p><strong>Before</strong></p>

<pre><code class="language-php">[
    'Content-Type: application/octet-stream',
    ...
]
</code></pre>

<p><strong>After</strong></p>

<pre><code class="language-php">[
    'Content-Type' =&gt; 'application/octet-stream',
    ...
]
</code></pre>

<p>Following this fix, Safari was able to download the file with the correct extension.</p>

<p>Running <code>curl -I</code> again produced the correct output:</p>

<pre><code class="language-bash">curl -I http://sikrt.test/d/oc6anhsjt

HTTP/1.1 200 OK
Server: nginx/1.15.0
Content-Type: application/octet-stream
Content-Length: 610
Connection: keep-alive
X-Powered-By: PHP/7.2.12
Content-Disposition: attachment; filename=oc6anhsjt.ico
Cache-Control: no-cache, private
Date: Mon, 03 Jun 2019 02:27:05 GMT
Set-Cookie: XSRF-TOKEN=eyJpdiI6InIySU1uOEJcL0hDMFdyaUk3Q3BIKzB3PT0iLCJ2YWx1ZSI6IjVFaG9Iem1zeXY5UVdPeCtWdFkzXC95cVcwU2Njd0ZyMHFaMXd6bDQrUnJYNkJtRUV5THk4UlFPcjRXaTMzd2F0IiwibWFjIjoiZDA1MWU1YzEzYzVlMGE0OWZjMTIxNzdhOTNmMGU1YTY1MzRkMWYzMWU5M2RmYWZjMDVlZWU5YmUzYTU3ZjNhNCJ9; expires=Tue, 04-Jun-2019 02:27:05 GMT; Max-Age=86400; path=/
Set-Cookie: sikrt_session=eyJpdiI6IkxGT0lUZytKSXFuUWltOXZqSzAySHc9PSIsInZhbHVlIjoiazRDUHlUUHNEMTI3cGtkRktGVVFEMmo1QXRhc1MyVGE1OEdCNE9SZHJPWXRLbVowSXJLZDRcL3QwYTg4MVZFbFwvIiwibWFjIjoiNWU1NDllNDJiNTBiZDFiYzY0NThlNThjYTg4NmM0OGEyNzFmYmYwZjg1ODdhYzQzZjJjMzJhY2MyOWI0NThjOCJ9; expires=Tue, 04-Jun-2019 02:27:05 GMT; Max-Age=86400; path=/; httponly
</code></pre>

<p>The piece of code that handles the download looks something like this:</p>

<pre><code class="language-php">use League\Flysystem\Filesystem;
use League\Flysystem\Memory\MemoryAdapter;

// ...

$filesystem = new Filesystem(new MemoryAdapter()); // keep the file in memory
$filesystem-&gt;write('file', $filedata);

return response()-&gt;streamDownload(function () use ($filesystem) {
    echo $filesystem-&gt;read('file');
}, $filename, [
    'Content-Type' =&gt; 'application/octet-stream',
    'Content-Length' =&gt; $filesystem-&gt;getSize('file'),
    'Content-Disposition' =&gt; "attachment; filename=\"{$filename}\"",
]);
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/developer-podcasts</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/developer-podcasts" />
    <title>Developer Podcasts I Listen To</title>
    <published>2019-06-01T00:00:00+00:00</published>
    <updated>2019-06-01T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">

Listening to right now:


Full Stack Radio
Syntax.fm
Laravel News Podcast
No Plans to Merge
Rework
The Laravel Snippet
The Laracasts Snippet or directly from Laracasts


On my radar:


Twenty Percent Time




I wasn&#039;t really a podcast person until I......</summary>
    <content type="html"><![CDATA[
        <h2>TL;DR list</h2>

<p>Listening to right now:</p>

<ul>
<li><a href="http://www.fullstackradio.com/">Full Stack Radio</a></li>
<li><a href="https://syntax.fm/">Syntax.fm</a></li>
<li><a href="https://laravel-news.com/podcast/">Laravel News Podcast</a></li>
<li><a href="https://noplanstomerge.simplecast.com/">No Plans to Merge</a></li>
<li><a href="https://rework.fm/">Rework</a></li>
<li><a href="https://blog.laravel.com/">The Laravel Snippet</a></li>
<li><a href="https://laracasts.simplecast.fm/">The Laracasts Snippet</a> or directly from <a href="https://laracasts.com/podcast">Laracasts</a></li>
</ul>

<p>On my radar:</p>

<ul>
<li><a href="https://podcasts.apple.com/us/podcast/twenty-percent-time/id1231652815">Twenty Percent Time</a></li>
</ul>

<h2>Why listen to dev podcasts in the first place?</h2>

<p>I wasn't really a podcast person until I started listening to Full Stack Radio but from that moment I got hooked, and every 30m - 1h of idle time thereon was reclaimed. As it happens, my daily work commute falls between 30m - 1h which gives me the opportunity to listen to 2 episodes every day while I'm driving. I only wish I had done this years before, during hundreds of hours literally wasted driving to work through our lovely Chicago traffic.</p>

<p>There's a lot more to say about why I now believe that listening to profession-related podcasts is a very good thing, but for now I'll just mention that to me, personally, listening to something technical such as a developer podcast must be done under certain conditions. I can code while I'm listening to music, but I can't do that while listening to a podcast. The reverse is true while I'm driving. My driving muscle memory is strong enough that I can focus on the technical aspects discussed in the podcast.</p>

<p>Another way of looking at this from an engineering perspective is that, while coding, my brain needs to allocate most resources to the main process, and much less to the secondary process of listening to something. Driving is one of those activities that I can do very well on a secondary process. In over 20 years of driving without incidents I have yet to be proven wrong.</p>

<p>Beyond the <em>immersion</em> in a certain culture aspect (that I want to revisit in more detail in a future article), one huge benefit of hearing cool things about the technologies I work with on a daily basis is that it energizes me first thing in the morning. Imagine arriving at work all pumped up about a new technique or technology.</p>

<p>Bottom line, I've become a strong believer that there aren't much better ways to reclaim time wasted commuting (or engaging in a huge variety of brainless activities) than to listen to a podcast tied to your profession.</p>

<p>One word of caution though: take care while doing something potentially dangerous while wearing headphones. I had a close call once while riding my bicycle and listening to a podcast through headphones. In that situation my mind tends to become boxed in, and gradually loses connection to the outside. Lesson learned - I'll never do that again.</p>

<h2>The long version</h2>

<p>Let's dissect each of the developer podcasts I've listed, to see what makes them special. I won't go into too much detail about where to find each podcast but my platform of choice is Spotify. If it's not there, the chance of listening to it decreases for me, as I do most of my listening while driving. I'm not an iOS user either so iTunes is not a great option for me.</p>

<h3><a href="http://www.fullstackradio.com/">Full Stack Radio</a></h3>

<p><img src="https://media.simplecast.com/podcast/image/279/small_1413649662-artwork.jpg" alt="Full Stack Radio podcast" title="Full Stack Radio podcast" width=200></p>

<p><strong>Hosted by</strong> <a href="https://adamwathan.me/">Adam Wathan</a></p>

<p><strong>Length</strong> 20m - 1h+</p>

<p><strong>Spotify?</strong> Yes</p>

<p><strong>What is it about?</strong> Adam's background is Laravel and Vue.js, and of course <a href="https://tailwindcss.com/">Tailwind CSS</a> so a fair number of episodes revolve around this ecosystem, but there are a numerous discussions on a variety of industry topics, to quote, "everything from user experience and product design to unit testing and system administration". More often than not he interviews developers, designers, and people from the software development community.</p>

<p>If there's one podcast above all else that I would pick, this would be it. Once I discovered it, I listened to all the episodes, going back in time all the way to the beginning. I've learned something new or interesting from every single episode - 115 and counting as of this writing.</p>

<h3><a href="https://syntax.fm/">Syntax.fm</a></h3>

<p><img src="https://syntax.fm/static/logo.png" alt="Syntax.fm podcast" title="Syntax.fm podcast" width=200 class="bg-black"></p>

<p><strong>Hosted by</strong> <a href="https://wesbos.com/">Wes Bos</a> &amp; <a href="https://www.scotttolinski.com/">Scott Tolinski</a></p>

<p><strong>Length</strong> 20m - 1h+</p>

<p><strong>Spotify?</strong> Yes</p>

<p><strong>What is it about?</strong> Wes and Scott are full stack developers deeply embedded in React-land. React is not really my cup of tea (Vue.js FTW) but this is my second most listened podcast because most episodes are not React-specific but rather touch heavily on general JavaScript issues, as well as a diverse range of topics relevant to developers. The two have great chemistry and are absolutely hilarious to listen to.</p>

<p>I found out about Wes Bos when I attended his talk on CSS Grid at Laracon 2018. Both him and Scott run their own businesses focused mainly on creating premium video tutorials on React and JavaScript-related subjects.</p>

<h3><a href="https://laravel-news.com/podcast/">Laravel News Podcast</a></h3>

<p><strong>Hosted by</strong> <a href="https://twitter.com/JacobBennett">Jake Bennett</a> &amp; <a href="https://dyrynda.com.au/">Michael Dyrynda</a></p>

<p><strong>Length</strong> 20m - 1h+</p>

<p><strong>Spotify?</strong> Yes</p>

<p><strong>What is it about?</strong> As the title suggests, this podcast is mostly about things happening in Laravel-land. Each week or so, Jake and Michael discuss new features that are added to the framework, as well as new packages and various other related topics. If you want to become a better Laravel developer I highly recommend it.</p>

<p>I started listening to this podcast recently and, once again, I fired up my time machine and went back all the way to the first episode. I didn't adopt Laravel very early on so I missed a lot of the goodness that happened in older versions. Because Laravel is my universe for the foreseeable future, I want to absorb as much of it as I can, so it makes sense to me to witness "history in the making", if you'll forgive the pun.</p>

<h3><a href="https://noplanstomerge.simplecast.com/">No Plans to Merge</a></h3>

<p><img src="https://cdn.simplecast.com/images/6232da22-dbb9-483e-9208-b2a740767729/5c14c978-65b9-4737-ab69-30c4ca672938/300x300/1551799236artwork.jpg" alt="No Plans to Merge podcast" title="No Plans to Merge podcast" width=200></p>

<p><strong>Hosted by</strong> <a href="https://calebporzio.com/">Caleb Porzio</a> &amp; <a href="https://www.coulb.com/">Daniel Coulbourne</a></p>

<p><strong>Length</strong> 20m - 30m</p>

<p><strong>Spotify?</strong> Yes</p>

<p><strong>What is it about?</strong> Two developers from <a href="https://tighten.co/">Tighten</a> discuss programming topics for a quick and succinct 20-30 minutes. Since both are Laravel devs, quite a few discussions touch Laravel to some extent but I really enjoy the light, friendly banter between the two. It's like having a conversation over a beer with your best bud about programming and work-related stuff. Very insightful, relaxing, and I appreciate the short length of each episode, which makes it easy to pick one up at odd moments when I don't have a full hour to dedicate to another podcast.</p>

<h3><a href="https://rework.fm/">Rework</a></h3>

<p><img src="https://is5-ssl.mzstatic.com/image/thumb/Podcasts113/v4/03/e8/bf/03e8bfd1-8fd4-b3f0-3fff-1b70e2c08cfd/mza_3283476777289345186.jpeg/268x0w.jpg" alt="Rework podcast" title="Rework podcast" width=200></p>

<p><strong>Hosted by</strong> The folks from <a href="https://basecamp.com/">Basecamp</a></p>

<p><strong>Length</strong> 20m - 30m</p>

<p><strong>Spotify?</strong> Yes</p>

<p><strong>What is it about?</strong> While this podcast is not specifically about programming, it is produced by one of my favorite companies in the world, and the subjects are nonetheless incredibly fascinating. Many of the episodes are about better ways to run a business, as well as various pitfalls that the company has encountered. Most episodes feature interviews with employees of the company in diverse positions (which makes it fascinating to take a peek inside Basecamp) but also with industry peers who hold similar views or face similar challenges. Overall it's a great insight into how a well-run company operates. The episodes are short and to the point, which makes them easily digestible at a moment's notice.</p>

<h3><a href="https://blog.laravel.com/">The Laravel Snippet</a></h3>

<p><strong>Hosted by</strong> <a href="https://twitter.com/taylorotwell">Taylor Otwell</a></p>

<p><strong>Length</strong> 10m - 15m</p>

<p><strong>Spotify?</strong> No</p>

<p><strong>What is it about?</strong> Very quick snippets by Taylor Otwell, the creator of Laravel. This one is a little weird because it's not a podcast per-se, rather more of an audio blog where he gives updates on how his work on Laravel and related products is progressing. Must-listen if you are a Laravel dev, as it gives insight into Taylor's mindset.</p>

<h3><a href="https://laracasts.simplecast.fm/">The Laracasts Snippet</a> or directly from <a href="https://laracasts.com/podcast">Laracasts</a></h3>

<p><strong>Hosted by</strong> <a href="https://twitter.com/jeffrey_way">Jeffrey Way</a> aka <a href="https://laracasts.com/">Laracasts</a></p>

<p><strong>Length</strong> 10m - 20m</p>

<p><strong>Spotify?</strong> No</p>

<p><strong>What is it about?</strong> Short random snippets, some touching on programming, others not so much, by Jeffrey Way. Jeffrey is a huge contributor to the Laravel community and the creator and owner of Laracasts and I enjoy these tidbits a lot. Too bad they're not up on Spotify.</p>

<h3><a href="https://podcasts.apple.com/us/podcast/twenty-percent-time/id1231652815">Twenty Percent Time</a></h3>

<p><img src="https://cdn.simplecast.com/images/6bdfa258-406c-4604-9f4f-3497d4624662/9b054610-f9b1-4c37-bd53-4ccbf40c20f4/640x640/1513886509artwork.jpg" alt="Twenty Percent Time podcast" title="Twenty Percent Time podcast" width=200></p>

<p><strong>Hosted by</strong> <a href="https://calebporzio.com/">Caleb Porzio</a> &amp; <a href="https://www.coulb.com/">Daniel Coulbourne</a></p>

<p><strong>Length</strong> 20m - 30m</p>

<p><strong>Spotify?</strong> No</p>

<p><strong>What is it about?</strong> As far as I can tell, Twenty Percent Time morphed into No Plans to Merge. Both are hosted, of course, by Daniel and Caleb. I plan to go back and listen to this podcast as well, because I like the duo so much.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/how-to-install-httpie-windows-10</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/how-to-install-httpie-windows-10" />
    <title>How to Install HTTPie in Windows 10</title>
    <published>2019-05-26T00:00:00+00:00</published>
    <updated>2019-05-26T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">HTTPie where were you all my life? I just discovered this command line tool and wanted to give it a try right away. Unfortunately I was working on a Windows 10 machine and the project&#039;s homepage hints that it&#039;s a Mac exclusive. Luckily, the documentation......</summary>
    <content type="html"><![CDATA[
        <p><a href="https://httpie.org/">HTTPie</a> where were you all my life? I just discovered this command line tool and wanted to give it a try right away. Unfortunately I was working on a Windows 10 machine and the project's homepage hints that it's a Mac exclusive. Luckily, the <a href="https://httpie.org/doc#windows-etc">documentation</a> contains installation instructions for Windows.</p>

<p>While you can just follow the instructions there, I'm going to document the steps anyway, for my own sake.</p>

<h2>Install pip/Python and upgrade pip</h2>

<p>Download the <a href="https://www.python.org/downloads/windows/">Windows x86-64 executable installer</a> and run it.</p>

<pre><code class="language-bash">python -m pip install --upgrade pip
</code></pre>

<h2>Install HTTPie</h2>

<pre><code class="language-bash">pip install --upgrade pip setuptools pip install --upgrade httpie
</code></pre>

<p>That's it.</p>

<h2>Basic usage</h2>

<p>First of all, the command itself is <code>http</code>, NOT ~~httpie~~. I was wondering why it wasn't working after I installed it.</p>

<p>I was interested in testing a GET API endpoint in a local environment that had a bunch of query parameters appended at the end of the URL.</p>

<p>Turns out that HTTPie has a special syntax for query parameters, which can cast to specific types if the value is not a string. Here are a few, but the <a href="https://httpie.org/doc#querystring-parameters">documentation</a> has more.</p>

<p><strong>Strings</strong> <code>name==john</code> or <code>name=="john wick"</code></p>

<p><strong>Numbers/Booleans</strong> <code>year:=2015</code> or <code>active:=true</code></p>

<p><strong>Request headers</strong> <code>key:value</code> or <code>key:"value with spaces"</code></p>

<h2>Example</h2>

<p>Here I'm making a GET request with some query parameters as well as a couple of headers.</p>

<p><code>GET example.com/api/quote?year=2015&amp;name=john&amp;birthday=06/21/2001&amp;zipcode=60201</code></p>

<p>Headers:</p>

<p><code>Authorization:"Bearer tPOm3BXiYSv7fwnIN5dUCzpCy6sGH2Mdclj2BwBZvFw..."</code><br />
<code>accept:application/json</code></p>

<p>Command terminal (Windows/Mac/etc):</p>

<pre><code class="language-bash">http GET example.com/api/quote year:=2015 name==john birthday==06/21/2001 zipcode==60201 Authorization:"Bearer tPOm3BXiYSv7fwnIN5dUCzpCy6sGH2Mdclj2BwBZvFwbDhLrAh0NmvtnyF4fdR3CbqAAdPQMPbSFYKXk" accept:"application/json"
</code></pre>

<p>The response:</p>

<pre><code class="language-bash">HTTP/1.1 200 OK 
Cache-Control: no-cache 
Connection: keep-alive 
Content-Type: application/json 
Date: Sat, 19 May 2019 19:11:45 GMT 
Server: nginx/1.15.0 
Set-Cookie: XSRF-TOKEN=eyJpdiI6ImlCK3M4bXI3NXdwUmw3ekpTcEs...; expires=Sat, 19-May-2019 21:11:45 GMT; Max-Age=7200; path=/ Set-Cookie: laravel_session=eyJpdiI6ImZYMm10djgwS29i...%3D; expires=Fri, 25-May-2019 07:11:45 GMT; Max-Age=216000; path=/; HttpOnly Transfer-Encoding: chunked

{ "data": { "somenumber": 4242.42 }, "message": "Here is your data", "success": true }
</code></pre>

<p>If you get the following error when running it in Git Bash:</p>

<pre><code class="language-bash">http: error: Request body (from stdin or a file) and request data (key=value) cannot be mixed. Pass --ignore-stdin to let key/value take priority...
</code></pre>

<p>Then just run the same command but append the <code>--ignore-stdin</code> flag at the end.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/my-first-laravel-package-silent-spam-filter</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/my-first-laravel-package-silent-spam-filter" />
    <title>My First Laravel Package - laravel-silent-spam-filter</title>
    <published>2019-05-21T00:00:00+00:00</published>
    <updated>2019-05-21T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I&#039;ve wanted to contribute to open-source for a long time but getting started is always the hardest part. PHP package development is one of those areas that sounds simple on the surface but if you want to do it properly you&#039;ll realize that there are many......</summary>
    <content type="html"><![CDATA[
        <p>I've wanted to contribute to open-source for a long time but getting started is always the hardest part. PHP package development is one of those areas that sounds simple on the surface but if you want to do it properly you'll realize that there are many subtle layers to it, making it easy to find excuses not to do it at all.</p>

<p>So when I heard that <a href="https://twitter.com/marcelpociot">Marcel Pociot</a> (a prominent open-source contributor and Laravel expert) was working on a course on <a href="https://phppackagedevelopment.com/">PHP package development</a> I knew it was going to be worth every penny. And no, in case you're wondering, he's not paying me to say this, I'm just very happy with his course.</p>

<p>Owning the tools is cool but putting them to work is another story. Luckily, one thing I don't lack is a shortage of ideas. Initially I had a more ambitious package in mind (which will probably be the next one I build) but the need arose for a reusable and configurable piece of Laravel code, and after a Sunday of on-and-off coding I produced what I'm about to describe.</p>

<h2>The TL;DR version</h2>

<p>If you want to hear my rambling history of how this package came about, hang around. Otherwise, here's the short version of what it does.</p>

<p><a href="https://github.com/breadthe/laravel-silent-spam-filter">laravel-silent-spam-filter</a> does a very simple thing. It analyzes a string for certain keywords or phrases and returns <code>true</code> if it finds those words or <code>false</code> otherwise. Sounds useless but there's more depth to it.</p>

<p>First, the keywords are configurable in a config file. When you publish the package config, a file will be created under <code>config/silentspam.php</code> that comes pre-loaded with just 2 entries:</p>

<pre><code class="language-php">return [
    'blacklist' =&gt; [
        '(beautiful|best|sexy) girls',
        'girls in your (city|town)',
    ],
];
</code></pre>

<p>You can replace these and/or add your own. In this example, if a string contains any combination of "beautiful girls" or "best girls" or "sexy girls" or "girls in your city" or "girls in your town", it will be marked as spam.</p>

<p>Thus, the second feature is that you can use regex patterns to filter spam.</p>

<p>Third, you can use Laravel's facade to run the spam check, as shown below:</p>

<pre><code class="language-php">SilentSpam::isSpam('Find sexy girls in your city'); // true
</code></pre>

<p>Finally, while the keywords in the config are global to the entire application, you can add additional keywords at runtime, before calling <code>isSpam</code>:</p>

<pre><code class="language-php">SilentSpam::blacklist([
    'buy pills',
]);

SilentSpam::isSpam('Go to this site to buy pills'); // true
</code></pre>

<p>And if you feel lazy, there's also a <code>notSpam</code> command, which is exactly the opposite of <code>isSpam</code>.</p>

<pre><code class="language-php">SilentSpam::notSpam('This is a normal message'); // true
</code></pre>

<h2>A spammy situation</h2>

<p>One of my projects named <a href="https://sikrt.com/">Sikrt</a> has apparently caught the attention of some spammers who've latched on to the public-facing contact form, despite being protected by Google's Recaptcha. I wasn't getting a lot of spam, but it was constantly trickling in, at a rate of 1-2 a day. Perhaps Recaptcha was actually doing its job, or else I would have been swamped? Who knows. The fact is that it still let some of it through.</p>

<p>Now, these spammers (bots really) operate under the premise that any public form might be attached to a commenting system or something similar (like on a blog for example). They'll fill in and submit the form with their garbage which almost always contains links to whatever they're trying to promote. Very often these messages will get passed through, ending up as "legit" content on that page. From there, Google will pick up the links, and a few visitors will click them. Sometimes the form contents are emailed to the site owner's address, from where additional mischief can occur.</p>

<p>Unfortunately for them, all my contact form does is save an entry in my database. I didn't build a more complex solution because I don't need it at the moment. I can check messages directly in the DB. So the spam doesn't end up anywhere productive. There's still the matter of clearing these out occasionally (as I said, the volume received is low).</p>

<p>I thought I would automate this clearing-out process without complex checks or third-party APIs.</p>

<p>But before that, I wanted to try yet another protection method: the honeypot. And what package would be better suited for this than one from Spatie (a heavy-duty Laravel contributor). I added <a href="https://github.com/spatie/laravel-honeypot">laravel-honeypot</a> but unfortunately, just like Google Recapcha, it still lets some spam through. I was kinda expecting that. By now I would've thought that spammers have grown wise to this method and built smarter bots that can bypass it.</p>

<h2>The package idea</h2>

<p>By analyzing the spam messages I had so far, I noticed some very obvious patterns and words that could be easily filtered by. It looks like all of it came from the same spamming "authority" so it was trivial to create a few very simple rules to handle those kinds of messages.</p>

<p>The way I decided to approach it was to simply not save anything in the database if it matched those patterns. The spammer would receive feedback that the form was submitted successfully, but the data would end up in a black hole.</p>

<p>Initially I built the pattern matching as a service in <a href="https://sikrt.com/">Sikrt</a> itself, using TDD of course, but soon after launching it in production I decided it would make a great (if very basic) first package.</p>

<p>I wanted 2019 to be the year I released at least one open-source package and even though I had something more complex in mind, this was a great learning experience.</p>

<h2>Building the package</h2>

<p>As I mentioned at the beginning, <a href="https://phppackagedevelopment.com/">PHP package development</a> is amazing in guiding you step by step through the PHP package-building process, including Laravel-specifics. Hand-crafting still remains a little tedious, especially for someone who hasn't done this a hundred times before, but luckily the author has also built <a href="https://laravelpackageboilerplate.com/#/">Laravel Package Boilerplate</a> which makes it trivial to scaffold the whole directory structure, along with all the bells and whistles he describes in the course.</p>

<p>Of course, as it oft happens in these pioneering moments, after moving my original logic to the package, I spent 3 hours trying to figure out why my tests were failing with a cryptic message, only to discover that I had the wrong namespace somewhere in my new code. Lesson learned.</p>

<p>My original spam filtering service worked something like this:</p>

<pre><code class="language-php">use App\Services\SpamService;

// Silently reject spam messages
if ((new SpamService(config('spam.blacklist')))-&gt;notSpam(request('message'))) {
    // save the contact form data
}
</code></pre>

<p>My goal was to simplify the API by implicitly loading the blacklist from the config file, and also to be able to use Laravel's facade accessor.</p>

<p>Converting the code was simply a matter of copy-pasting it from the original service to the new package structure, replacing the calls with the facade accessor and making sure the tests still worked. Which, until I discovered the elusive mangled namespace, they didn't.</p>

<p>Overall, the experience was smoother than expected. Back in my <a href="https://sikrt.com/">Sikrt</a> project codebase, it was even more simple to <code>composer require breadthe/laravel-silent-spam-filter</code> and swap everything out. And the app continued to work perfectly.</p>

<p>## In conclusion</p>

<p>The package may be very basic but it's my package and I'm proud of it. Building it allowed me not just to dip my toes in this exciting new world, but also opened my eyes to what the package-building process entails.</p>

<p>You may ask why this is strictly a Laravel package. For one thing, I'm deeply embedded in the Laravel ecosystem and wouldn't have anything else at the moment. For another, as simple as it is, I don't think there would be much value in creating a general PHP package. After all, the core functionality is just a regex check. But if you are still upset about the Laravel exclusivity, you are always invited to <a href="https://github.com/breadthe/laravel-silent-spam-filter/blob/master/CONTRIBUTING.md">contribute</a>.</p>

<p>It's a bit of a drug. I'm already brainstorming what the next one should be.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/useful-linux-commands</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/useful-linux-commands" />
    <title>Useful Linux Commands</title>
    <published>2019-05-19T00:00:00+00:00</published>
    <updated>2019-05-19T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">This is my collection of useful Linux shell commands from the perspective of a developer who is not primarily a sysadmin, yet uses Linux on a daily basis to test and deploy code in local, staging, and production environments.

Many of these are curated......</summary>
    <content type="html"><![CDATA[
        <p>This is my collection of useful Linux shell commands from the perspective of a developer who is not primarily a sysadmin, yet uses Linux on a daily basis to test and deploy code in local, staging, and production environments.</p>

<p>Many of these are curated from the amazing <a href="https://serversforhackers.com/">Server for hackers</a> course.</p>

<h1>SSH Commands</h1>

<h2>Generate an SSH key</h2>

<pre><code class="language-bash">ssh-keygen -t rsa -C "user@example.com" -b 4096
# optionally add a passphrase
</code></pre>

<h2>Add an SSH key to your keychain (Mac)</h2>

<p>Add a key to the keychain.</p>

<pre><code>ssh-add -K ~/.ssh/id_rsa
# enter passphrase
</code></pre>

<p>List all the keys in your keychain.</p>

<pre><code class="language-bash">ssh-keygen -l
</code></pre>

<h1>Copy text to the clipboard</h1>

<h2>Mac</h2>

<pre><code class="language-bash">pbcopy &lt; ~/.ssh/id_rsa.pub
# or
cat ~/.ssh/id_rsa.pub | pbcopy
</code></pre>

<h2>Ubuntu</h2>

<pre><code class="language-bash">cat ~/.ssh/id_rsa.pub | /dev/clipboard
</code></pre>

<h1>lsb_release</h1>

<p>Shows info about the Linux distribution.</p>

<pre><code class="language-bash">lsb_release -a
 ```

**Sample Output**

```bash
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 18.04.2 LTS
Release:        18.04
Codename:       bionic
</code></pre>

<h1>uname</h1>

<p>Shows system info.</p>

<pre><code class="language-bash">uname -a
</code></pre>

<p><strong>Sample Output</strong></p>

<pre><code class="language-bash">Linux thebolapp-staging 4.15.0-1035-aws #37-Ubuntu SMP Mon Mar 18 16:15:14 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
</code></pre>

<pre><code class="language-bash">uname -r
</code></pre>

<p><strong>Sample Output</strong></p>

<pre><code class="language-bash">4.15.0-1035-aws
</code></pre>

<pre><code class="language-bash">uname -i
</code></pre>

<pre><code class="language-bash">x86_64
</code></pre>

<h1>df -h</h1>

<p>Shows file system disk space (<code>-h</code> for human-readable file sizes).</p>

<pre><code class="language-bash">df -h
</code></pre>

<p><strong>Sample Output</strong></p>

<pre><code class="language-bash">Filesystem      Size  Used Avail Use% Mounted on
udev            985M     0  985M   0% /dev
tmpfs           200M  816K  199M   1% /run
/dev/xvda1       20G  6.9G   13G  36% /
tmpfs           996M     0  996M   0% /dev/shm
tmpfs           5.0M     0  5.0M   0% /run/lock
tmpfs           996M     0  996M   0% /sys/fs/cgroup
/dev/loop0       18M   18M     0 100% /snap/amazon-ssm-agent/1068
/dev/loop2       90M   90M     0 100% /snap/core/6673
/dev/loop3       18M   18M     0 100% /snap/amazon-ssm-agent/930
/dev/loop5       92M   92M     0 100% /snap/core/6531
/dev/loop6       90M   90M     0 100% /snap/core/6818
/dev/loop1       18M   18M     0 100% /snap/amazon-ssm-agent/1335
tmpfs           200M     0  200M   0% /run/user/1001
</code></pre>

<h1>du storage/ -cah -d 1 -t 20M | sort -hr</h1>

<p>Disk usage. Useful to check how much space a directory, its subdirectories, and files, occupy. These are just some of the most useful flags and options that I use.</p>

<ul>
<li><code>storage/</code> check inside the specified directory (by default will check the current root)</li>
<li><code>-c</code> shows a summary of the total</li>
<li><code>-a</code> shows files in addition to directories</li>
<li><code>-h</code> human readable format</li>
<li><code>-d 1</code> looks 1 directory deep</li>
<li><code>-t 50M</code> shows only files/directories over the specified size</li>
<li><code>| sort -hr</code> sort by size (<code>-h</code> sorts by human-readable sizes) (<code>-r</code> sorts in descending order of size)</li>
</ul>

<p><strong>Examples</strong></p>

<p>Show the size of all 1st level subdirectories.</p>

<pre><code class="language-bash">du -h -d 1
181M    ./vendor
972K    ./resources
112K    ./config
113M    ./storage
116K    ./tests
728K    ./app
148K    ./database
36K     ./routes
26M     ./.git
40K     ./bootstrap
9.0M    ./public
331M    .
</code></pre>

<p>Show the size of all 1st level subdirectories and files.</p>

<pre><code class="language-bash">du -ah -d 1
181M    ./vendor
368K    ./composer.lock
4.0K    ./.env
972K    ./resources
4.0K    ./.gitignore
112K    ./config
113M    ./storage
324K    ./yarn.lock
4.0K    ./server.php
20K     ./README.md
4.0K    ./composer.json
4.0K    ./artisan
116K    ./tests
728K    ./app
4.0K    ./.gitattributes
148K    ./database
4.0K    ./webpack.mix.js
4.0K    ./phpunit.xml
4.0K    ./.env.example
36K     ./routes
32K     ./tailwind.js
26M     ./.git
4.0K    ./.editorconfig
40K     ./bootstrap
9.0M    ./public
4.0K    ./phpunit-printer.yml
4.0K    ./package.json
331M    .
</code></pre>

<p>Show the size of all 1st level subdirectories inside the <code>storage/</code> folder.</p>

<pre><code class="language-bash">du storage/ -cah -d 1
4.0K    storage/oauth-public.key
3.2M    storage/framework
110M    storage/app
260K    storage/logs
4.0K    storage/oauth-private.key
113M    storage/
113M    total
</code></pre>

<p>Show the size of all 1st level subdirectories, with a summary of the total, sorted by size.</p>

<pre><code class="language-bash">du -ch -d 1 | sort -h
36K     ./routes
40K     ./bootstrap
112K    ./config
116K    ./tests
148K    ./database
728K    ./app
972K    ./resources
9.0M    ./public
26M     ./.git
113M    ./storage
181M    ./vendor
331M    .
331M    total
</code></pre>

<p>Show the size of all 1st level subdirectories that are larger than 20M, with a summary of the total, sorted by descending size.</p>

<pre><code class="language-bash">du -ch -d 1 -t 20M | sort -hr
331M    total
331M    .
181M    ./vendor
113M    ./storage
26M     ./.git
</code></pre>

<h1>free</h1>

<p>Shows memory + swap usage.</p>

<pre><code class="language-bash">free -h
</code></pre>

<p><strong>Sample Output</strong></p>

<pre><code class="language-bash">              total        used        free      shared  buff/cache   available
Mem:           1.9G        704M        361M         17M        925M        1.1G
Swap:          1.0G         39M        984M
</code></pre>

<h1>ps</h1>

<p>Shows currently running processes.</p>

<pre><code class="language-bash">ps -aux
</code></pre>

<p><strong>Sample Output</strong></p>

<pre><code class="language-bash">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.4 225480  9072 ?        Ss   Apr09   1:35 /sbin/init
root         2  0.0  0.0      0     0 ?        S    Apr09   0:00 [kthreadd]
root         4  0.0  0.0      0     0 ?        I&lt;   Apr09   0:00 [kworker/0:0H]
root         6  0.0  0.0      0     0 ?        I&lt;   Apr09   0:00 [mm_percpu_wq]
root         7  0.0  0.0      0     0 ?        S    Apr09   3:18 [ksoftirqd/0]
root         8  0.0  0.0      0     0 ?        I    Apr09   9:29 [rcu_sched]
root         9  0.0  0.0      0     0 ?        I    Apr09   0:00 [rcu_bh]
root        10  0.0  0.0      0     0 ?        S    Apr09   0:00 [migration/0]
...
</code></pre>

<p>To sort by <strong>descending memory</strong> usage <code>ps aux --sort -rss</code>.</p>

<p>As above but <strong>get first n lines</strong> <code>ps aux --sort -rss | head -n15</code>.</p>

<h1>chmod</h1>

<p>Change user, group, other permissions.</p>

<pre><code class="language-bash">chmod u=rwx,g=rx,o=-rwx .ssh

# equivalent to
chmod u+rwx,g+rx,o-rwx .ssh
</code></pre>

<p>More advanced example:</p>

<pre><code class="language-bash">chmod u-rw+x,g-rw+x,o-r+wx XXX

# output
---x--x-wx  1 forge forge     0 May 17 19:14 XXX*
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/simple-http-response-trait-laravel</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/simple-http-response-trait-laravel" />
    <title>Simple HTTP Response Trait in Laravel</title>
    <published>2019-05-17T00:00:00+00:00</published>
    <updated>2019-05-17T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Building APIs in Laravel (or more generally in PHP) often implies responding with some sort of JSON data. The format of this data should ideally be standardized. I try to follow the JSON API standard loosely, though I&#039;m flexible on the exact......</summary>
    <content type="html"><![CDATA[
        <p>Building APIs in Laravel (or more generally in PHP) often implies responding with some sort of JSON data. The format of this data should ideally be standardized. I try to follow the <a href="https://jsonapi.org/">JSON API standard</a> loosely, though I'm flexible on the exact implementation.</p>

<p>My personal flavor of this typically responds with something similar to this for a successful request:</p>

<pre><code class="language-php">// Failed request
return response([
        'success' =&gt; true,
        'data' =&gt; $data,
        'message' =&gt; $message,
    ], 200);
</code></pre>

<p>Or for a failed request:</p>

<pre><code class="language-php">// Failed request
return response([
        'success' =&gt; false,
        'message' =&gt; $message,
    ], 422);
</code></pre>

<p><strong>Note</strong> The <code>422 Unprocessable Entity</code> status seems to be quite popular in the Laravel ecosystem so that's what I use for generic error codes.</p>

<p>Repeating the above snippets over and over for a myriad endpoints can get tedious, and is a good example of code that can be extracted into some sort of reusable entity.</p>

<h2>Traits to the rescue!</h2>

<p>Traits hold a special place in my heart. I like how they can be used to handle multiple inheritance but also to share some similar piece of functionality across different classes.</p>

<p>I keep my traits in <code>app/Traits</code>, which is standard practice in a Laravel project. In this particular case I named my trait <code>RespondsWithHttpStatus</code> (yeah, I know, it's always hard to name things). And here's how such a trait might be constructed:</p>

<pre><code class="language-php">trait RespondsWithHttpStatus
{
    protected function success($message, $data = [], $status = 200)
    {
        return response([
            'success' =&gt; true,
            'data' =&gt; $data,
            'message' =&gt; $message,
        ], $status);
    }

    protected function failure($message, $status = 422)
    {
        return response([
            'success' =&gt; false,
            'message' =&gt; $message,
        ], $status);
    }
}
</code></pre>

<h2>Usage</h2>

<p>You can import this trait into any class or method where you need to return an HTTP response.</p>

<pre><code class="language-php">use App\Traits\RespondsWithHttpStatus;

class MyClass
{
    use RespondsWithHttpStatus;
    ...
</code></pre>

<p><strong>Respond with success</strong></p>

<pre><code class="language-php">return $this-&gt;success(
    'Here is your data',
    [
        'field1' =&gt; 'Field 1 data',
        'field2' =&gt; 'Field 2 data',
    ]
);
</code></pre>

<p><strong>Response</strong> <code>200 OK</code></p>

<pre><code class="language-json">{
  "success": true,
  "data": {
    "field1": "Field 1 data",
    "field2": "Field 2 data",
  },
  "message": ""
}
</code></pre>

<p><strong>Respond with failure</strong></p>

<pre><code class="language-php">return $this-&gt;failure('Invalid token');
</code></pre>

<p><strong>Response</strong> <code>422 Unprocessable Entity</code></p>

<pre><code class="language-json">{
    "success": false,
    "message": "Invalid token"
}
</code></pre>

<p>Right away you can tell that in most situations where I'm returning a standard successful <code>200</code> code or a generic error <code>422</code> code, there's a lot less boilerplate to deal with but there's always the option to return a different status code if required.</p>

<p>May the Trait be with you!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/speed-up-webpack-watch-windows</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/speed-up-webpack-watch-windows" />
    <title>Speed Up Webpack Watch in Windows</title>
    <published>2019-05-01T00:00:00+00:00</published>
    <updated>2019-05-01T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">One annoyance of working in Windows in an open-source tech stack is that a lot of the dev tooling isn&#039;t as good as on a Mac. The problem rears its ugly head whenever I have to use &lt;code&gt;composer&lt;/code&gt; or &lt;code&gt;npm&lt;/code&gt;/&lt;code&gt;yarn&lt;/code&gt;. Which is......</summary>
    <content type="html"><![CDATA[
        <p>One annoyance of working in Windows in an open-source tech stack is that a lot of the dev tooling isn't as good as on a Mac. The problem rears its ugly head whenever I have to use <code>composer</code> or <code>npm</code>/<code>yarn</code>. Which is pretty much a gazillion times a day. Despite my job laptop having more horsepower than my personal MacBook Pro, the former takes a lot longer to perform any <code>composer</code> or <code>npm</code> task in the terminal.</p>

<p>Don't get me wrong, I'm not a Mac snob. I've used Windows PCs for most of my career, only switching to Mac a few years ago for development and, oh boy, I would never go back to a PC for any kind of PHP/JS or any kind of open-source work in general. Sometimes, though, an employer can insist on a specific platform, hence the subject of this article.</p>

<p>As a quick recap, the Windows 10 Pro environment in question runs from an SSD on an 8th-gen i7 machine with 16GB RAM. I typically use GitBash as my terminal of choice. I've tried the built-in Ubuntu shell as well as ConEmu which does a somewhat reasonable job of allowing multiple tabs, though it's buggy and I gave up on it. Instead, I just open multiple GitBash windows which is less than ideal but is mitigated by the fact that I have 3 screens at my disposal.</p>

<p>The main project I'm building and maintaining is a Laravel app with lots of Vue sprinkled in, in the form of single-file components.</p>

<p>Whenever I work in Vue, I fire up <code>yarn watch</code> &lt;-- Yarn master race üôÇ. Well, here's what used to happen every time I saved my work. Webpack went through it's build process, but got stuck for a very long time at 91% with this message:</p>

<pre><code>WAIT Compiling... 10:49:04 AM

91% additional asset processing
</code></pre>

<p>The whole process took close to 30 seconds. You can imagine this adds up throughout the day. It's long enough to be frustrating but short enough that I can't do anything else in the meantime but twiddle my thumbs.</p>

<p>Having chalked it down to Windows being... Windows, I just about gave up on a good dev experience, until I decided to seek a possible solution.</p>

<p>Well, despair no more fellow Windows hostages. This quick setting will speed up Webpack while it's watching for changes. Just add <code>devtool: 'eval'</code> to your Webpack config as shown:</p>

<pre><code class="language-javascript">mix.webpackConfig({ 
    devtool: 'eval',
    plugins: [],
    ...
})
.extract()
...
</code></pre>

<p>Keep in mind that the Webpack configuration above is taken from a Laravel 5.8 project, meaning it's wrapped inside <a href="https://laravel-mix.com/">Laravel Mix</a> but in a regular Webpack project you can use the same method.</p>

<p>You'll need to restart <code>yarn watch</code> after adding this setting, but the watch build time drops down to 1.5-10 seconds, a 2x - 15x speed increase üöÄ!</p>

<h2>Digging deeper</h2>

<p>What I failed to mention (and it's an important one!) is that I don't use this technique in production, but merely in my local dev environment. In fact Webpack mentions just that in the <code>devtool</code> <a href="https://webpack.js.org/configuration/devtool/">documentation</a>.</p>

<p>If you are curious if there's any different in the <strong>production</strong> bundle size without this option and after applying it, yes there is. Using <code>devtool: 'eval'</code> produces a larger bundle. Here's a comparison (the CSS bundles are omitted because their size is not affected). The biggest difference is in the vendor bundle</p>

<p><strong>With</strong> <code>devtool: 'eval'</code>:</p>

<pre><code>DONE Compiled successfully in 32631ms 10:12:56 AM

      Asset           Size       Chunks               Chunk Names
/js/app.js           656 kB        1         [emitted] [big] /js/app 
/js/vendor.js       1.25 MB        3         [emitted] [big] /js/vendor

Done in 37.33s.
</code></pre>

<p><strong>Without</strong> <code>devtool: 'eval'</code>:</p>

<pre><code>DONE Compiled successfully in 78692ms 10:23:16 AM

      Asset          Size        Chunks                Chunk Names
/js/app.js          407 kB         1          [emitted] [big] /js/app 
/js/vendor.js       345 kB         3          [emitted] [big] /js/vendor

Done in 83.60s. 
</code></pre>

<p>Happy Webpacking!</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/laravel-global-url-helpers</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/laravel-global-url-helpers" />
    <title>Laravel Add &amp; Remove URL Query Parameters Helpers</title>
    <published>2019-04-07T00:00:00+00:00</published>
    <updated>2019-04-07T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">

There are situations where I need to remove one or more query parameters from my app&#039;s URL, and then return the new URL. Similarly, I want to be able to add a new parameter easily. Furthermore, in my Laravel 5.8 app, I want to invoke these helpers from......</summary>
    <content type="html"><![CDATA[
        <h2>The problem</h2>

<p>There are situations where I need to remove one or more query parameters from my app's URL, and then return the new URL. Similarly, I want to be able to add a new parameter easily. Furthermore, in my Laravel 5.8 app, I want to invoke these helpers from anywhere in my code, including Blade templates.</p>

<p>This type of scenario is very common in filtering (or faceting) data by various (URL) parameters.</p>

<h2>The solution</h2>

<p>I made these two functions that do exactly that. Be aware that these are Laravel-specific (due to using the built-in <code>url()</code> helper) but they can be easily adapted to be framework-agnostic.</p>

<p><strong>Remove Parameters</strong></p>

<pre><code class="language-php">/**
 * URL before:
 * https://example.com/orders/123?order=ABC009&amp;status=shipped
 *
 * 1. remove_query_params(['status'])
 * 2. remove_query_params(['status', 'order'])
 *
 * URL after:
 * 1. https://example.com/orders/123?order=ABC009
 * 2. https://example.com/orders/123
 */
function remove_query_params(array $params = [])
{
    $url = url()-&gt;current(); // get the base URL - everything to the left of the "?"
    $query = request()-&gt;query(); // get the query parameters (what follows the "?")

    foreach($params as $param) {
        unset($query[$param]); // loop through the array of parameters we wish to remove and unset the parameter from the query array
    }

    return $query ? $url . '?' . http_build_query($query) : $url; // rebuild the URL with the remaining parameters, don't append the "?" if there aren't any query parameters left
}
</code></pre>

<p><strong>Add Parameters</strong></p>

<pre><code class="language-php">/**
 * URL before:
 * https://example.com/orders/123?order=ABC009
 *
 * 1. add_query_params(['status' =&gt; 'shipped'])
 * 2. add_query_params(['status' =&gt; 'shipped', 'coupon' =&gt; 'CCC2019'])
 *
 * URL after:
 * 1. https://example.com/orders/123?order=ABC009&amp;status=shipped
 * 2. https://example.com/orders/123?order=ABC009&amp;status=shipped&amp;coupon=CCC2019
 */
function add_query_params(array $params = [])
{
    $query = array_merge(
        request()-&gt;query(),
        $params
    ); // merge the existing query parameters with the ones we want to add

    return url()-&gt;current() . '?' . http_build_query($query); // rebuild the URL with the new parameters array
}
</code></pre>

<h2>Converting to global helpers</h2>

<p>For my particular use-case, I needed to be able to use these functions either from a controller (or other class), or directly in a Blade template. Though some detest the idea of global functions, Laravel uses this pattern a lot and it does make it a lot easier to build features and get things done.</p>

<p>Based on this <a href="https://stackoverflow.com/a/28290359">StackOverflow answer</a>, one way of creating a global helpers file is to follow the following steps.</p>

<ol>
<li>Create a <code>helpers.php</code> file (containing your functions) in the <code>bootstrap</code> folder.</li>
<li>Add it to <code>composer.json</code></li>
</ol>

<pre><code class="language-json">"autoload": {
        "classmap": [
            ...
        ],
        "psr-4": {
            "App\\": "app/"
        },
        "files": [
            "bootstrap/helpers.php"
        ]
}
</code></pre>

<ol start="3">
<li>Run <code>composer dump-autoload</code>.</li>
</ol>

<p>Now your helpers should be available globally throughout your app.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/update-enum-column-doctrine-exception</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/update-enum-column-doctrine-exception" />
    <title>Update Enum Column Doctrine Exception in Laravel</title>
    <published>2019-03-28T00:00:00+00:00</published>
    <updated>2019-03-28T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I have a predilection for using enum column types in my Laravel projects. I don&#039;t abuse them but I turn to them often when I have a well-defined range of possible values.

One of the disadvantages of using the &lt;code&gt;enum&lt;/code&gt; column type in Laravel......</summary>
    <content type="html"><![CDATA[
        <p>I have a predilection for using enum column types in my Laravel projects. I don't abuse them but I turn to them often when I have a well-defined range of possible values.</p>

<p>One of the disadvantages of using the <code>enum</code> column type in Laravel migrations - it turns out - is that you can't easily perform a migration on a table that contains an enum column. So it's not even a matter of <em>changing</em> the enum column itself, merely the presence of an enum column in a table will screw things up when trying to execute the migration.</p>

<p>In my scenario, I wanted to create a new migration in my Laravel 5.8 project to update a colum from <code>string</code> to <code>text</code>. The table in question contained an enum column.</p>

<p>When I ran the migration, I got the following error:</p>

<pre><code>Doctrine\DBAL\DBALException  : Unknown database type enum requested, 
Doctrine\DBAL\Platforms\MySQL57Platform may not support it.
</code></pre>

<p>After some research I came upon <a href="https://stackoverflow.com/questions/29165259/laravel-db-migration-renamecolumn-error-unknown-database-type-enum-requested">this answer</a> on Stack Overflow which clears things up a little.</p>

<p><a href="https://laravel.com/docs/5.8/migrations#modifying-columns">Laravel's documentation</a> does mention that in order to do this you first need to <code>composer require doctrine/dbal</code>.</p>

<p>Following that, my solution became this:</p>

<pre><code class="language-php">?php

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class UpdateWidgetNameWidgetsTable extends Migration
{
    public function up()
    {
        $this-&gt;registerEnumWithDoctrine();

        Schema::table('widgets', function (Blueprint $table) {
            $table-&gt;text('widget_name')-&gt;nullable()-&gt;change();
        });
    }

    public function down()
    {
        $this-&gt;registerEnumWithDoctrine();

        Schema::table('widgets', function (Blueprint $table) {
            $table-&gt;string('widget_name')-&gt;nullable()-&gt;change();
        });
    }

    private function registerEnumWithDoctrine()
    {
        DB::getDoctrineSchemaManager()
            -&gt;getDatabasePlatform()
            -&gt;registerDoctrineTypeMapping('enum', 'string');
    }
}
</code></pre>

<p>Basically you need to register and map the <code>enum</code> type to <code>string</code> with Doctrine, using this snippet:</p>

<pre><code class="language-php">DB::getDoctrineSchemaManager()-&gt;getDatabasePlatform()-&gt;registerDoctrineTypeMapping('enum', 'string');
</code></pre>

<p>Admittedly, the <code>registerEnumWithDoctrine</code> function should probably reside in the global scope but I think it's fine for the purpose of this example.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/php-simulate-exception-status</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/php-simulate-exception-status" />
    <title>Simulate HTTP Exception Status</title>
    <published>2019-03-27T00:00:00+00:00</published>
    <updated>2019-03-27T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">This may seem so obvious that I shouldn&#039;t be blogging about it but I&#039;m doing it anyway.

I haven&#039;t really had to simulate a specific HTTP exception but recently I needed to create some custom 404, etc error pages in a Laravel project and I wanted to test......</summary>
    <content type="html"><![CDATA[
        <p>This may seem so obvious that I shouldn't be blogging about it but I'm doing it anyway.</p>

<p>I haven't really had to simulate a specific HTTP exception but recently I needed to create some custom 404, etc error pages in a Laravel project and I wanted to test that.</p>

<p>To make a short story long, there were 2 reasons for that. First, that project was upgraded to Laravel 5.8 which changes the default error screens for 403, 404, 500, and possibly others. Gone are the lovely Steve Schoger illustrations + "Go Home" button, to be replaced with a generic "404 Not Found" message and no link to go back to the home page. I don't want to rely on my users to figure out what to do in an error scenario so I built a few error pages with a proper link to the site root. Second, I wanted to extend the site's layout, to be able to have the app header and footer.</p>

<p><strong>Note</strong> Laravel makes it easy to create custom error pages. Simply create a file named <code>404.blade.php</code> or equivalent, and place it in <code>views/errors</code>.</p>

<p>To test the various error statuses, I used this nifty 1-liner to "simulate" the error, although that's a misnomer because it's actually throwing an error.</p>

<p>So in the controller that would return a view (any view for the purposes of testing this), instead of returning the view, use this instead (import at the top, of course):</p>

<pre><code class="language-php">use Symfony\Component\HttpKernel\Exception\HttpException;
...

throw new HttpException(500);
</code></pre>

<p>When you load that view, you'll see the HTTP exception instead, which should load up the appropriate error page. Of course, this is not at all Laravel-specific.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/vue-router-mouse-event-handling</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/vue-router-mouse-event-handling" />
    <title>How to Handle Vue Router Link Mouse Events Properly</title>
    <published>2019-03-24T00:00:00+00:00</published>
    <updated>2019-03-24T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Digging deeper into Vue router, I attempted something fairly mundane, namely listening to a couple of mouse events on an anchor tag generated by &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;.

I simply wanted to toggle a menu when hovering over a certain link. Easy,......</summary>
    <content type="html"><![CDATA[
        <p>Digging deeper into <a href="https://router.vuejs.org/">Vue router</a>, I attempted something fairly mundane, namely listening to a couple of mouse events on an anchor tag generated by <code>&lt;router-link&gt;</code>.</p>

<p>I simply wanted to toggle a menu when hovering over a certain link. Easy, right? Well, the events simply weren't registering.</p>

<p><strong>Note</strong> I am using Vue 2.6 for this example.</p>

<p>A bit of a head-scratcher but after some research I found out that all I needed to do was to apply the <code>native</code> modifier to the event, as shown below.</p>

<p><strong>Before</strong></p>

<p>This code doesn't trigger the handler.</p>

<pre><code class="language-html">&lt;template&gt;
    &lt;router-link
      to="/someroute"
      @mouseenter="handleEvent"
      @mouseleave="handleEvent"
    &gt;
      Some Route
    &lt;/router-link&gt;
&lt;/template&gt;
</code></pre>

<p><strong>After</strong></p>

<p>This works.</p>

<pre><code class="language-html">&lt;template&gt;
    &lt;router-link
      to="/someroute"
      @mouseenter.native="handleEvent"
      @mouseleave.native="handleEvent"
    &gt;
      Some Route
    &lt;/router-link&gt;
&lt;/template&gt;
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/fix-vuejs-netlify-routing</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/fix-vuejs-netlify-routing" />
    <title>Fix Routing Issues for a VueJS App Deployed to Netlify</title>
    <published>2019-03-23T00:00:00+00:00</published>
    <updated>2019-03-23T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Had a WTF moment when I deployed a new Vue project to Netlify, only to be confronted with this message when refreshing any route that&#039;s not root. It worked just fine locally! Here&#039;s how to fix this.

I&#039;m working on a new, fun project called Craftnautica.......</summary>
    <content type="html"><![CDATA[
        <p>Had a WTF moment when I deployed a new Vue project to Netlify, only to be confronted with this message when refreshing any route that's not root. It worked just fine locally! Here's how to fix this.</p>

<p>I'm working on a new, fun project called <a href="https://craftnautica.netlify.com/">Craftnautica</a>. In short, it's a fansite (crafting helper) for the game <a href="https://unknownworlds.com/subnautica/">Subnautica</a>.</p>

<p>The entire app is a Vue SPA (Single Page App) and because it doesn't require a back-end, I'm hosting it statically on <a href="https://https://www.netlify.com//">Netlify</a>.</p>

<p>I use <a href="https://router.vuejs.org/">Vue Router</a> to build nested routes. A very basic nested route would be <code>https://craftnautica.netlify.com/sn</code>. Navigating to it via a link worked just fine after I deployed the code to Netlify, however, refreshing the page after the fact, produced the error message you see above. And that went on for every nested route in the app.</p>

<p>To make a long story short, I discovered that an easy fix is to inclide a <code>netlify.toml</code> file in the root folder of your app, with the following:</p>

<pre><code class="language-yaml">[[redirects]]
  from = "/*"
  to = "/"
  status = 200
</code></pre>

<p>Redeploy and all the nested routes and permalinks can be refreshed and accessed individually!</p>

<p>You can read more about Netlify's <a href="https://www.netlify.com/docs/netlify-toml-reference/">toml.xml</a> file and how <a href="https://www.netlify.com/docs/redirects/">redirects</a> work.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/reusable-create-update-form</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/reusable-create-update-form" />
    <title>A Pattern for Building Reusable Create/Update Forms</title>
    <published>2019-03-04T00:00:00+00:00</published>
    <updated>2019-03-04T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Like a lot of people, I hate working with forms. It&#039;s one of those tedious things that almost never gets better. Most projects that accept user input will require one or more forms at some point. And very often, we need to perform the standard CRUD......</summary>
    <content type="html"><![CDATA[
        <p>Like a lot of people, I hate working with forms. It's one of those tedious things that almost never gets better. Most projects that accept user input will require one or more forms at some point. And very often, we need to perform the standard CRUD operations on data.</p>

<p>If you do this often enough, you'll soon notice that create and update forms have generally the same fields and the only thing that is different is the action and the form submit endpoint. I admit that through laziness and lack of planning I've duplicated create and update form code often in the past. Here, though, is what I consider a better pattern to deal with this situation, with a minimum of code duplication.</p>

<p>I've been applying this technique a lot in my Laravel projects but it can be used in other frameworks or languages with a few tweaks.</p>

<h2>The Naive Approach</h2>

<p>In this example, I have 2 routes, one pointing to the create view, another to the update view, both containing the respective form templates.</p>

<p>** Create View **</p>

<pre><code class="language-html">@extends('layouts.app')

@section('content')
    &lt;h1&gt;Create Widget&lt;/h1&gt;

    &lt;form method="POST" action="{{ route('widget.store') }}"&gt;
        @csrf

        &lt;input id="brand" type="text" class="{{ $errors-&gt;has('brand') ? ' is-invalid' : '' }}" name="brand" value="{{ old('brand') ?? $widget-&gt;brand }}"&gt;

        ... A LOT OF INPUTS

        &lt;button type="submit"&gt;Create&lt;/button&gt;
    &lt;/form&gt;
&lt;/section&gt;
@endsection

</code></pre>

<p>** Update View **</p>

<pre><code class="language-html">@extends('layouts.app')

@section('content')
    &lt;h1&gt;Edit Widget&lt;/h1&gt;

    &lt;form method="POST" action="{{ route('widget.update', $widget-&gt;id) }}"&gt;
        @csrf
        @method('PATCH')

        &lt;input id="brand" type="text" class="{{ $errors-&gt;has('brand') ? ' is-invalid' : '' }}" name="brand" value="{{ old('brand') ?? $widget-&gt;brand }}"&gt;

        ... A LOT OF INPUTS

        &lt;button type="submit"&gt;Update&lt;/button&gt;
    &lt;/form&gt;
&lt;/section&gt;
@endsection

</code></pre>

<p>It quickly becomes obvious that the only difference between the two forms is the method (<code>POST</code> vs <code>PATCH</code>) and the route (<code>route('widget.create')</code> vs <code>route('widget.update', $widget-&gt;id)</code>). Maybe this isn't as noticeable for short 1-2 field forms, but when you have lots of them, the pain gets real.</p>

<p>There must be a better way to de-duplicate the markup, right? There is.</p>

<h2>The Better Approach</h2>

<p>The much more elegant solution is to extract the common form markup into a Blade partial and to include this partial, along with some metadata, in the original create/update views.</p>

<p>** New Create View **</p>

<pre><code class="language-html">@extends('layouts.app')

@section('content')
    &lt;h1&gt;Create Widget&lt;/h1&gt;

    &lt;form method="POST" action="{{ route('widget.store') }}"&gt;
        @csrf

        @include('partials._form', [
            'widget' =&gt; new \App\Widget(),
            'btnText' =&gt; 'Create',
        ])
    &lt;/form&gt;
&lt;/section&gt;
@endsection
</code></pre>

<p>** New Update View **</p>

<pre><code class="language-html">@extends('layouts.app')

@section('content')
    &lt;h1&gt;Edit Widget&lt;/h1&gt;

    &lt;form method="POST" action="{{ route('widget.update', $widget-&gt;id) }}"&gt;
        @csrf
        @method('PATCH')

        @include('partials._form', [
            'btnText' =&gt; 'Update',
        ])
    &lt;/form&gt;
&lt;/section&gt;
@endsection
</code></pre>

<p>** <code>_form.blade.php</code> Partial **</p>

<pre><code class="language-html">&lt;input id="brand" type="text" class="{{ $errors-&gt;has('brand') ? ' is-invalid' : '' }}" name="brand" value="{{ old('brand') ?? $widget-&gt;brand }}"&gt;

... A LOT OF INPUTS

&lt;button type="submit"&gt;
    {{ __($btnText) }}
&lt;/button&gt;
</code></pre>

<p>With this new approach we use the exact same form input markup for both forms. The form tags along with the <code>csrf</code> and <code>method</code> inputs are now the skeleton containing the partial we extracted.</p>

<p>To allow the value of the field to be pre-populated if it exists (<code>old('brand') ?? $widget-&gt;brand</code>), we either pass the <code>$widget</code> model for an existing item, or we instantiate a new model when creating a new item.</p>

<p>For other differences between the two forms, we can pass data to the partial in an array, like we did here for the submit button label in the form of <code>btnText</code>.</p>

<h2>In Closing</h2>

<p>It's worth thinking about duplication ahead of time. Often we start building a form, template, controller or other logic and then we add a very similar behaviour for a different route or model or entity, only to realize that they both operate in a very similar manner. Good planning is easier said than done but it's never too late to go back and do some refactoring. For my part, I always try to keep my code as DRY as possible.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/simplified-dynamic-svg-icon-component</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/simplified-dynamic-svg-icon-component" />
    <title>Simplified Dynamic SVG Icon Component</title>
    <published>2019-02-08T00:00:00+00:00</published>
    <updated>2019-02-08T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Well this is embarrassing. One of my flaws is that sometimes I tend to jump to a conclusion before I have all the facts. I guess a strength is recognizing this flaw. Do they cancel each other out? Maybe. No one likes egg on their face but I&#039;ll admit that......</summary>
    <content type="html"><![CDATA[
        <p>Well this is embarrassing. One of my flaws is that sometimes I tend to jump to a conclusion before I have all the facts. I guess a strength is recognizing this flaw. Do they cancel each other out? Maybe. No one likes egg on their face but I'll admit that my <a href="/blog/supercharged-dynamic-vue-svg-icon-component">previous article</a> was flawed. I will leave it intact for posterity though, both to show the errata and to provide an alternative way of doing things.</p>

<p>Massive mea culpa: I didn't read the <a href="https://tailwindcss.com/docs/svg">TailwindCSS documentation</a> carefully, or I just didn't pay enough attention, but the framework <em>does</em> contain support for SVG fill and stroke. Basically you can apply <code>.fill-current</code> and/or <code>.stroke-current</code> to an <code>svg</code> element and presto, your icon is colored based on the <code>.text-&lt;color&gt;</code> class that is also applied to it.</p>

<p>What's even funnier is that Adam specifically mentions in the documentation the two SVG icon libraries I love the most: <a href="http://www.zondicons.com/">Zondicons</a> and <a href="https://feathericons.com/">Feathericons</a>. Since one is fill-based, while the other is stroke-based, this new and improved dynamic component wrapper should work equally well for both libraries.</p>

<p>As a result, the API for my dynamic icon component can be simplified a lot.</p>

<p>This</p>

<pre><code class="language-html">&lt;v-icon icon="menu" fill="red"&gt;&lt;/v-icon&gt;
</code></pre>

<p>becomes</p>

<pre><code class="language-html">&lt;v-icon icon="menu" class="text-red fill-current stroke-current"&gt;&lt;/v-icon&gt;
</code></pre>

<p>But I can simplify it even more by always applying <code>fill-current</code> and <code>stroke-current</code> inside the scoped CSS of the <code>VIcon.vue</code> component:</p>

<pre><code class="language-html">&lt;style&gt;
svg {
    @apply cursor-pointer;
    @apply inline-block;
    @apply stroke-current;
    @apply fill-current;
}
&lt;/style&gt;
</code></pre>

<p>I no longer need the <code>fill</code> prop, nor the <code>dynamicFill</code> computed props.</p>

<p>Another thing that is no longer required is the <code>size</code> prop. It turns out that you can simply apply Tailwind <code>w-</code> and <code>h-</code> classes to the <code>svg</code> element. However, I decided to keep the <code>size</code> prop in order to offer finer control over icon sizing, in pixels. However, to keep the UI consistent, I would strive to use Tailwind's classes instead.</p>

<p>In summary, to generate a blue 12px menu icon I would do this:</p>

<pre><code class="language-html">&lt;v-icon icon="menu" class="text-blue h-3 w-3"&gt;&lt;/v-icon&gt;
</code></pre>

<p><strong>Note</strong> The above computes to 12px in my case because I have the font size on the root <code>body</code> element set to 16px. Hence, <code>h-3</code> and <code>w-3</code> are defined as 0.75rem in Tailwind's default config, which evaluates to 0.75 * 16px = 12px.</p>

<p>There you go, while the previous version works just as well, this updated one - I think - is simpler and overall better.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/supercharged-dynamic-vue-svg-icon-component</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/supercharged-dynamic-vue-svg-icon-component" />
    <title>Supercharged Dynamic Vue SVG Icon Component</title>
    <published>2019-02-07T00:00:00+00:00</published>
    <updated>2019-02-07T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">
  UPDATE 8 Feb 2019 In my excitement I failed to realize that TailwindCSS makes it even easier to accomplish what I&#039;ve outlined in this article, with fewer lines of code and a simplified API. Check out my follow-up article for the details.


As a......</summary>
    <content type="html"><![CDATA[
        <blockquote>
  <p><strong>UPDATE 8 Feb 2019</strong> <em>In my excitement I failed to realize that TailwindCSS makes it even easier to accomplish what I've outlined in this article, with fewer lines of code and a simplified API. Check out my <a href="/blog/simplified-dynamic-svg-icon-component/">follow-up article</a> for the details.</em></p>
</blockquote>

<p>As a developer with designer aspirations I've found it a little cumbersome to use SVG icons in my projects. Unfortunately SVG is not as straightforward to use as a popular font icon library such as <a href="https://fontawesome.com/">FontAwesome</a>. There are all kinds of considerations to keep in mind, amongst them fill color and size.</p>

<p>And then there's the verbosity of the code required to render this stuff.</p>

<p>Compare the code for a FontAwesome <code>plane</code> icon...</p>

<pre><code class="language-html">&lt;i class="fas fa-plane"&gt;&lt;/i&gt;
</code></pre>

<p>... with the code for the same type of icon from one of my favorite SVG icon libraries, <a href="http://www.zondicons.com/">Zondicons</a>:</p>

<pre><code class="language-html">&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"&gt;&lt;path d="M8.4 12H2.8L1 15H0V5h1l1.8 3h5.6L6 0h2l4.8 8H18a2 2 0 1 1 0 4h-5.2L8 20H6l2.4-8z"/&gt;&lt;/svg&gt;
</code></pre>

<p>I mean, who wants to deal with this stuff? And the example above is actually a simple one. The more complex the icon, the more complex the code.</p>

<p>And yet, SVG icons have a <a href="https://css-tricks.com/icon-fonts-vs-svg/">lot</a> of <a href="https://cloudfour.com/thinks/seriously-dont-use-icon-fonts/">advantages</a> over font icons.</p>

<p>I started moving away from FontAwesome towards SVG icons the same way I've ditched <a href="https://getbootstrap.com/">Bootstrap</a> in favor of <a href="https://tailwindcss.com/">TailwindCSS</a>.</p>

<p>So one of the things I've tried to accomplish is to create a reusable Vue component that I can wrap around the SVG icon definition. That way I don't have to worry about SVG code polluting my views but I can also control the icon's properties (fill and size for now) through a consistent interface in the form of props.</p>

<p>Yeah, I'm still dependent on Vue but all of my projects these days include it, whether I'm building a Laravel app (which comes with Vue) or a front-end app (which would also be Vue). While this article is written from Vue's perspective, I'm sure other front-end frameworks can accomplish the same thing.</p>

<p>After several iterations on the concept I arrived at this version that I feel covers most use-cases that I've encountered. The idea of a dynamic component surfaced after reading this article on <a href="https://alligator.io/vuejs/dynamic-components/">dynamic Vue components</a>.</p>

<h2>The Goal</h2>

<p>The end-goal is to be able to invoke my dynamic SVG icon like this:</p>

<pre><code class="language-html">&lt;v-icon icon="menu" fill="red" :size=32&gt;&lt;/v-icon&gt;
</code></pre>

<p>I also want to have a sensible default, so if do this...</p>

<pre><code class="language-html">&lt;v-icon&gt;&lt;/v-icon&gt;
</code></pre>

<p>... I'll see a square 24px <code>x</code> icon colored <code>grey-darkest</code> going by Tailwind colors.</p>

<h2>Assumptions</h2>

<p>For this example I'm using the awesome free SVG icon library <a href="https://feathericons.com/">Feathericons</a>. I just love the subtle style of these icons.</p>

<p>I created this mostly for Vue components inside of a Laravel project because this is what I'm mainly working with on a daily basis. There are some differences compared to a full Vue app, amongst them being the fact that I use auto-import and registration of components in Laravel. In a pure Vue app components are imported in a slightly different way, but that's not the subject of this exercise.</p>

<p>Finally, for <code>fill</code> I wanted to be able to use TailwindCSS's color classes, so the icon wrapper component is dependent on that.</p>

<h2>The Setup</h2>

<p>Starting with a <code>components</code> folder which contains all my <code>.vue</code> single-file components, I'll create a folder named <code>icons</code> and yet another folder named <code>svg</code> inside of that.</p>

<p><img src="/assets/img/2019-02-07-supercharged-dynamic-vue-svg-icon-component-2.jpg" alt="Folder structure" /></p>

<p>In the <code>icons</code> folder I have single Vue file named <code>VIcon.vue</code>. (If you're wondering why the V, it's sort of a <a href="https://vuejs.org/v2/style-guide/#Multi-word-component-names-essential">Vue component naming convention</a>). This is the icon wrapper component that handles all the logic and figures out which icon to load. Here's what it contains:</p>

<pre><code class="language-html">&lt;template&gt;
    &lt;svg
        xmlns="http://www.w3.org/2000/svg"
        :width="dynamicSize"
        :height="dynamicSize"
        :fill="dynamicFill"
        :stroke="dynamicFill"
        viewBox="0 0 24 24"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="feather"
        :class="icon"
    &gt;
        &lt;keep-alive&gt;
            &lt;component
                :is="dynamicIcon"
                :size=dynamicSize
                :fill="dynamicFill"
            &gt;&lt;/component&gt;
        &lt;/keep-alive&gt;
    &lt;/svg&gt;
&lt;/template&gt;

&lt;script&gt;
    import {colors} from '../../../../../tailwind';

    export default {
        props: {
            'icon': {
                'type': String,
                'required': false,
                'default': 'x',
            },
            'size': {
                'type': Number,
                'required': false,
                'default': 24,
            },
            'fill': {
                'type': String,
                'required': false,
                'default': 'grey-darkest',
            }
        },
        computed: {
            dynamicIcon: function () {
                return `v-${this.icon}`; // default icon: x
            },
            dynamicSize: function () {
                return this.size; // default size: 24
            },
            dynamicFill: function () {
                return colors[this.fill]; // default fill: grey-darkest
            }
        }
    }
&lt;/script&gt;

&lt;style&gt;
svg {
    @apply cursor-pointer;
    @apply inline-block;
}
&lt;/style&gt;
</code></pre>

<p>Next, inside the <code>svg</code> sub-folder I can dump all my icons. Based on the Feathericons library, I will name the files <code>VX.vue</code>, <code>VMenu.vue</code>, <code>VArrowDown.vue</code> and so on. Here's what <code>VMenu.vue</code> contains.</p>

<pre><code class="language-html">&lt;template&gt;
    &lt;g&gt;
        &lt;line x1="3" y1="12" x2="21" y2="12"&gt;&lt;/line&gt;
        &lt;line x1="3" y1="6" x2="21" y2="6"&gt;&lt;/line&gt;
        &lt;line x1="3" y1="18" x2="21" y2="18"&gt;&lt;/line&gt;
    &lt;/g&gt;
&lt;/template&gt;
</code></pre>

<p>Notice that I moved the <code>svg</code> wrapper from the original Feathericon <code>.svg</code> file to the parent component and replaced it with a SVG group <code>g</code>.</p>

<h2>The Explanation</h2>

<p>The dyamic component magic happens here:</p>

<pre><code class="language-html">&lt;component
    :is="dynamicIcon"
...

computed: {
    dynamicIcon: function () {
        return `v-${this.icon}`; // default icon: x
    },
...
</code></pre>

<p>If the code is not self-explanatory, basically I'm using Vue's <code>component</code> tag along with the <code>:is</code> prop to load a component whose name is computed. If I were to load the component statically I would do:</p>

<pre><code class="language-html">&lt;v-menu&gt;&lt;/v-menu&gt;
</code></pre>

<p>Because I'm receiving the string <code>menu</code> in my <code>:icon</code> prop, the computed property <code>dynamicIcon</code> becomes <code>v-icon</code>. At this point Vue knows how to render the correct component.</p>

<p>Next I'll bind a few dynamic properties on the <code>svg</code> tag with (computed) component props:</p>

<pre><code class="language-html">    &lt;svg
        ...
        :width="dynamicSize"
        :height="dynamicSize"
        :fill="dynamicFill"
        :stroke="dynamicFill"
        ...
</code></pre>

<p>If you take a closer look at <code>dynamicFill</code> you'll notice the definition is:</p>

<pre><code class="language-javascript">dynamicFill: function () {
    return colors[this.fill]; // default fill: grey-darkest
}
</code></pre>

<p>So what is this weird <code>colors[this.fill]</code> stuff? Well, I'm also importing the <code>colors</code> object from Tailwind's config file, typically located in the root of the project and named <code>tailwind.js</code>. Because it's a JS file, this is easy to do. Here's I'm simply referencing a key in the <code>colors</code> object.</p>

<p>If I were to render an icon like this...</p>

<pre><code class="language-html">&lt;v-icon
    fill="red-darkest"
&gt;&lt;/v-icon&gt;
</code></pre>

<p>... then <code>dyamicFill</code> translates to <code>colors['red-lightest']</code> and returns the string <code>#3b0d0c</code> which is how Tailwind's <code>red-lightest</code> color is defined. This, in turn, is applied to the SVG fill and stroke properties.</p>

<h2>Finally</h2>

<p>I hope that made sense but that's all there is to it. Here are a few more examples of how I would use this component.</p>

<p><img src="/assets/img/2019-02-07-supercharged-dynamic-vue-svg-icon-component-3.jpg" alt="Default icons, different sizes" /></p>

<pre><code class="language-html">&lt;v-icon :size=12&gt;&lt;/v-icon&gt;

&lt;v-icon&gt;&lt;/v-icon&gt;

&lt;v-icon :size=32&gt;&lt;/v-icon&gt;
</code></pre>

<p><img src="/assets/img/2019-02-07-supercharged-dynamic-vue-svg-icon-component-4.jpg" alt="Different icons, sizes, fills" /></p>

<pre><code class="language-html">&lt;v-icon :size=12&gt;&lt;/v-icon&gt;

&lt;v-icon&gt;&lt;/v-icon&gt;

&lt;v-icon icon="menu" fill="green" :size=32&gt;&lt;/v-icon&gt;
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/wink-vs-jigsaw</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/wink-vs-jigsaw" />
    <title>Wink vs Jigsaw</title>
    <published>2019-02-03T00:00:00+00:00</published>
    <updated>2019-02-03T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">In my previous post I said I would give my reasons for switching from Wink to Jigsaw and also explain what my needs are in relation to a blogging platform.



Wink is a new open-source blogging platform from Mohamed Said (a core Laravel contributor) that......</summary>
    <content type="html"><![CDATA[
        <p>In my <a href="/blog/welcome-new-new-blog/">previous post</a> I said I would give my reasons for switching from Wink to Jigsaw and also explain what my needs are in relation to a blogging platform.</p>

<h2>Intro</h2>

<p><a href="https://wink.themsaid.com/">Wink</a> is a new open-source blogging platform from <a href="https://themsaid.com/">Mohamed Said</a> (a core Laravel contributor) that was released in late 2018. I follow Mohamed's work with a lot of interest and I was stoked when he announced this project. At the time I was actively searching for an engine to drive my future (and current) blog but nothing felt right. Wordpress was out of the question, for many reasons. Wink seemed just right, because it was built on top of Laravel, my favorite (and day-to-day) PHP framework. Match made in heaven, right?</p>

<p>To make a long story short, I installed Wink as soon as it came out, and integrated it into Omigo.sh. It worked really well, but at the time I had just launched the site and deployed it to Linode. The site itself was also built on Laravel. Soon after, I realized that what I had done was overkill. I needed a much simpler solution.</p>

<p>You see, my plan for Omigo.sh is to have it serve as a central hub that will showcase my personal projects, with a dev blog attached. Realistically I would never need the full power of a Laravel/MySQL server. Static pages would be just what the doctor ordered. This meant Wink was not really a good match, despite its ease of integration.</p>

<p>Enter <a href="https://jigsaw.tighten.co/">Jigsaw</a>, an open-source static site framework also built on Laravel, from the good people at Tighten.co. I'd heard about it before but never really gave it much thought, not really sure why. I had a vague feeling that Jigsaw was a static site generator which was in line with my needs, but I was afraid it didn't come with all the other features I would require for a blog. Boy was I wrong.</p>

<p>One day I had a little extra time on my hands and decided to give Jigsaw a whirl. An hour was enough to convince me to switch to it.</p>

<h2>Engine</h2>

<p><strong>Wink</strong> is built on Laravel, as I mentioned, but it requires a PHP server to run, as well as a database (MySQL). In that respect it is similar to Wordpress (though a great deal less complex).</p>

<p><strong>Jigsaw</strong> also uses Laravel but mostly under the hood, to build the static site bundle. It also lets you use Laravel's familiar templating system to customize the generated output in almost any way you want. Jigsaw is also more flexible than Wink in that it can generate a full site (with various pages and content), not just a blog.</p>

<p>I really wanted a static blogging platform, one that saves posts and blog settings as simple text files that you can version control in a Git repository instead of saving them in a database.</p>

<p>+1 for Jigsaw.</p>

<h2>Content Authoring</h2>

<p><strong>Wink's</strong> bread and butter is the back-end used to author blog posts. It has a rich-text editor that allows you to apply formatting, insert images, etc. Love it, except for the fact that I very much prefer to write technical posts and articles in <a href="https://daringfireball.net/projects/markdown/">Markdown</a>. For that, I don't need a back-end, just a text editor.</p>

<p><strong>Jigsaw</strong> on the other hand uses Markdown as the default way to author content.</p>

<p>+1 for Jigsaw.</p>

<h2>Content Rendering and Templating</h2>

<p><strong>Wink</strong> does not (at the time of this writing) come with any front-end templates. It's up to you to render the blog content in any way you want, preferably with Laravel. And this is just what I did for the first iteration of this blog. It's a fairly trivial process, for a Laravel dev, but at the same time it would be nice to have a starter template that you can customize.</p>

<p><strong>Jigsaw</strong> has 2 starter templates that you can pull in optionally when you install it the first time. One is a blog, the other is a documentation site (I already have a few good uses in mind for the latter). The blog template basically scaffolds the entire blog so you can go ahead and use it right out of the box if you want.</p>

<p>What I really liked about Jigsaw is that the front-end is all built on <a href="https://tailwindcss.com/">TailwindCSS</a>, my all-time favorite CSS framework. And this makes it super-easy to customize.</p>

<p>+1 for Jigsaw.</p>

<h2>Extra Features</h2>

<p>There are a few critical features that I need in a tech blog. <strong>Wink</strong> doesn't render any content out of the box so I would have to build all that myself. Not really something I looked forward to.</p>

<p><strong>Jigsaw</strong> comes with all these configured and ready to go:</p>

<ul>
<li><em>Search</em> - some sort of JS black magic indexes your content (pages and posts) when you build the static bundle and then lets you search it using the built-in search bar.</li>
<li><em>Sitemap</em> - automatically generated on build.</li>
<li><em>Atom feed</em> - once again, generated automatically.</li>
<li><em>Responsive nav</em> - yet another thing I don't have to worry about.</li>
</ul>

<p>+1 for Jigsaw.</p>

<h2>Hosting and Deployment</h2>

<p>There's another, very important, area where Jigsaw shines over a classic DB-driven engine like Wink or Wordpress. It's the tiny matter of hosting the site/blog and storing the content. A static site generator means that I don't need a PHP server, nor a database to store my content. It also provides the added benefit of being able to host the entire site with a free service such as <a href="https://www.netlify.com/">Netlify</a> or <a href="https://surge.sh/">Surge</a>.</p>

<p>+1 for Jigsaw.</p>

<h2>Jigsaw's Drawbacks</h2>

<p>OK, I'll hand it to you. A solution such as <strong>Jigsaw</strong> is not perfect for every use-case. There are more complex features that would be very hard, if not impossible, to implement without a server-side language and a database. One of them (correct me if I'm wrong) is a custom commenting system. Yes, you can easily integrate third-party systems (which I will very likely do in the future) but if you want to have full control over users and comments, then you'll need a fully-fledged blogging framework. And this is where <strong>Wink</strong> has the potential to beat Jigsaw.</p>

<p>+1 for Wink.</p>

<h2>Maturity</h2>

<p>While this is not necessarily a critical point, <strong>Jigsaw</strong> does happen to be more mature than <strong>Wink</strong>. Which means that a lot of the kinks have been ironed out by a wider range of contributors, and less breaking changes can be expected going forward. I'll give Jigsaw the advantage here again.</p>

<p>+1 for Jigsaw.</p>

<h2>Conclusion</h2>

<p>Once I found out Jigsaw supported all the features that I wanted in a blogging platform, I was all over it. While custom-building these features is entirely doable, my end-goal in this case was to be able to blog as soon as possible, not to engage in endless coding exercises, regardless how educational they might be.</p>

<p>The Omigo.sh blog is in its very early stages but I very much doubt I'll be changing the engine again anytime soon.</p>

<p>The reality is that platforms like Wink and Jigsaw are very developer-, language-, and framework-centric. If you're not a developer, or don't like tinkering with code, or not a PHP developer, or not even a Laravel developer, neither of these might be the right solution for you. It so happens that Jigsaw checks all the tech boxes for me: static, markdown, Laravel, Vue, TailwindCSS. Which just happens to be the entire focus of this blog.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/welcome-new-new-blog</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/welcome-new-new-blog" />
    <title>Welcome to the New New Blog</title>
    <published>2019-01-31T00:00:00+00:00</published>
    <updated>2019-01-31T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Wait, there&#039;s barely any content on this blog (close to nothing in fact) and it&#039;s already gone through an overhaul? What gives? Well, I&#039;m glad you asked.

You see, one of the things that prevented me from launching a blog a lot sooner was finding the......</summary>
    <content type="html"><![CDATA[
        <p>Wait, there's barely any content on this blog (close to nothing in fact) and it's already gone through an overhaul? What gives? Well, I'm glad you asked.</p>

<p>You see, one of the things that prevented me from launching a blog a lot sooner was finding the right blogging platform. This is far from trivial. In fact, much like finding the right name for a variable in programming, picking a blogging platform demands a lot of neuron-power and time wasted with suboptimal solutions. Now, I'm confident that I've arrived. I will stick with this engine for a long while.</p>

<h2>The Beginning</h2>

<p>The first incarnation of Omigo.sh along with the blog was built on top <a href="https://laravel.com/">Laravel</a>, powered by <a href="https://wink.themsaid.com/">Wink</a>, hosted on <a href="https://www.linode.com/">Linode</a>, and deployed with <a href="https://forge.laravel.com/">Forge</a>.</p>

<p>While the front-end looked almost identical for both the original and the current version, my specific needs weren't exactly met by the initial tech stack. Everything worked but, for reasons I will detail in a future post, kept me figuratively awake at night.</p>

<h2>The Now</h2>

<p>My current stack is: blog engine powered by <a href="https://jigsaw.tighten.co/">Jigsaw</a> from Tighten.co, (built on Laravel), and hosted/deployed for free on <a href="https://www.netlify.com/">Netlify</a>. As you can see, my stack is leaner and also cheaper. Well, I still need Linode and Forge for my other projects, but Netlify ensures that at least the blog can remain hosted for free in the future.</p>

<p>I'll write up a lengthier explanation on why I switched but for now, just a quick hint: <em>markdown</em>.</p>

<p>Oh, and so far, Jigsaw has exceeded expectations.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/fix-laravel-public-storage</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/fix-laravel-public-storage" />
    <title>How to Fix Laravel Public Storage</title>
    <published>2018-12-04T00:00:00+00:00</published>
    <updated>2018-12-04T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">Update (September 15, 2020): This issue is still present and relevant in Laravel 8. I ran into it while testing a fresh installation with Jetstream teams, trying to update my user profile photo.

When I ran into this particular problem with Laravel&#039;s......</summary>
    <content type="html"><![CDATA[
        <p><em>Update (September 15, 2020)</em>: This issue is still present and relevant in Laravel 8. I ran into it while testing a fresh installation with Jetstream teams, trying to update my user profile photo.</p>

<p>When I ran into this particular problem with Laravel's <a href="https://laravel.com/docs/5.7/filesystem">filesystem</a>, I had less experience with it than I do today (relatively speaking).</p>

<p>To give a little background, for my Laravel development environment I use Homestead on Mac and Windows both.</p>

<p>In one project I wanted to upload some images to the public folder. The Laravel documentation says that you should run the <code>php artisan storage:link</code> command in order to symlink the public folder (it maps <code>storage/app/public</code> to <code>public/storage</code>). By default, uploaded files are private.</p>

<p>In my case, the command seemed to succeed locally but in the browser I couldn't load the images even though they appeared to be in the correct folder. Eventually I determined that the symlink in the Homestead environment was incorrect.</p>

<p>Digging deeper, the problem is that the artisan command seems to create an absolute link to the storage folder, which (if you run the command locally) propagates to the synced environment (Homestead) which has an entirely different project structure for your website. As a result, if you check where the created symbolic link on the server (<code>storage/app/public</code>) is pointing to, you will see something to the effect of:</p>

<pre><code class="language-bash">/Users/LocalUserName/code/MyProjectName
</code></pre>

<p>Which, of course, is not the same as <code>public/storage</code>.</p>

<p>So what happens if I run <code>php artisan storage:link</code> in the Vagrant box? I get this fairly bizarre error.</p>

<pre><code class="language-bash">symlink(): No such file or directory

  at vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php:315
    311‚ñï      */
    312‚ñï     public function link($target, $link)
    313‚ñï     {
    314‚ñï         if (! windows_os()) {
  ‚ûú 315‚ñï             return symlink($target, $link);
    316‚ñï         }
    317‚ñï
    318‚ñï         $mode = $this-&gt;isDirectory($target) ? 'J' : 'H';
    319‚ñï

      +16 vendor frames
  17  artisan:37
      Illuminate\Foundation\Console\Kernel::handle()
</code></pre>

<p>Hmm... what now?</p>

<p>The solution proved simple:</p>

<p>First, ssh to the server, navigate to your project folder, then delete the symlink from the public folder:</p>

<pre><code class="language-bash">cd public
unlink storage
</code></pre>

<p>Finally, run the command to create the symlink manually (assuming we are still in public/):</p>

<pre><code class="language-bash">ln -s ../storage/app/public storage
</code></pre>

<p>Voila, now your images should work correctly.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://chasingcode.dev/blog/omigosh-blog-intro</id>
    <link type="text/html" rel="alternate" href="https://chasingcode.dev/blog/omigosh-blog-intro" />
    <title>Omigo.sh Blog Intro</title>
    <published>2018-12-03T00:00:00+00:00</published>
    <updated>2018-12-03T00:00:00+00:00</updated>
    <author>
        <name>Constantin</name>
    </author>
    <summary type="html">I&#039;ve wanted to share my thoughts about development-related things for a very long time but somehow never got around to it. Excuses are plenty but what&#039;s important is that I finally found myself in a good place to get this started. So here I am. Welcome......</summary>
    <content type="html"><![CDATA[
        <p>I've wanted to share my thoughts about development-related things for a very long time but somehow never got around to it. Excuses are plenty but what's important is that I finally found myself in a good place to get this started. So here I am. Welcome to the Omigo.sh blog.</p>

<p>I've been a software developer (in some form or another) for most of my life, and if there's one certainty in this career it's the constant need for self-improvement.</p>

<p>I started Omigo.sh as a central platform from which I can showcase the personal projects that I am tinkering on in my spare time (yes, I have a developer day job as well), but also as a repository of coding knowledge that I have collected over time.</p>

<p>My intent is to use the Omigo.sh blog for recording techniques and solutions to problems that I have discovered while working with my favorite platforms, including (but not limited to) PHP, Laravel, Vue.js, TailwindCSS, Mac, PC, etc.</p>

<p>As much as possible, I would like to avoid duplicating content that lies a short Google search away, because after all, whenever I find myself in deep waters without an obvious solution, it's one of the first things I try. However, it's entirely possible that things will be repeated here at some point, but I can assure you it wasn't intentional.</p>

<p>Having said all that, and with reasonable certainty that probably no one will read this post anyway, I will now venture wherever the keyboard will lead me.</p>
    ]]></content>
</entry>
    </feed>
